docker:
  meta:
    _root:
      title: "🐳 داکر"
      desc: "📘 داکر یک پلتفرم برای اجرای برنامه‌ها در کانتینرهای ایزوله است. این برگه تقلب شامل دستورات کار با ایمیج‌ها، کانتینرها، شبکه‌ها، حجم‌ها، و همچنین Docker Compose و Swarm می‌باشد."

  basic:
    _root:
      title: "📦 دستورات پایه"
    docker:
      desc: "دستور اصلی CLI داکر برای اجرای زیردستورات و مدیریت کانتینرها، ایمیج‌ها، شبکه‌ها و حجم‌ها"
    docker_version:
      desc: "نمایش نسخه نصب‌شده داکر (کلاینت و سرور). مفید برای بررسی نصب"
      ex1: "نمایش فقط نسخه API کلاینت داکر"
      ex2: "نمایش فقط نسخه سرور (Engine) داکر"
      ex3: "خروجی اطلاعات کامل نسخه در فرمت JSON"
    docker_system_info:
      desc: "نمایش اطلاعات کلی سیستم داکر: تعداد کانتینرها، ایمیج‌ها و منابع"
      ex1: "نمایش داده‌های داکر: نسخه‌ها، شبکه‌ها، تعداد کانتینرها و ایمیج‌ها"
      ex2: "خروجی اطلاعات در JSON — مفید برای خودکارسازی"
      ex3: "نمایش تعداد CPUها و حافظه کل"
      ex4: "نمایش درایور ذخیره‌سازی مورد استفاده توسط داکر"
    docker_image_pull:
      desc: "دانلود یک ایمیج از Docker Hub یا رجیستری دیگر. کانتینرها بدون ایمیج اجرا نمی‌شوند"
      ex1: "دانلود آخرین ایمیج Ubuntu"
      ex2: "دانلود ایمیج سبک Nginx بر پایه Alpine Linux"
      ex3: "دانلود ایمیج Redis نسخه 7"
    docker_container_run:
      desc: "ایجاد و اجرای یک کانتینر جدید از یک ایمیج"
      ex1: "اجرای Ubuntu با ترمینال Bash تعاملی"
      ex2: "اجرای Nginx در حالت detached (پس‌زمینه)"
      ex3: "اجرای Nginx و اتصال پورت 80 کانتینر به پورت 8080 میزبان"
    docker_container_ls:
      desc: "لیست کانتینرهای در حال اجرا"
      ex1: "نمایش فقط کانتینرهای در حال اجرا"
      ex2: "نمایش همه کانتینرها، شامل متوقف‌شده‌ها"
      ex3: "خروجی فقط نام کانتینرها"
    docker_container_start:
      desc: "شروع یک یا چند کانتینر متوقف‌شده"
      ex1: "شروع یک کانتینر با نام"
      ex2: "شروع همه کانتینرها"
      ex3: "شروع کانتینر و اتصال ترمینال تعاملی"
    docker_container_stop:
      desc: "توقف یک کانتینر در حال اجرا"
      ex1: "توقف یک کانتینر با نام"
      ex2: "توقف همه کانتینرهای در حال اجرا"
      ex3: "توقف یک کانتینر با دادن 5 ثانیه برای پایان پردازه‌ها"
    docker_container_restart:
      desc: "راه‌اندازی مجدد یک کانتینر"
      ex1: "راه‌اندازی مجدد یک کانتینر مشخص"
      ex2: "راه‌اندازی مجدد همه کانتینرهای در حال اجرا"
      ex3: "راه‌اندازی مجدد یک کانتینر با تأخیر 10 ثانیه‌ای"
    docker_container_rm:
      desc: "حذف یک کانتینر"
      ex1: "حذف یک کانتینر متوقف‌شده خاص"
      ex2: "حذف همه کانتینرهای متوقف‌شده"
      ex3: "حذف اجباری یک کانتینر در حال اجرا"
    docker_image_ls:
      desc: "لیست ایمیج‌های دانلودشده"
      ex1: "نمایش همه ایمیج‌ها روی میزبان"
      ex2: "نمایش همه ایمیج‌ها شامل لایه‌های میانی"
      ex3: "خروجی فقط نام‌ها و تگ‌های ایمیج"
    docker_image_rm:
      desc: "حذف یک یا چند ایمیج از حافظه محلی"
      ex1: "حذف ایمیج با تگ `latest` از مخزن `test1`"
      ex2: "حذف ایمیج با شناسه آن"
      ex3: "حذف همه ایمیج‌ها (با احتیاط استفاده کنید!)"

  container:
    _root:
      title: "🔁 مدیریت کانتینر"
    docker_container_exec:
      desc: "اجرای یک دستور داخل کانتینر در حال اجرا"
      ex1: "اجرای یک شل bash تعاملی داخل کانتینر با نام `container`"
      ex2: "اجرای دستور `ls` در دایرکتوری `/app` داخل کانتینر"
      ex3: "اجرای یک دستور در کانتینر در حالت detached (بدون انتظار)"
    docker_container_logs:
      desc: "مشاهده لاگ‌های کانتینر"
      ex1: "نمایش همه لاگ‌های کانتینر `container`"
      ex2: "دنبال کردن لاگ‌های کانتینر به صورت زنده"
      ex3: "نمایش 50 خط آخر لاگ‌ها"
    docker_inspect:
      desc: "بازیابی اطلاعات دقیق JSON درباره یک کانتینر یا ایمیج"
      ex1: "نمایش جزئیات کانتینر `container`"
      ex2: "نمایش آدرس IP کانتینر"
    docker_container_stats:
      desc: "نمایش آمار مصرف منابع کانتینرها در زمان واقعی"
      ex1: "نمایش CPU، حافظه، شبکه و دیسک برای همه کانتینرها"
      ex2: "نمایش آمار فقط یک کانتینر مشخص"
      ex3: "نمایش یک عکس فوری از آمار و خروج"
    docker_container_rename:
      desc: "تغییر نام یک کانتینر"
      ex1: "تغییر نام کانتینر از `old_name` به `new_name`"
    docker_container_cp:
      desc: "کپی فایل‌ها بین کانتینر و میزبان"
      ex1: "کپی یک فایل از کانتینر به دایرکتوری میزبان"
      ex2: "کپی یک فایل از میزبان به کانتینر"
      ex3: "جریان فایل لاگ از کانتینر و فیلتر خطوط «ERROR» بدون ذخیره روی دیسک"
    docker_container_top:
      desc: "نمایش پردازه‌های در حال اجرای داخل یک کانتینر"
      ex1: "نمایش پردازه‌های کانتینر با نام `container`"
    docker_container_pause:
      desc: "مکث تمام پردازه‌ها در یک کانتینر"
      ex1: "مکث کانتینر `container`"
    docker_container_unpause:
      desc: "ازسرگیری کانتینر متوقف‌شده"
      ex1: "ازسرگیری کانتینر `container`"
    docker_container_update:
      desc: "بروزرسانی تنظیمات کانتینر بدون راه‌اندازی مجدد"
      ex1: "محدود کردن استفاده حافظه کانتینر به 500 MB"

  images:
    _root:
      title: "🧱 ایمیج‌ها و Dockerfile"
    docker_buildx_build:
      desc: "ساخت یک ایمیج داکر از Dockerfile"
      ex1: "ساخت یک ایمیج با تگ `my_image` از دایرکتوری جاری"
      ex2: "ساخت یک ایمیج با تگ نسخه `1.0`"
      ex3: "ساخت ایمیج بدون کش برای ساخت تمیز"
    docker_container_commit:
      desc: "ایجاد یک ایمیج از وضعیت فعلی یک کانتینر"
      ex1: "ایجاد ایمیج `my_img` با تگ `v1` از کانتینر `container`"
      ex2: "ایجاد ایمیج با پیام commit"
      ex3: "ایجاد ایمیج با مشخص کردن نویسنده"
    docker_image_tag:
      desc: "افزودن یا تغییر یک تگ ایمیج"
      ex1: "افزودن یک تگ برای push به رجیستری `myrepo`"
      ex2: "ایجاد تگ `stable` برای ایمیج با تگ `1.0`"
      ex3: "افزودن تگ `backup` به یک ایمیج محلی"
    docker_image_push:
      desc: "push یک ایمیج به Docker Hub یا رجیستری دیگر"
      ex1: "push ایمیج با تگ `latest` به مخزن `myrepo`"
      ex2: "push ایمیج با تگ `1.0`"
      ex3: "push ایمیج با تگ پیش‌فرض `latest`"
    docker_login:
      desc: "احراز هویت در Docker Hub یا رجیستری دیگر"
      ex1: "ورود تعاملی با نام کاربری و رمز عبور به Docker Hub"
      ex2: "ورود به رجیستری خصوصی"
      ex3: "ورود با نام کاربری و رمز عبور (توصیه نمی‌شود)"
    docker_logout:
      desc: "خروج از Docker Hub یا رجیستری دیگر"
      ex1: "خروج از Docker Hub"
      ex2: "خروج از رجیستری خصوصی"
    healthcheck:
      desc: "دستور Dockerfile برای بررسی خودکار وضعیت سلامت کانتینر"
      ex1: "افزودن بررسی سلامت برای اطمینان از سرویس هر 30 ثانیه"
      ex2: "بررسی وضعیت healthcheck یک کانتینر در حال اجرا"

  networks:
    _root:
      title: "🔌 شبکه‌ها و حجم‌ها"
    docker_network_ls:
      desc: "لیست همه شبکه‌های داکر"
      ex1: "نمایش همه شبکه‌های ایجادشده داکر"
      ex2: "نمایش فقط شبکه‌ها با درایور `bridge`"
      ex3: "نمایش فقط نام شبکه‌ها"
    docker_network_create:
      desc: "ایجاد یک شبکه جدید داکر"
      ex1: "ایجاد شبکه با نام `my_net` با تنظیمات پیش‌فرض"
      ex2: "ایجاد شبکه با درایور `bridge`"
      ex3: "ایجاد شبکه با subnet مشخص"
    docker_network_connect:
      desc: "اتصال یک کانتینر به شبکه"
      ex1: "اتصال کانتینر `container` به شبکه `my_net`"
      ex2: "اتصال با alias به نام `db_net`"
    docker_network_disconnect:
      desc: "قطع اتصال کانتینر از شبکه"
      ex1: "قطع اتصال کانتینر `container` از شبکه `my_net`"
    docker_volume_ls:
      desc: "لیست همه حجم‌های داکر"
      ex1: "نمایش همه حجم‌های داکر"
      ex2: "نمایش حجم‌های استفاده‌نشده"
    docker_volume_create:
      desc: "ایجاد یک حجم جدید داکر"
      ex1: "ایجاد حجم با نام `my_vol`"
      ex2: "ایجاد یک حجم موقت با استفاده از tmpfs"
    docker_volume_inspect:
      desc: "نمایش اطلاعات دقیق یک حجم"
      ex1: "نمایش جزئیات حجم `my_vol` در JSON"
    docker_volume_rm:
      desc: "حذف یک یا چند حجم"
      ex1: "حذف حجم با نام `my_vol`"
      ex2: "حذف همه حجم‌های استفاده‌نشده"

  plugins:
    _root:
      title: "🧩 افزونه‌های داکر"
    docker_plugin_ls:
      desc: "لیست افزونه‌های نصب‌شده داکر"
      ex1: "نمایش همه افزونه‌ها و وضعیتشان"
    docker_plugin_install:
      desc: "نصب یک افزونه داکر از رجیستری"
      ex1: "نصب افزونه حجم SSHFS"
      ex2: "نصب افزونه شبکه Weave"
    docker_plugin_disable:
      desc: "غیرفعال کردن یک افزونه نصب‌شده"
      ex1: "غیرفعال کردن افزونه SSHFS"
    docker_plugin_enable:
      desc: "فعال‌سازی یک افزونه غیرفعال‌شده"
      ex1: "فعال‌سازی افزونه SSHFS"
    docker_plugin_rm:
      desc: "حذف یک افزونه داکر"
      ex1: "حذف افزونه SSHFS"

  compose:
    _root:
      title: "📋 داکر کامپوز"
    docker_compose_up:
      desc: "راه‌اندازی کانتینرهایی که در `docker-compose.yml` تعریف شده‌اند"
      ex1: "راه‌اندازی همه سرویس‌ها در شاخه جاری در حالت تعاملی"
      ex2: "راه‌اندازی سرویس‌ها در حالت detached (پس‌زمینه)"
      ex3: "ساخت ایمیج‌ها قبل از راه‌اندازی سرویس‌ها"
    docker_compose_down:
      desc: "توقف و حذف کانتینرها، شبکه‌ها و حجم‌هایی که توسط `up` ساخته شده‌اند"
      ex1: "توقف همه سرویس‌های در حال اجرا و حذف منابع مرتبط"
      ex2: "حذف حجم‌هایی که توسط Compose ساخته شده‌اند"
      ex3: "حذف ایمیج‌هایی که توسط Compose ساخته شده‌اند"
    docker_compose_logs:
      desc: "مشاهده لاگ‌های همه یا سرویس‌های خاص"
      ex1: "نمایش لاگ‌های همه سرویس‌ها"
      ex2: "دنبال کردن لاگ‌ها به صورت زنده"
      ex3: "نمایش لاگ‌های فقط سرویس `web`"
    docker_compose_exec:
      desc: "اجرای یک دستور داخل کانتینر سرویس در حال اجرا"
      ex1: "ورود به شل bash تعاملی داخل کانتینر سرویس `web`"
      ex2: "اجرای دستور `ls` داخل کانتینر پایگاه‌داده"
      ex3: "اجرای دستور در کانتینر `worker` در حالت detached"
    docker_compose_build:
      desc: "ساخت یا بازسازی ایمیج‌های سرویس"
      ex1: "ساخت همه ایمیج‌های تعریف‌شده در `docker-compose.yml`"
      ex2: "ساخت فقط ایمیج سرویس `web`"
      ex3: "ساخت ایمیج‌ها بدون استفاده از کش"
    docker_compose_ps:
      desc: "نمایش وضعیت همه سرویس‌ها و کانتینرها"
      ex1: "نمایش همه کانتینرها شامل متوقف‌شده‌ها"
      ex2: "نمایش فقط نام سرویس‌ها"
    docker_compose_pull:
      desc: "دانلود/بروزرسانی ایمیج‌های سرویس‌ها از رجیستری"
      ex1: "pull ایمیج فقط برای سرویس `web`"
      ex2: "ادامه pull حتی اگر برخی ایمیج‌ها خطا داشته باشند"
    docker_compose_restart:
      desc: "راه‌اندازی مجدد همه یا سرویس‌های مشخص"
      ex1: "راه‌اندازی مجدد فقط سرویس `db`"
      ex2: "راه‌اندازی مجدد سرویس‌ها با زمان انتظار 10 ثانیه"
    docker_compose_config:
      desc: "نمایش پیکربندی نهایی Compose در فرمت YAML"
      ex1: "لیست همه سرویس‌ها در پیکربندی"
      ex2: "لیست همه حجم‌های تعریف‌شده در پیکربندی"
    docker_compose_start:
      desc: "شروع سرویس‌های متوقف‌شده بدون ایجاد دوباره کانتینرها"
      ex1: "شروع سرویس `web`"
      ex2: "شروع چند سرویس به‌طور همزمان"
    docker_compose_stop:
      desc: "توقف سرویس‌ها بدون حذف کانتینرها"
      ex1: "توقف سرویس `web`"
      ex2: "توقف سرویس‌ها با زمان انتظار 5 ثانیه"

  export_import:
    _root:
      title: "📤 صادرات و واردات"
    docker_image_save:
      desc: "ذخیره یک یا چند ایمیج داکر در یک آرشیو tar برای واردات یا انتقال بعدی"
      ex1: "ذخیره یک ایمیج داکر در فایل tar"
      ex2: "روش جایگزین برای ذخیره ایمیج در فایل"
      ex3: "ذخیره ایمیج مشخص Redis در فایل"
    docker_image_load:
      desc: "بارگذاری ایمیج‌های داکر از آرشیو tar ذخیره‌شده"
      ex1: "بارگذاری ایمیج داکر از فایل tar"
      ex2: "بارگذاری ایمیج با مشخص کردن فایل به عنوان پارامتر"
      ex3: "بارگذاری ایمیج بدون نمایش پیشرفت"
    docker_container_export:
      desc: "صادرات فایل‌سیستم یک کانتینر به صورت آرشیو tar بدون تاریخچه یا متادیتا"
      ex1: "صادرات فایل‌سیستم کانتینر به آرشیو"
      ex2: "صادرات کانتینر بر اساس نام"
      ex3: "صادرات بر اساس ID کانتینر با فلگ `-o`"
    docker_image_import:
      desc: "ایجاد یک ایمیج جدید از آرشیو tar یک فایل‌سیستم"
      ex1: "وارد کردن فایل آرشیو به عنوان ایمیج جدید داکر"
      ex2: "وارد کردن ایمیج مستقیم از URL"
      ex3: "وارد کردن از ورودی استاندارد"

  cleanup:
    _root:
      title: "🧹 پاکسازی و عیب‌یابی"
    docker_system_df:
      desc: "نمایش استفاده دیسک داکر: حجم‌ها، ایمیج‌ها، کانتینرها و کش ساخت"
      ex1: "خروجی جزئیات هر ایمیج، کانتینر و حجم"
      ex2: "خروجی اطلاعات در فرمت JSON"
    docker_system_prune:
      desc: "حذف همه داده‌های استفاده‌نشده داکر: کانتینرهای متوقف‌شده، شبکه‌های بلااستفاده، ایمیج‌های dangling و کش ساخت"
      ex1: "حذف ایمیج‌های بلااستفاده شامل لایه‌های میانی"
      ex2: "حذف حجم‌های بلااستفاده به همراه منابع دیگر"
    docker_image_prune:
      desc: "حذف ایمیج‌های بلااستفاده داکر شامل لایه‌های dangling"
      ex1: "حذف همه ایمیج‌های بلااستفاده شامل dangling"
      ex2: "حذف ایمیج‌های قدیمی‌تر از 24 ساعت"
    docker_container_prune:
      desc: "حذف کانتینرهای متوقف‌شده بر اساس فیلتر یا همه اگر مشخص نشود"
      ex1: "حذف کانتینرهای متوقف‌شده قدیمی‌تر از 24 ساعت"
      ex2: "حذف بدون درخواست تأیید"

  swarm:
    _root:
      title: "🐝 داکر Swarm"
    docker_swarm_init:
      desc: "مقداردهی اولیه یک خوشه جدید Docker Swarm روی نود فعلی"
      ex1: "مقداردهی اولیه خوشه با مشخص کردن آدرس IP"
      ex2: "مقداردهی اولیه با پورت شنود مشخص"
    docker_service_create:
      desc: "ایجاد یک سرویس جدید در خوشه Swarm"
      ex1: "ایجاد سرویس Nginx در Swarm"
      ex2: "ایجاد سرویس با 3 replica"
      ex3: "ایجاد سرویس با نگاشت پورت"
    docker_stack_deploy:
      desc: "استقرار یک پشته سرویس‌ها در خوشه Swarm بر اساس فایل Compose"
      ex1: "استقرار پشته از فایل compose"
      ex2: "استقرار با ارسال احراز هویت رجیستری"
      ex3: "استفاده از فایل compose جایگزین برای پشته"
    docker_stack_rm:
      desc: "حذف یک یا چند پشته از خوشه Swarm"
      ex1: "حذف پشته `mystack`"
      ex2: "حذف همه پشته‌ها (توصیه نمی‌شود)"
      ex3: "حذف پشته و خروج از Swarm"

  advanced_docker:
    _root:
      title: "💼 استفاده پیشرفته از داکر"

    prof:
      title: "🚀 دستورات حرفه‌ای داکر"
      docker_buildx:
        desc: "ابزار پیشرفته ساخت ایمیج جایگزین `docker build`. پشتیبانی از چندسکویی، کش، ساخت موازی و خروجی به فرمت‌های مختلف. مفید برای CI/CD و توسعه چندسکویی"
        ex1: "ساخت ایمیج چندسکویی (ARM و x86 همزمان)"
        ex2: "ساخت ایمیج و بارگذاری آن در کش موتور محلی داکر"
        ex3: "ساخت و push ایمیج چندسکویی به رجیستری"
      docker_context:
        desc: "مدیریت contextهای داکر برای کار با محیط‌های راه‌دور یا چندگانه. امکان جابجایی سریع بین موتورهای محلی و راه‌دور داکر"
        ex1: "ایجاد context برای اتصال به میزبان داکر راه‌دور"
        ex2: "جابجایی به context راه‌دور"
        ex3: "لیست contextهای موجود و فعال"
      docker_system_events:
        desc: "گوش دادن به رخدادهای داکر در زمان واقعی، با فیلتر بر اساس نوع رخداد (مثلاً شروع کانتینر). مفید برای پایش و خودکارسازی"
        ex1: "نمایش فقط رخدادهای شروع کانتینر"
        ex2: "نمایش رخدادها از یک ساعت گذشته تا 10 دقیقه قبل"
        ex3: "نمایش فقط رخدادهای مرتبط با شبکه"
        ex4: "نمایش رخدادهای مرتبط با ایمیج `nginx`"
      docker_container_update:
        desc: "تغییر محدودیت منابع و تنظیمات یک کانتینر در حال اجرا بدون راه‌اندازی مجدد"
        ex1: "تنظیم محدودیت به 2 CPU و 1GB RAM"
        ex2: "تنظیم سیاست auto-restart به `unless-stopped`"
        ex3: "محدود کردن تعداد پردازه‌ها به 200"
      docker_container_diff:
        desc: "نمایش تغییرات فایل‌سیستم کانتینر نسبت به ایمیج اصلی. مفید برای اشکال‌زدایی و ممیزی"
        ex1: "نمایش همه تغییرات فایل‌سیستم کانتینر"
        ex2: "نمایش فقط فایل‌های اضافه‌شده (`A` — Added)"
      docker_image_history:
        desc: "نمایش تاریخچه لایه‌های ایمیج: دستورات ساخت، اندازه هر لایه و زمان ایجاد. مفید برای بهینه‌سازی و ممیزی"
        ex1: "نمایش تاریخچه لایه‌های یک ایمیج"
        ex2: "نمایش کامل دستورات ساخت بدون کوتاه‌سازی"
        ex3: "خروجی فقط دستورات ساخت و اندازه لایه‌ها"

    practices:
      title: "🛠 روش‌ها و خودکارسازی مفید داکر"
      minimize_image_size:
        title: "کمینه‌سازی اندازه ایمیج"
        p1: "استفاده از ایمیج‌های پایه مانند `alpine` یا `scratch` برای اندازه حداقلی."
        p2: "برای ادغام لایه‌ها می‌توانید از `--squash` در زمان build استفاده کنید (نیازمند فعال‌سازی ویژگی‌های آزمایشی)."
        p3: "همچنین فایل‌ها و کش‌های موقت را در یک لایه حذف کنید:"
      minimize_layers:
        title: "کمینه‌سازی تعداد لایه‌ها"
        p1: "ترکیب دستورات در یک `RUN` برای کاهش تعداد لایه‌ها و اندازه نهایی ایمیج:"
      optimize_build:
        title: "بهینه‌سازی ساخت Dockerfile"
        p1: "از ساخت چندمرحله‌ای استفاده کنید تا فقط فایل‌های لازم در ایمیج نهایی باقی بمانند."
        p2: "ابتدا وابستگی‌ها را کپی و نصب کنید، سپس کد را کپی کنید — این باعث بهبود کش لایه‌ها و افزایش سرعت ساخت می‌شود."
      secrets_and_configs:
        title: "جدا کردن secrets و configs"
        p1: "هرگز فایل‌های `.env`، کلیدهای API یا گواهی‌های خصوصی را داخل ایمیج ذخیره نکنید."
        intro: "برای پیکربندی استفاده کنید:"
        items:
          secret: "`docker secret` (در Swarm)"
          env: "متغیرهای محیطی (`-e VAR=value` یا `.env`)"
          volumes: "حجم‌های خارجی برای configs"
      buildkit_secrets:
        title: "اسرار زمان ساخت (BuildKit)"
        p1: "برای عبور امن secrets در زمان ساخت، از فلگ `--secret` استفاده کنید:"
        p2: "در Dockerfile، secret در مسیر `/run/secrets/mysecret` در دسترس خواهد بود:"
        note: "🛡 این باعث جلوگیری از ذخیره secrets در لایه‌های ایمیج می‌شود."
      rootless:
        title: "داکر بدون دسترسی root"
        p1: "اجرای داکر بدون حقوق root امنیت را افزایش داده و ریسک نفوذ به میزبان را کاهش می‌دهد."
        steps_intro: "برای فعال‌سازی:"
        check_intro: "بررسی:"
        warning: "⚠ برخی ویژگی‌ها (مانند فوروارد پورت <1024) در دسترس نخواهند بود."
      scan:
        title: "اسکن ایمیج‌ها برای آسیب‌پذیری"
        p1: "استفاده از ابزارهای داخلی:"
        p2: "یا CLI جدید:"
        p3: "این به شناسایی آسیب‌پذیری‌ها در ایمیج‌های پایه و وابستگی‌ها کمک می‌کند."
      resource_limits:
        title: "پایش مصرف منابع"
        p1: "محدود کردن کانتینرها بر اساس حافظه، CPU و تعداد پردازه‌ها:"
        p2: "این مانع از مصرف بیش از حد منابع می‌شود."
        p3: "همچنین می‌توانید I/O را محدود کنید:"
        p4: "مفید برای کانتینرهایی که نباید زیرسیستم دیسک را بارگذاری کنند."
      cleanup:
        title: "پاکسازی خودکار"
        p1: "به‌طور منظم ایمیج‌ها، کانتینرها، حجم‌ها و شبکه‌های بلااستفاده را حذف کنید:"
        warning: "⚠ مراقب باشید: این دستور همه منابع بلااستفاده را حذف می‌کند."
        p2: "برای پاکسازی انتخابی استفاده کنید:"
      cicd:
        title: "ادغام با CI/CD"
        p1: "ساخت، تست و استقرار را در GitHub Actions، GitLab CI، Jenkins بگنجانید."
        example_intro: "نمونه مرحله GitHub Actions:"
      logging:
        title: "لاگ‌گیری و پایش"
        p1: "اتصال راننده‌های لاگ (`--log-driver`) به سیستم‌های متمرکز: ELK، Loki، Splunk."
        p2: "استفاده از Prometheus + cAdvisor برای متریک‌های کانتینر."
      production:
        title: "استقرار در محیط تولید"
        p1: "جدا کردن configs برای توسعه و تولید با استفاده از `docker-compose.override.yml`."
        ha_intro: "برای دسترس‌پذیری بالا و مقیاس‌پذیری از موارد زیر استفاده کنید:"
        items:
          swarm: "داکر Swarm"
          k8s: "کوبرنیتس"

    debugging:
      title: "🐞 اشکال‌زدایی و پروفایل‌گیری کانتینرهای داکر"
      exec:
        group_desc: "اجرای یک دستور داخل کانتینر در حال اجرا، با دسترسی تعاملی یا امکان اجرای پردازه‌ها در محیط ایزوله کانتینر"
        r1: "شروع یک ترمینال تعاملی (bash) داخل کانتینر در حال اجرا"
        r2: "شروع یک شل حداقلی داخل کانتینر (اگر bash در دسترس نباشد)"
        r3: "اجرای دستور داخل کانتینر بدون حالت تعاملی"
      logs:
        group_desc: "نمایش لاگ‌های کانتینر مشخص‌شده، برای مشاهده خروجی و رویدادهای مرتبط با عملکرد آن جهت تشخیص و پایش"
        r1: "مشاهده آخرین 100 خط لاگ با پخش زنده"
        r2: "نمایش همه لاگ‌های موجود کانتینر"
        r3: "نمایش لاگ‌های یک ساعت گذشته"
      inspect:
        group_desc: "خروجی اطلاعات دقیق درباره یک شیء داکر (کانتینر، ایمیج، شبکه و غیره) در قالب JSON شامل پیکربندی و وضعیت"
        r1: "گرفتن اطلاعات کامل JSON درباره کانتینر"
        r2: "نمایش PID پردازه اصلی کانتینر روی میزبان"
        r3: "نمایش آدرس IP کانتینر"
      nsenter:
        group_desc: "ابزار لینوکسی برای ورود به namespaceهای یک پردازه دیگر (اینجا کانتینر). همراه با `strace` برای رهگیری syscalls داخل کانتینر جهت اشکال‌زدایی استفاده می‌شود"
        r1: "ورود به namespaceهای کانتینر و رهگیری syscalls پردازه 1"
        r2: "باز کردن شل bash داخل namespaceهای کانتینر"
        r3: "نمایش پورت‌های باز داخل کانتینر"
      tcpdump:
        group_desc: "ابزار خط فرمان برای گرفتن و تحلیل ترافیک شبکه. در کانتینر برای تشخیص مشکلات شبکه، تحلیل بسته‌ها و پایش اتصالات استفاده می‌شود"
        r1: "گرفتن و تحلیل ترافیک شبکه داخل کانتینر"
        r2: "گرفتن ترافیک فقط روی پورت 80"
        r3: "ذخیره ترافیک در فایل برای تحلیل بعدی"
      stats:
        group_desc: "نمایش شاخص‌های مصرف منابع فعلی (CPU، حافظه، شبکه، دیسک) برای یک یا چند کانتینر به صورت زنده"
        r1: "نمایش مصرف زنده CPU، حافظه، شبکه و دیسک کانتینر"
        r2: "نمایش آمار برای همه کانتینرها"
        r3: "نمایش آمار یک‌باره و خروج"
      top:
        group_desc: "نمایش لیست پردازه‌های در حال اجرای داخل کانتینر، مشابه `ps` در لینوکس برای تحلیل فعالیت کانتینر"
        r1: "نمایش پردازه‌های در حال اجرا در کانتینر"
        r2: "استفاده از فرمت خروجی جایگزین مثل `ps aux`"
        r3: "نمایش فقط PID و فرمان پردازه‌ها"
      diff:
        group_desc: "نمایش تغییرات فایل‌سیستم کانتینر نسبت به ایمیج پایه، شامل فایل‌های اضافه‌شده، تغییر یافته یا حذف‌شده"
        r1: "نمایش تغییرات فایل‌سیستم کانتینر نسبت به ایمیج پایه"
        r2: "نمایش فقط فایل‌های اضافه‌شده (`A` — Added)"
        r3: "نمایش فقط فایل‌های تغییر یافته (`C` — Changed)"
      cp:
        group_desc: "کپی فایل‌ها و شاخه‌ها بین کانتینر و میزبان برای تبادل داده و پشتیبان‌گیری"
        r1: "کپی فایل از کانتینر به میزبان"
        r2: "کپی فایل از میزبان به کانتینر"
        r3: "کپی فایل لاگ و فیلتر خطوط خطا بدون ذخیره روی دیسک"
      advanced_note: "💡 برای اشکال‌زدایی پیشرفته می‌توانید از `nsenter`، `strace`، `tcpdump`، `gdb` و ابزارهای سطح پایین دیگر استفاده کنید."

  compose_adv:
    _root:
      title: "💼 استفاده پیشرفته از داکر کامپوز"
    prof:
      title: "🚀 دستورات حرفه‌ای Docker Compose"
      up:
        group_desc: "شروع و مدیریت چرخه حیات سرویس‌های مشخص‌شده در فایل docker-compose.yml با قابلیت اجرای پس‌زمینه"
        r1: "اجرای فقط سرویس‌های `web` و `db` در حالت detached"
        r2: "بازسازی ایمیج‌ها قبل از شروع سرویس‌ها"
        r3: "حذف کانتینرهایی که در فایل compose فعلی تعریف نشده‌اند"
      build:
        group_desc: "ساخت ایمیج‌های سرویس‌ها طبق فایل compose با کنترل کش و موازی‌سازی"
        r1: "بازسازی کامل ایمیج‌ها بدون کش"
        r2: "ساخت همزمان همه سرویس‌ها برای افزایش سرعت"
        r3: "ساخت ایمیج فقط برای سرویس `web`"
      pull:
        group_desc: "دانلود جدیدترین نسخه ایمیج‌ها از رجیستری برای همه یا سرویس‌های مشخص"
        r1: "pull ایمیج‌ها برای همه سرویس‌ها"
        r2: "pull ایمیج فقط برای سرویس `db`"
        r3: "ادامه اجرا با نادیده گرفتن خطاها هنگام pull ایمیج"
      restart:
        group_desc: "راه‌اندازی مجدد همه یا سرویس‌های مشخص بدون بازسازی کانتینرها"
        r1: "راه‌اندازی مجدد همه سرویس‌های پروژه فعلی"
        r2: "راه‌اندازی مجدد فقط سرویس `worker`"
        r3: "راه‌اندازی مجدد چند سرویس همزمان"
      exec:
        group_desc: "اجرای دستور داخل کانتینر سرویس در حال اجرا با حالت تعاملی اختیاری"
        r1: "اجرای psql داخل کانتینر سرویس `db`"
        r2: "باز کردن یک شل داخل کانتینر `web`"
        r3: "اجرای درخواست curl از کانتینر سرویس `api`"
      config:
        group_desc: "خروجی پیکربندی نهایی Compose با درنظر گرفتن همه فایل‌ها و متغیرهای محیطی"
        r1: "نمایش پیکربندی ادغام‌شده در فرمت YAML"
        r2: "لیست همه سرویس‌ها"
        r3: "نمایش همه متغیرهای محیطی استفاده‌شده توسط سرویس‌ها"
      watch:
        group_desc: "راه‌اندازی خودکار مجدد سرویس‌ها هنگام تغییر فایل‌ها، مفید برای توسعه"
        r1: "شروع پایش فایل‌ها و راه‌اندازی مجدد سرویس‌ها هنگام تغییر"
      events:
        group_desc: "پخش زنده رویدادهای Compose: شروع، توقف، بروزرسانی سرویس"
        r1: "دریافت رویدادها در فرمت JSON"
      rm:
        group_desc: "حذف کانتینرهای سرویس متوقف‌شده"
        r1: "حذف کانتینرهای سرویس‌های `web` و `db`"
      pause:
        group_desc: "مکث سرویس"
        r1: "مکث سرویس `api`"
      unpause:
        group_desc: "ازسرگیری سرویس‌های متوقف‌شده"
        r1: "ازسرگیری سرویس `api`"
      create:
        group_desc: "ایجاد کانتینرها بدون شروع آن‌ها"
        r1: "ایجاد کانتینرهای `web` و `db` بدون اجرای آن‌ها"
      images:
        group_desc: "نمایش لیست ایمیج‌های استفاده‌شده توسط سرویس‌ها"
        r1: "نمایش ایمیج‌های همه سرویس‌ها"
      top:
        group_desc: "نمایش پردازه‌های در حال اجرای داخل کانتینرهای سرویس"
        r1: "نمایش پردازه‌ها داخل کانتینرهای سرویس `web`"

    practices:
      title: "🛠 روش‌ها و خودکارسازی مفید با Docker Compose"
      env_separation:
        title: "جداسازی محیط‌ها"
        p1: "برای محیط‌های مختلف — `development`، `staging`، `production` — از فایل‌های جداگانه `docker-compose.override.yml` استفاده کنید. این باعث جداسازی پیکربندی‌ها و جلوگیری از تداخل تنظیمات می‌شود."
        p2: "می‌توانید چند فایل پیکربندی را با فلگ `-f` ترکیب کنید:"
        p3: "از فایل‌های `.env` مختلف (`.env.dev`، `.env.prod` و غیره) برای مدیریت متغیرهای محیطی استفاده کنید."
      secrets:
        title: "ذخیره امن اسرار"
        p1: "اطلاعات حساس (رمزها، توکن‌ها) را مستقیماً در فایل‌های Compose قرار ندهید. به جای آن استفاده کنید:"
        items:
          env: "فایل‌های `.env` برای متغیرهای محیطی (توجه داشته باشید که فایل‌های `.env` رمزنگاری‌شده نیستند و نباید در مخازن عمومی ذخیره شوند)"
          swarm_secret: "`docker secret` و `docker config` برای مدیریت امن secrets و تنظیمات در Docker Swarm"
          volumes: "حجم‌های خارجی برای فایل‌های پیکربندی حاوی اسرار"
          external_mgr: "سیستم‌های مدیریت secrets خارجی (مثل HashiCorp Vault، AWS Secrets Manager)"
      startup_order:
        title: "ترتیب راه‌اندازی با `depends_on` و `healthcheck`"
        p1: "برای اطمینان از آماده بودن وابستگی‌ها قبل از اجرای سرویس‌ها:"
      min_downtime:
        title: "کمینه‌سازی زمان قطعی هنگام بروزرسانی"
        p1: "قبل از بروزرسانی سرویس‌ها اجرا کنید:"
        p2: "گزینه `-d` کانتینرها را در پس‌زمینه اجرا می‌کند و `--remove-orphans` کانتینرهایی که در پیکربندی فعلی تعریف نشده‌اند را حذف می‌کند."
        p3: "برای توقف کامل و حذف کانتینرهای قدیمی در صورت نیاز:"
        p4: "این تضمین می‌کند ایمیج‌های جدید بارگیری و کانتینرهای بلااستفاده بدون downtime حذف شوند."
      hot_reload_volumes:
        title: "بارگذاری مجدد کد به‌صورت زنده برای توسعه"
        p1: "از `volumes` برای mount شاخه‌های محلی داخل کانتینرها استفاده کنید. این امکان اعمال فوری تغییرات کد بدون بازسازی ایمیج‌ها را می‌دهد."
        p2: "مراقب مشکلات مجوز فایل و کش فایل‌سیستم باشید، به‌ویژه روی Windows و macOS، تا از مشکلات کارایی جلوگیری کنید."
      hot_reload_watch:
        title: "بارگذاری مجدد کد بدون volume (Compose 2.22+)"
      central_logging:
        title: "لاگ‌گیری متمرکز سرویس‌ها"
        p1: "لاگ‌های کانتینر را به سیستم‌های پایش و جمع‌آوری لاگ مثل ELK Stack، Loki، Prometheus و Fluentd هدایت کنید."
        p2: "از درایورهای لاگ داکر (`--log-driver`) برای فعال‌سازی جمع‌آوری متمرکز استفاده کنید."
        p3: "تنظیم درایورهای لاگ برای کانتینرها در Compose:"
      auto_restart:
        title: "راه‌اندازی خودکار سرویس"
        p1: "سیاست restart را در `docker-compose.yml` تنظیم کنید:"
        p2: "سیاست‌های دیگر شامل:"
        policies:
          no: "`no` — بدون راه‌اندازی مجدد خودکار (پیش‌فرض)"
          always: "`always` — همیشه کانتینر را راه‌اندازی مجدد کن"
          on_failure: "`on-failure` — فقط هنگام خطا راه‌اندازی مجدد شود (با شمارش تکرار اختیاری)"
        p3: "در محیط تولید، `unless-stopped` بهترین انتخاب برای اطمینان از تاب‌آوری سرویس است."
        p4: "این امکان بازیابی خودکار سرویس‌ها بعد از خطا یا ریبوت میزبان را فراهم می‌کند."
      profiles:
        title: "پروفایل‌های سرویس"
        p1: "اجازه اجرای فقط گروه‌های خاص سرویس‌ها را می‌دهد:"
        p2: "برای اجرای فقط پروفایل frontend:"

    debugging:
      title: "🐞 اشکال‌زدایی و پروفایل‌گیری سرویس‌ها در Docker Compose"
      exec:
        group_desc: "اجرای دستور داخل کانتینر سرویس در حال اجرا با دسترسی به کانتینر یا اجرای پردازه‌های منفرد"
        r1: "باز کردن شل داخل کانتینر سرویس `web`"
        r2: "اجرای دستور psql داخل کانتینر سرویس `db`"
      logs:
        group_desc: "مشاهده لاگ‌های سرویس برای عیب‌یابی و پایش"
        r1: "مشاهده لاگ‌های سرویس `db` به‌صورت زنده"
        r2: "نمایش 50 خط آخر لاگ‌های سرویس `api`"
        r3: "نمایش لاگ‌های یک ساعت گذشته برای سرویس `web`"
      inspect:
        group_desc: "مشاهده اطلاعات دقیق درباره کانتینر در حال اجرای یک سرویس"
        r1: "گرفتن JSON با اطلاعات دقیق کانتینر سرویس `web`"
      stats:
        group_desc: "پایش مصرف منابع کانتینرهای سرویس‌ها"
        r1: "ردیابی مصرف CPU، حافظه و منابع دیگر کانتینر سرویس `worker`"
      run:
        group_desc: "اجرای کانتینر موقت با تنظیمات سرویس، مفید برای اشکال‌زدایی"
        r1: "شروع یک کانتینر یک‌باره برای سرویس `web` با شل تعاملی"
      cp:
        group_desc: "کپی فایل‌ها بین میزبان و کانتینر"
        r1: "کپی یک فایل از کانتینر سرویس `db` به میزبان"
      tip:
        one_off: "💡 برای اشکال‌زدایی راحت‌تر تنظیمات چندسرویسی، از `docker compose run --rm` استفاده کنید تا کانتینرهای منفرد با شبکه‌ها و حجم‌های لازم اجرا شوند بدون تأثیر بر سرویس‌های اصلی."

  resources:
    title: "📚 منابع اضافی"
    ignore:
      title: "🚫 نادیده گرفتن فایل‌ها با `.dockerignore`"
      p1: "فایل‌ها و شاخه‌هایی که نباید داخل ایمیج قرار بگیرند را به `.dockerignore` اضافه کنید تا اندازه کاهش یابد و سرعت ساخت بیشتر شود:"
    aliases:
      title: "⚡ ساده‌سازی دستورات با نام‌های مستعار"
      p1: "می‌توانید برای دستورات پرکاربرد alias بسازید تا سریع‌تر اجرا شوند:"
    advice:
      title: "🧠 نکته: توصیه‌هایی برای استفاده از داکر"
      b1: "لازم نیست همه چیز را حفظ کنید — از `docker --help` یا `docker <command> --help` برای بررسی دستورات استفاده کنید."
      b2: "به طور منظم تمرین کنید و با پروژه‌های ساده آزمایش کنید."
      b3: "اندازه ایمیج‌ها را زیر نظر بگیرید و فایل‌های غیرضروری را با `.dockerignore` حذف کنید."
    links:
      title: "🌐 لینک‌های مفید"
      docs_intro: "📘 **مستندات رسمی داکر** — راهنماها و مرجع کامل درباره همه موضوعات داکر:"
      sheet_intro: "📙 **برگه تقلب داکر** — برگه تقلب رسمی کامل داکر:"
      hub_intro: "📗 **Docker Hub** — ایمیج‌ها و رجیستری‌ها:"
