git:
  meta:
    _root:
      title: "🐙 Git と GitHub CLI"
      desc: "バージョン管理、ブランチ、リモートリポジトリ、スタッシュ、タグ、そして GitHub CLI の基本および高度な Git コマンド。"

  basic:
    _root:
      title: "🔹 基本コマンド"
    git_add:
      desc: "ファイルをステージ領域に追加"
      ex1: "次のコミットのために特定のファイルをステージ"
      ex2: "現在のディレクトリ以下のすべての変更をステージ"
      ex3: "インタラクティブにファイルの一部をステージ (部分的なコミットに便利)"
    git_clone:
      desc: "リポジトリを新しいディレクトリに複製"
      ex1: "デフォルトではなく指定したブランチのみをクローン"
      ex2: "最新のコミットだけをクローンし、時間と容量を節約する浅いコピーを作成"
    git_commit:
      desc: "リポジトリに変更を記録"
      ex1: "エディタを開かずにメッセージ付きでコミット"
      ex2: "変更された追跡ファイルをすべてステージしてコミット"
      ex3: "直前のコミットを更新 (メッセージ変更や追加変更を含める)"
      ex4: "後でインタラクティブリベース中に自動的に squash される fixup コミットを作成"
    git_config:
      desc: "リポジトリまたはグローバルの設定を取得・変更"
      ex1: "グローバル Git ユーザー名を設定"
      ex2: "グローバル Git メールアドレスを設定"
      ex3: "すべての Git 設定を一覧表示 (名前、メール、エディタなど)"
    git_diff:
      desc: "コミット間、コミットと作業ツリー間の変更を表示"
      ex1: "最後のコミット以降の変更を表示 (未ステージの変更)"
      ex2: "次のコミットに含まれる変更を表示"
      ex3: "単語単位の差分を表示"
    git_grep:
      desc: "リポジトリ内のファイルを検索"
      ex1: "プロジェクト内のすべてのファイルで `functionName` を検索"
      ex2: "`TODO` を含む行を探し、行番号も表示 (コードメモの確認に便利)"
      ex3: "`login` を大文字小文字を区別せずに検索 (`Login`, `LOGIN`, `login` などを一致)"
    git_init:
      desc: "空の Git リポジトリを作成、または既存リポジトリを再初期化"
      ex1: "ディレクトリ my-project で新しいリポジトリを初期化"
      ex2: "ベアリポジトリを初期化"
    git_log:
      desc: "コミットログを表示"
      ex1: "コンパクトな1行形式で履歴を表示"
      ex2: "すべてのブランチを視覚的なコミットグラフで表示"
      ex3: "コミットのパッチとファイル変更統計を表示"
    git_reset:
      desc: "ファイルをアンステージする (作業ディレクトリの変更は保持)"
      ex1: "ステージからファイルを削除 (編集は保持)"
      ex2: "1つ前のコミットに戻り、すべての変更を削除 (元に戻せない!)"
      ex3: "最後のコミットを取り消し、変更は再コミット可能な状態で保持"
      ex4: "コミットを取り消し、変更は作業ディレクトリに未ステージで保持"
    git_show:
      desc: "さまざまなオブジェクトを表示"
      ex1: "特定のコミットの変更とメッセージを表示"
      ex2: "現在の1つ前のコミットを表示"
      ex3: "最新のコミットのファイル変更の概要を表示"
    git_status:
      desc: "作業ツリーの状態を表示"
      ex1: "短い形式で状態を表示"
      ex2: "現在のブランチとファイルの状態を表示"

  branching_merging:
    _root:
      title: "🌿 ブランチとマージ"
    git_branch:
      desc: "ブランチを作成・一覧表示・削除"
      ex1: "`new-feature` という新しいブランチを作成"
      ex2: "`old-feature` というローカルブランチを削除"
    git_checkout:
      desc: "ブランチを切り替える、または別のコミットからファイルを復元"
      ex1: "`main` ブランチに切り替え"
      ex2: "`new-branch` という新しいブランチを作成して切り替え"
    git_switch:
      desc: "ブランチを切り替える (`checkout` の簡略版)"
      ex1: "`main` ブランチに切り替え"
      ex2: "`feature-x` という新しいブランチを作成して切り替え"
      ex3: "`new-feature` という既存ブランチに切り替え"
    git_merge:
      desc: "他のブランチの変更を現在のブランチに統合"
      ex1: "`new-feature` ブランチを現在のブランチにマージ"
      ex2: "常にマージコミットを作成 (たとえ fast-forward が可能でも)"
      ex3: "競合が発生した場合にマージをキャンセルして変更を元に戻す"
    git_rebase:
      desc: "コミットを新しいベースコミットに移動または再適用"
      ex1: "自分のブランチのコミットを `main` ブランチの上に再適用"
      ex2: "直近3つのコミットをインタラクティブに編集"
      ex3: "進行中のリベースを中止して元に戻す"
      ex4: "インタラクティブリベース中に fixup/squash マーク付きコミットを自動的に squash"
    git_cherry_pick:
      desc: "別ブランチの特定のコミットを適用"
      ex1: "特定のコミット (ハッシュ指定) を現在のブランチに適用"
      ex2: "競合解決後に cherry-pick を続行"
      ex3: "`A` (除外) から `B` (含む) までのコミット範囲を適用"

  remote:
    _root:
      title: "📡 リモートリポジトリ"
    git_remote:
      desc: "リモートリポジトリ (GitHub など) へのリンクを管理"
      ex1: "リモート名とその URL を表示"
      ex2: "`origin` というリモートリポジトリを追加"
    git_pull:
      desc: "リモートブランチから変更をダウンロードして自動的にマージ"
      ex1: "リモート `main` ブランチから変更を取得し、現在のブランチにマージ"
      ex2: "マージではなく、現在のブランチをリモートの上にリベース"
    git_push:
      desc: "ローカルの変更をリモートリポジトリにアップロード"
      ex1: "ローカルの `main` ブランチをリモート `origin` にプッシュ"
    git_fetch:
      desc: "リモートから変更をダウンロード (マージはしない)"
      ex1: "リモート `origin` からすべての更新を取得するが、まだ適用しない"
      ex2: "リモートから `main` ブランチのみ取得"
      ex3: "すべてのリモートから更新を取得"
      ex4: "削除されたリモートブランチのローカル参照を整理"
      ex5: "実際にダウンロードせず、何が取得されるかを表示"
      ex6: "ローカルトラッキングブランチ (`origin/main`) を強制的に更新し、競合を上書き"

  stash_cleanup:
    _root:
      title: "📦 スタッシュとクリーンアップ"
    git_stash:
      desc: "未コミットの変更 (作業中) を一時保存"
      ex1: "変更済みファイルとステージ済みファイルを保存し、作業ディレクトリを最後のコミットに戻す"
      ex2: "最新のスタッシュを再適用 (スタッシュは保持)"
      ex3: "最新のスタッシュを再適用して削除"
      ex4: "すべてのスタッシュを一覧表示"
      ex5: "新しいブランチを作成し、最新のスタッシュを適用"
    git_clean:
      desc: "Git に含まれない未追跡ファイルを完全に削除"
      ex1: "現在のディレクトリの未追跡ファイルを削除"
      ex2: "未追跡のファイルとフォルダを削除"
      ex3: "削除対象をプレビュー (安全なドライラン)"

  tags:
    _root:
      title: "🏷️ タグ"
    git_tag:
      desc: "特定の履歴ポイント (リリースなど) をマークするタグを作成・一覧表示・削除"
      ex1: "`v1.0` という注釈付きタグをメッセージ付きで作成 (リリースに適する完全 Git オブジェクト)"
      ex2: "ローカルの `v1.0` タグを削除 (リモートには影響なし)"
    git_push:
      desc: "ローカルからリモートリポジトリにコミット、ブランチ、タグをアップロード"
      ex1: "すべてのローカルタグをリモートにプッシュ (複数バージョンのタグ後に便利)"
      ex2: "特定のタグ (例: `v1.0`) をリモートにプッシュ"
      ex3: "リモートタグ `v1.0` を削除 (コロン構文に注意)"

  conflicts:
    _root:
      title: "🛠️ コンフリクト解決"
    git_mergetool:
      desc: "マージコンフリクトを解決するためのビジュアルツールを開く"
      ex1: "Meld などの特定ツールを使ってコンフリクトを修正"
    git_rerere:
      desc: "過去に解決したマージコンフリクトの方法を Git に記憶させる"
      ex1: "過去のコンフリクト解決を自動的に再利用可能にする"
      ex2: "保存されたコンフリクト解決を持つファイルを表示"
      ex3: "将来の再利用用に Git が保存した変更を表示"

  advanced:
    _root:
      title: "⚙️ 高度なコマンド"
    git_bisect:
      desc: "バイナリサーチでバグを導入したコミットを特定"
      ex1: "既知の良いコミットと悪いコミットの間でバイナリサーチを開始"
      ex2: "現在のコミットを「bad」(バグあり) とマーク"
      ex3: "バグが存在しない既知の「good」コミットをマーク"
    git_blame:
      desc: "ファイル内の各行を最後に変更した人物を表示 (リビジョンと著者付き)"
      ex1: "ファイル内の各行の著者とコミット情報を表示"
      ex2: "10行目から20行目のみの blame 情報を表示"
      ex3: "行変更と一緒に著者のメールアドレスを表示"
    git_reflog:
      desc: "ブランチ移動や HEAD のリファレンスログ (reflog) を表示・管理"
      ex1: "`main` ブランチが1週間前にどこを指していたか確認"
      ex2: "30日以上前のエントリが削除可能かをプレビュー (変更なし)"
      ex3: "特定の reflog エントリを削除 (リカバリに影響する可能性あり注意)"
    git_submodule:
      desc: "サブモジュール (リポジトリ内のリポジトリ) を追加・初期化・更新・確認"
      ex1: "外部リポジトリを指定したパスにサブモジュールとして追加"
      ex2: "リポジトリ内のすべてのサブモジュールを初期化・ダウンロード"
      ex3: "各サブモジュール内で `git pull` を実行し最新コミットに更新"
      ex4: "`.gitmodules` の変更後にサブモジュールの URL を同期"
      ex5: "サブモジュールをリモートブランチの最新コミットに更新"
    git_archive:
      desc: "特定のコミットやブランチからファイルのアーカイブ (zip, tar など) を作成"
      ex1: "現在の HEAD からプロジェクトファイルの ZIP アーカイブを作成"
      ex2: "現在の HEAD から圧縮 `.tar.gz` アーカイブを作成"
      ex3: "現在のプロジェクトの圧縮 `.tar.gz` アーカイブを作成し、アーカイブ内のすべてのファイルを `project/` フォルダに配置"
    git_gc:
      desc: "不要なファイルを削除し、リポジトリを最適化"
      ex1: "徹底的なクリーンアップと最適化を実行 (時間がかかるが効果的)"
      ex2: "すべての到達不能オブジェクトを即削除 (不明な場合は危険)"
    git_shortlog:
      desc: "著者とそのコミットの簡易要約"
      ex1: "著者とメールアドレスの一覧を表示 (誰がどれだけ貢献したか分析可能)"
      ex2: "各著者が行ったコミット数を表示し、数でソート"
      ex3: "上記に名前とメールアドレスも含める — 詳細な活動追跡に便利"
    git_revert:
      desc: "履歴を書き換えずに以前のコミットの変更を取り消す新しいコミットを作成"
      ex1: "最後のコミットを取り消し、その変更を逆にする新しいコミットを作成"
      ex2: "ハッシュ指定の特定コミットを取り消し、それを逆にする新しいコミットを安全に追加"

  gh:
    _root:
      title: "🐙 GitHub CLI"
      note: "`gh` を使うとターミナルから GitHub を操作できます。"
    gh_auth_login:
      desc: "GitHub ホストで認証し、CLI コマンドがアカウントと連携できるようにする"
      ex1: "個人アクセストークンをファイル (`mytoken.txt`) に保存して認証"
      ex2: "GitHub Enterprise サーバー (github.com 以外) に認証"
    gh_repo_clone:
      desc: "GitHub リポジトリをローカル環境にクローン"
      ex1: "`user` 所有のリポジトリ `repo` を `repo` というフォルダにクローン"
      ex2: "最新のコミットだけをダウンロードし、高速で小さなクローンを作成"
      ex3: "カスタムフォルダ `workspace/cli` にクローン"
    gh_issue_list:
      desc: "GitHub リポジトリの Issue を一覧表示 (さまざまな条件でフィルタ可能)"
      ex1: "自分に割り当てられた Issue を表示"
      ex2: "状態 (open/closed) を問わず Issue を表示"
      ex3: "\"error\" に一致する、担当者なし、作成日昇順の Issue を表示"
    gh_pr_create:
      desc: "CLI 経由で GitHub にプルリクエストを作成"
      ex1: "指定したタイトルでプルリクエストを作成"
      ex2: "プルリクエストを \"Roadmap\" という GitHub プロジェクトにリンク"
      ex3: "フォーク `monalisa` の `feature` ブランチから `develop` ブランチへ PR を作成"
    gh_repo_create:
      desc: "CLI から新しい GitHub リポジトリを作成"
      ex1: "GitHub に `my-project` という新しいリポジトリを作成 (インタラクティブ入力あり)"
      ex2: "公開リポジトリを作成してローカルにクローン"
      ex3: "現在のフォルダからプライベートリポジトリを作成し、`upstream` というリモートを追加"

  aliases:
    _root:
      title: "💡 Git エイリアス (便利なショートカット)"
      intro: "よく使う Git コマンドのエイリアスを設定して作業を高速化:"
  
  pro:
    _root:
      title: "🚀 プロ向け高度な Git コマンド"
    git_filter_repo:
      desc: "Git 履歴を書き換える強力で高速なツール。ファイルや著者情報、パスを削除/変更可能。従来の git filter-branch を置き換え、より安全で高速。"
      ex1: "`git filter-branch` の性能問題なしに機密ファイルやディレクトリを履歴から効率的に削除 (注意して使用)"
      ex2: "リポジトリ全体の履歴で文字列やパターンを一括置換 (例: 資格情報の削除)"
      ex3: "サブディレクトリの履歴を新しいリポジトリに抽出し、コミットメタデータを保持"
    git_worktree:
      desc: "1つのリポジトリに複数の作業ディレクトリを紐づけ、異なるブランチで同時作業を可能に (クローン不要)"
      ex1: "同じリポジトリに追加の作業ツリーを作成し、並行してブランチをチェックアウト"
      ex2: "すべてのアクティブな worktree、パス、ブランチを一覧"
      ex3: "不要になった worktree を削除し、安全にディレクトリをクリーンアップ"
    git_replace:
      desc: "既存オブジェクトを置き換える一時参照を作成し、履歴を破壊せずにローカルでテスト・操作可能"
      ex1: "ローカルリポジトリで一時的にコミットを差し替え、履歴を書き換えずにテストやパッチ適用"
      ex2: "アクティブな置換参照をすべて表示"
      ex3: "特定の置換参照を削除して動作を元に戻す"
    git_stash_adv:
      desc: "未コミットの変更をスタックに一時保存し、未完了作業をコミットせずにコンテキストを切り替え可能"
      ex1: "インタラクティブに保存する差分を選択し、細かく制御してスタッシュ"
      ex2: "識別しやすいカスタムメッセージ付きでスタッシュを作成"
      ex3: "スタッシュ一覧から特定のスタッシュを適用 (削除はしない)"
    git_rebase_adv:
      desc: "別のベースコミット上にコミットを再適用し、履歴をきれいに線形に整える。インタラクティブ編集も可能"
      ex1: "fixup/squash マーク付きコミットを自動的に整理・結合するインタラクティブリベースを開始"
      ex2: "fixup/squash コミットを自動的に整理・結合し、プッシュ前に履歴をクリーン化"
      ex3: "インタラクティブリベースで自動的に squash される fixup コミットを作成"
      ex4: "リベース時に特定のコミットと結合される squash コミットを作成"
    git_bisect_pro:
      desc: "バイナリサーチでバグを導入したコミットを効率的に特定。連続するコミットをテストし、原因を絞り込み"
      ex1: "テストスクリプトを各コミットで実行し、自動でバグを導入したコミットを特定"
      ex2: "テストスクリプトによる自動二分探索でバグ特定を大幅に高速化"
      ex3: "二分探索プロセスを可視化する GUI ツールを開く"
      ex4: "bisect モードを終了し、元の HEAD に戻る"
    git_commit_pro:
      desc: "修正、署名、fixup、メッセージカスタマイズなどの詳細オプション付きでコミットを記録し、履歴品質を維持"
      ex1: "GPG キーで署名付きコミットを作成し、真正性と著者を暗号的に検証可能"
      ex2: "GPG キーでコミットを署名し、完全性と著者確認を保証"
      ex3: "コミット署名に使用する GPG キーをグローバル設定"
      ex4: "コミットの GPG 署名情報を検証して表示"
    git_reflog_pro:
      desc: "HEAD やブランチの更新ログを保持し、失われたコミットの復元やローカル履歴の把握に不可欠"
      ex1: "リフログからブランチを以前の状態にリセットし、変更を復元または取り消し"
      ex2: "すべてのリフログエントリを即時削除し、履歴をクリーンアップ (注意)"

  pro_tips:
    _root:
      title: "🧰 プロ向けワークフローのヒントと自動化"
    columns:
      topic: "トピック"
      commands_example: "コマンド / 例"
      explanation_tips: "解説 & プロのヒント"
    aggressive_cleanup:
      topic: "積極的なリポジトリクリーンアップ"
      desc: "ガベージコレクションを深く実行し、到達不能オブジェクトを即削除して最適化。メンテナンス時に使用"
    parallel_worktrees:
      topic: "並行ブランチ作業ツリー"
      desc: "複数の作業ツリーを保持して同時に機能開発を行い、クローンのオーバーヘッドを回避"
    linear_history:
      topic: "クリーンで線形な履歴"
      desc: "プッシュ前にインタラクティブリベースと autosquash を行い、履歴を読みやすく維持"
    secure_commits:
      topic: "セキュアなコミット"
      desc: "コミットに GPG 署名を付与し、共有リポジトリでの信頼性を高める (多くの企業環境で必須)"
    automated_bisect:
      topic: "自動バイセクト"
      desc: "バグ探索を自動化。テストスクリプトを各候補コミットで実行し、原因を迅速特定"
    conflict_cache:
      topic: "コンフリクト解決キャッシュ"
      desc: "過去の解決方法を再利用して、リベースやマージ時の繰り返しコンフリクト解決を高速化"
    shared_aliases_hooks:
      topic: "共有エイリアスとフック"
      desc: "共通の Git エイリアスやコミットフックを共有リポジトリや CI パイプラインに保存し、チーム標準を強制して生産性向上"

  resources:
    _root:
      title: "追加リソース"
    tip:
      title: "🧠 **ヒント**"
      desc: "すべてを暗記しようとせず、`--help` を使い、調べ、定期的に練習しましょう:"
    links:
      title: "🌐 便利なリンク"
      official_docs: "📘 **公式 Git ドキュメント** — すべての Git コマンドの詳細マニュアル:"
      learn_branching: "📙 **Learn Git Branching** — ブランチ概念を習得するためのインタラクティブなビジュアルチュートリアル:"
      pro_git_book: "📕 **Pro Git 書籍** (無料, Scott Chacon & Ben Straub 著):"
      official_cheatsheet: "📗 **Git チートシート** (公式簡易リファレンス):"
