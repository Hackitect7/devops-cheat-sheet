docker:
  meta:
    _root:
      title: "🐳 Docker"
      desc: "📘 Docker はアプリケーションを分離されたコンテナ内で実行するためのプラットフォームです。このチートシートには、イメージ、コンテナ、ネットワーク、ボリューム、および Docker Compose と Swarm を扱うためのコマンドが含まれています。"

  basic:
    _root:
      title: "📦 基本コマンド"
    docker:
      desc: "サブコマンドを実行し、コンテナ、イメージ、ネットワーク、ボリュームを管理するためのメイン CLI コマンド"
    docker_version:
      desc: "インストール済みの Docker バージョン (クライアントとサーバー) を表示。インストール確認に便利"
      ex1: "Docker クライアント API バージョンのみを表示"
      ex2: "Docker サーバー (エンジン) バージョンのみを表示"
      ex3: "JSON 形式で完全なバージョン情報を出力"
    docker_system_info:
      desc: "Docker システム情報を表示: コンテナ数、イメージ数、リソースなど"
      ex1: "Docker のデータ: バージョン、ネットワーク、コンテナ数、イメージ数を表示"
      ex2: "JSON 形式で出力 — 自動化に便利"
      ex3: "CPU 数と総メモリを表示"
      ex4: "Docker が使用しているストレージドライバを表示"
    docker_image_pull:
      desc: "Docker Hub または他のレジストリからイメージをダウンロード。コンテナはイメージなしでは実行不可"
      ex1: "最新の Ubuntu イメージをダウンロード"
      ex2: "Alpine Linux ベースの軽量 Nginx イメージをダウンロード"
      ex3: "Redis イメージのバージョン 7 をダウンロード"
    docker_container_run:
      desc: "イメージから新しいコンテナを作成して実行"
      ex1: "Ubuntu をインタラクティブな Bash ターミナルで実行"
      ex2: "Nginx をデタッチ (バックグラウンド) モードで実行"
      ex3: "Nginx を実行し、コンテナのポート 80 をホストのポート 8080 にバインド"
    docker_container_ls:
      desc: "実行中のコンテナを一覧表示"
      ex1: "実行中のコンテナのみを表示"
      ex2: "停止中を含めてすべてのコンテナを表示"
      ex3: "コンテナ名のみを出力"
    docker_container_start:
      desc: "停止中のコンテナを起動"
      ex1: "コンテナを名前で起動"
      ex2: "すべてのコンテナを起動"
      ex3: "コンテナを起動しインタラクティブターミナルに接続"
    docker_container_stop:
      desc: "実行中のコンテナを停止"
      ex1: "コンテナを名前で停止"
      ex2: "すべての実行中コンテナを停止"
      ex3: "コンテナを停止し、終了まで 5 秒待機"
    docker_container_restart:
      desc: "コンテナを再起動"
      ex1: "特定のコンテナを再起動"
      ex2: "すべての実行中コンテナを再起動"
      ex3: "10 秒待機してからコンテナを再起動"
    docker_container_rm:
      desc: "コンテナを削除"
      ex1: "特定の停止中コンテナを削除"
      ex2: "停止中コンテナをすべて削除"
      ex3: "実行中のコンテナを強制削除"
    docker_image_ls:
      desc: "ダウンロード済みイメージを一覧表示"
      ex1: "ホスト上のすべてのイメージを表示"
      ex2: "中間レイヤーを含むすべてのイメージを表示"
      ex3: "イメージ名とタグのみを出力"
    docker_image_rm:
      desc: "ローカルストレージからイメージを削除"
      ex1: "リポジトリ `test1` のタグ `latest` を削除"
      ex2: "イメージを ID で削除"
      ex3: "すべてのイメージを削除 (注意！)"

  container:
    _root:
      title: "🔁 コンテナ管理"
    docker_container_exec:
      desc: "実行中のコンテナ内でコマンドを実行"
      ex1: "`container` 内でインタラクティブ bash シェルを起動"
      ex2: "コンテナ内 `/app` ディレクトリで `ls` を実行"
      ex3: "デタッチモード (待たずに終了) でコマンドを実行"
    docker_container_logs:
      desc: "コンテナログを表示"
      ex1: "`container` のすべてのログを表示"
      ex2: "コンテナログをリアルタイムで追跡"
      ex3: "直近 50 行のログを表示"
    docker_inspect:
      desc: "コンテナまたはイメージの詳細 JSON 情報を取得"
      ex1: "`container` の詳細を表示"
      ex2: "コンテナの IP アドレスを表示"
    docker_container_stats:
      desc: "コンテナのリソース使用状況をリアルタイムで表示"
      ex1: "すべてのコンテナの CPU, メモリ, ネットワーク, ディスク使用量を表示"
      ex2: "特定のコンテナのみの統計を表示"
      ex3: "一度だけスナップショットを表示して終了"
    docker_container_rename:
      desc: "コンテナ名を変更"
      ex1: "`old_name` を `new_name` に変更"
    docker_container_cp:
      desc: "コンテナとホスト間でファイルをコピー"
      ex1: "コンテナからホストの現在のディレクトリへファイルをコピー"
      ex2: "ホストからコンテナへファイルをコピー"
      ex3: "コンテナのログをストリーミングし \"ERROR\" をフィルタして保存せず出力"
    docker_container_top:
      desc: "コンテナ内で実行中のプロセスを表示"
      ex1: "`container` のプロセスを表示"
    docker_container_pause:
      desc: "コンテナ内のすべてのプロセスを一時停止"
      ex1: "`container` を一時停止"
    docker_container_unpause:
      desc: "一時停止中のコンテナを再開"
      ex1: "`container` を再開"
    docker_container_update:
      desc: "再起動せずにコンテナ設定を更新"
      ex1: "コンテナのメモリ使用量を 500 MB に制限"

  images:
    _root:
      title: "🧱 イメージと Dockerfile"
    docker_buildx_build:
      desc: "Dockerfile からイメージをビルド"
      ex1: "カレントディレクトリから `my_image` としてビルド"
      ex2: "バージョン `1.0` のタグ付きイメージをビルド"
      ex3: "キャッシュを使わずクリーンビルド"
    docker_container_commit:
      desc: "コンテナの現在の状態からイメージを作成"
      ex1: "`container` から `my_img:v1` を作成"
      ex2: "コミットメッセージ付きでイメージを作成"
      ex3: "作成者を指定してイメージを作成"
    docker_image_tag:
      desc: "イメージにタグを追加または変更"
      ex1: "レジストリ `myrepo` にプッシュするためタグを追加"
      ex2: "イメージ `1.0` に `stable` タグを作成"
      ex3: "ローカルイメージに `backup` タグを追加"
    docker_image_push:
      desc: "イメージを Docker Hub または他のレジストリにプッシュ"
      ex1: "`myrepo` にタグ `latest` をプッシュ"
      ex2: "タグ `1.0` をプッシュ"
      ex3: "デフォルトタグ `latest` でプッシュ"
    docker_login:
      desc: "Docker Hub または他のレジストリに認証"
      ex1: "Docker Hub にユーザー名とパスワードでログイン"
      ex2: "プライベートレジストリにログイン"
      ex3: "ユーザー名とパスワードでログイン (非推奨)"
    docker_logout:
      desc: "Docker Hub または他のレジストリからログアウト"
      ex1: "Docker Hub からログアウト"
      ex2: "プライベートレジストリからログアウト"
    healthcheck:
      desc: "コンテナの正常性を自動チェックする Dockerfile 命令"
      ex1: "30 秒ごとにサービス可用性を確認するヘルスチェックを追加"
      ex2: "実行中コンテナのヘルスチェックステータスを確認"

  networks:
    _root:
      title: "🔌 ネットワークとボリューム"
    docker_network_ls:
      desc: "すべての Docker ネットワークを一覧表示"
      ex1: "作成済みのネットワークをすべて表示"
      ex2: "`bridge` ドライバを使用するネットワークのみ表示"
      ex3: "ネットワーク名のみを表示"
    docker_network_create:
      desc: "新しい Docker ネットワークを作成"
      ex1: "`my_net` という名前でデフォルト設定のネットワークを作成"
      ex2: "`bridge` ドライバでネットワークを作成"
      ex3: "指定したサブネットでネットワークを作成"
    docker_network_connect:
      desc: "コンテナをネットワークに接続"
      ex1: "`container` を `my_net` に接続"
      ex2: "エイリアス `db_net` で接続"
    docker_network_disconnect:
      desc: "コンテナをネットワークから切断"
      ex1: "`container` を `my_net` から切断"
    docker_volume_ls:
      desc: "すべての Docker ボリュームを一覧表示"
      ex1: "すべての Docker ボリュームを表示"
      ex2: "未使用のボリュームを表示"
    docker_volume_create:
      desc: "新しい Docker ボリュームを作成"
      ex1: "`my_vol` という名前のボリュームを作成"
      ex2: "tmpfs を使用して一時ボリュームを作成"
    docker_volume_inspect:
      desc: "ボリュームの詳細情報を表示"
      ex1: "`my_vol` の詳細を JSON 形式で表示"
    docker_volume_rm:
      desc: "ボリュームを削除"
      ex1: "`my_vol` を削除"
      ex2: "未使用のボリュームをすべて削除"

  plugins:
    _root:
      title: "🧩 Docker プラグイン"
    docker_plugin_ls:
      desc: "インストール済みの Docker プラグインを一覧表示"
      ex1: "すべてのプラグインとその状態を表示"
    docker_plugin_install:
      desc: "レジストリから Docker プラグインをインストール"
      ex1: "SSHFS ボリュームプラグインをインストール"
      ex2: "Weave ネットワークプラグインをインストール"
    docker_plugin_disable:
      desc: "インストール済みプラグインを無効化"
      ex1: "SSHFS プラグインを無効化"
    docker_plugin_enable:
      desc: "以前無効化されたプラグインを有効化"
      ex1: "SSHFS プラグインを有効化"
    docker_plugin_rm:
      desc: "Docker プラグインを削除"
      ex1: "SSHFS プラグインを削除"

  compose:
    _root:
      title: 📋 Docker Compose
    docker_compose_up:
      desc: "`docker-compose.yml` に定義されたコンテナを起動"
      ex1: "カレントディレクトリのすべてのサービスを対話モードで起動"
      ex2: "サービスをデタッチモード (バックグラウンド) で起動"
      ex3: "サービスを起動する前にイメージをビルド"
    docker_compose_down:
      desc: "`up` で作成されたコンテナ、ネットワーク、ボリュームを停止して削除"
      ex1: "すべてのサービスを停止し関連リソースを削除"
      ex2: "Compose が作成したボリュームも削除"
      ex3: "Compose が作成したイメージも削除"
    docker_compose_logs:
      desc: "全サービスまたは特定サービスのログを表示"
      ex1: "全サービスのログを表示"
      ex2: "ログをリアルタイムで追跡"
      ex3: "`web` サービスのログのみ表示"
    docker_compose_exec:
      desc: "実行中のサービスコンテナ内でコマンドを実行"
      ex1: "`web` サービスコンテナ内で対話型 bash シェルに入る"
      ex2: "データベースコンテナ内で `ls` を実行"
      ex3: "`worker` コンテナ内でデタッチモードでコマンドを実行"
    docker_compose_build:
      desc: "サービスイメージをビルドまたは再ビルド"
      ex1: "`docker-compose.yml` で定義されたすべてのイメージをビルド"
      ex2: "`web` サービスイメージのみをビルド"
      ex3: "キャッシュを使わずにイメージをビルド"
    docker_compose_ps:
      desc: "すべてのサービスとコンテナの状態を表示"
      ex1: "停止中も含めてすべてのコンテナを表示"
      ex2: "サービス名のみを表示"
    docker_compose_pull:
      desc: "レジストリからサービスイメージをダウンロード/更新"
      ex1: "`web` サービスのイメージのみ取得"
      ex2: "一部のイメージが失敗しても継続"
    docker_compose_restart:
      desc: "すべてまたは指定したサービスを再起動"
      ex1: "`db` サービスのみ再起動"
      ex2: "10 秒のタイムアウトで再起動"
    docker_compose_config:
      desc: "最終的な Compose 設定を YAML 形式で表示"
      ex1: "構成内のすべてのサービスを一覧表示"
      ex2: "構成内のすべてのボリュームを一覧表示"
    docker_compose_start:
      desc: "停止中のサービスをコンテナを再作成せずに起動"
      ex1: "`web` サービスを起動"
      ex2: "複数サービスを同時に起動"
    docker_compose_stop:
      desc: "サービスをコンテナを削除せずに停止"
      ex1: "`web` サービスを停止"
      ex2: "5 秒のタイムアウトでサービスを停止"

  export_import:
    _root:
      title: 📤 エクスポートとインポート
    docker_image_save:
      desc: "1つ以上の Docker イメージを tar アーカイブに保存し、後でインポートや転送可能にする"
      ex1: "Docker イメージを tar アーカイブファイルに保存"
      ex2: "別の方法でイメージをファイルに保存"
      ex3: "特定の Redis イメージをファイルに保存"
    docker_image_load:
      desc: "以前保存した tar アーカイブから Docker イメージをロード"
      ex1: "tar アーカイブファイルからイメージをロード"
      ex2: "パラメータでファイルを指定してイメージをロード"
      ex3: "進行表示なしでイメージをロード"
    docker_container_export:
      desc: "コンテナのファイルシステムを履歴やメタデータなしで tar アーカイブとしてエクスポート"
      ex1: "コンテナのファイルシステムをアーカイブにエクスポート"
      ex2: "名前でコンテナをエクスポート"
      ex3: "`-o` フラグを使って ID でコンテナをエクスポート"
    docker_image_import:
      desc: "ファイルシステムの tar アーカイブから新しいイメージを作成"
      ex1: "アーカイブファイルを新しい Docker イメージとしてインポート"
      ex2: "URL から直接イメージをインポート"
      ex3: "標準入力からインポート"

  cleanup:
    _root:
      title: 🧹 クリーンアップと診断
    docker_system_df:
      desc: "Docker ディスク使用量を表示: ボリューム、イメージ、コンテナ、ビルドキャッシュ"
      ex1: "各イメージ、コンテナ、ボリュームの詳細出力"
      ex2: "JSON 形式で情報を出力"
    docker_system_prune:
      desc: "未使用の Docker データを削除: 停止中コンテナ、未使用ネットワーク、不要イメージ、ビルドキャッシュ"
      ex1: "中間レイヤーを含む未使用イメージを削除"
      ex2: "未使用ボリュームを他のリソースと共に削除"
    docker_image_prune:
      desc: "未使用の Docker イメージを削除 (ダングリングレイヤー含む)"
      ex1: "未使用イメージをすべて削除"
      ex2: "24時間以上前のイメージを削除"
    docker_container_prune:
      desc: "停止中のコンテナをフィルタで削除、未指定ならすべて削除"
      ex1: "24時間以上前の停止中コンテナを削除"
      ex2: "確認なしで削除"

  swarm:
    _root:
      title: 🐝 Docker Swarm
    docker_swarm_init:
      desc: "現在のノードで新しい Docker Swarm クラスターを初期化"
      ex1: "IP アドレスを指定してクラスターを初期化"
      ex2: "リッスンポートを指定して初期化"
    docker_service_create:
      desc: "Swarm クラスターで新しいサービスを作成"
      ex1: "Swarm 内で Nginx サービスを作成"
      ex2: "3 レプリカのサービスを作成"
      ex3: "ポートマッピング付きでサービスを作成"
    docker_stack_deploy:
      desc: "Compose ファイルに基づいて Swarm クラスターにスタックをデプロイ"
      ex1: "Compose ファイルからスタックをデプロイ"
      ex2: "レジストリ認証転送を有効にしてデプロイ"
      ex3: "別の Compose ファイルでスタックをデプロイ"
    docker_stack_rm:
      desc: "Swarm クラスターからスタックを削除"
      ex1: "`mystack` スタックを削除"
      ex2: "すべてのスタックを削除 (非推奨)"
      ex3: "スタックを削除し Swarm を離脱"

  advanced_docker:
    _root:
      title: "💼 高度な Docker 利用"

    prof:
      title: "🚀 プロ向け Docker コマンド"
      docker_buildx:
        desc: "`docker build` を置き換える高度なイメージビルドツール。マルチプラットフォーム、キャッシュ、並列ビルド、さまざまな形式へのエクスポートをサポート。CI/CD やクロスプラットフォーム開発に有用"
        ex1: "マルチプラットフォーム (ARM と x86 を同時) のイメージをビルド"
        ex2: "イメージをビルドしてローカル Docker Engine キャッシュにロード"
        ex3: "マルチプラットフォームイメージをビルドしてレジストリにプッシュ"
      docker_context:
        desc: "リモートや複数環境で作業するための Docker コンテキストを管理。ローカルとリモート間を素早く切り替え可能"
        ex1: "リモートホスト接続用コンテキストを作成"
        ex2: "リモートコンテキストに切り替え"
        ex3: "利用可能なコンテキストとアクティブなものを一覧表示"
      docker_system_events:
        desc: "Docker イベントをリアルタイムで監視。イベントタイプ (例: コンテナ開始) でフィルタ可能。監視や自動化に便利"
        ex1: "コンテナ開始イベントのみ表示"
        ex2: "直近1時間から10分前までのイベントを表示"
        ex3: "ネットワーク関連イベントのみ表示"
        ex4: "`nginx` イメージ関連イベントを表示"
      docker_container_update:
        desc: "再起動せずに実行中コンテナのリソース制限や設定を変更"
        ex1: "2 CPU と 1 GB RAM に制限"
        ex2: "自動再起動ポリシーを `unless-stopped` に設定"
        ex3: "プロセス数を 200 に制限"
      docker_container_diff:
        desc: "コンテナのファイルシステム変更を元イメージと比較。デバッグや監査に有用"
        ex1: "コンテナ内のすべての変更を表示"
        ex2: "追加されたファイル (`A` — Added) のみ表示"
      docker_image_history:
        desc: "イメージレイヤーの履歴を表示: ビルドコマンド、サイズ、作成時間。最適化や監査に有用"
        ex1: "イメージのレイヤー履歴を表示"
        ex2: "省略せずに完全なビルドコマンドを表示"
        ex3: "ビルドコマンドとレイヤーサイズのみを出力"

    practices:
      title: "🛠 Docker 活用ベストプラクティスと自動化"
      minimize_image_size:
        title: "イメージサイズを最小化"
        p1: "`alpine` や `scratch` のような軽量ベースイメージを使用"
        p2: "レイヤーをまとめるには `--squash` を使用 (実験的機能要有効化)"
        p3: "一時ファイルやキャッシュを単一レイヤーで削除:"
      minimize_layers:
        title: "レイヤー数を最小化"
        p1: "`RUN` をまとめて最終イメージのレイヤー数を削減:"
      optimize_build:
        title: "Dockerfile ビルドを最適化"
        p1: "マルチステージビルドを利用し、最終イメージには必要なファイルのみ残す"
        p2: "依存関係を先にコピー・インストールし、その後コードをコピー — レイヤーキャッシュが効率化しビルドが速くなる"
      secrets_and_configs:
        title: "シークレットと設定を分離"
        p1: "イメージ内に `.env`、API キー、秘密証明書を保存しない"
        intro: "設定に使用する:"
        items:
          secret: "`docker secret` (Swarm 内)"
          env: "環境変数 (`-e VAR=value` または `.env`)"
          volumes: "外部ボリュームで設定管理"
      buildkit_secrets:
        title: "ビルド時シークレット (BuildKit)"
        p1: "ビルド中に安全にシークレットを渡すには `--secret` フラグを使用:"
        p2: "Dockerfile 内でシークレットは `/run/secrets/mysecret` に配置:"
        note: "🛡 シークレットはイメージレイヤーに保存されない"
      rootless:
        title: "Rootless Docker"
        p1: "非 root 権限で Docker を実行するとセキュリティが向上し、ホスト侵害リスクを低減"
        steps_intro: "有効化するには:"
        check_intro: "確認:"
        warning: "⚠ 一部機能 (ポート <1024 の転送など) は利用不可"
      scan:
        title: "イメージの脆弱性をスキャン"
        p1: "組み込みツールを使用:"
        p2: "または新しい CLI を使用:"
        p3: "ベースイメージや依存関係の脆弱性検出に役立つ"
      resource_limits:
        title: "リソース使用を監視"
        p1: "メモリ、CPU、プロセス数でコンテナを制限:"
        p2: "リソース過剰使用を防ぐ"
        p3: "I/O も制限可能:"
        p4: "ディスクサブシステムを過負荷にしないように有用"
      cleanup:
        title: "自動クリーンアップ"
        p1: "未使用イメージ、コンテナ、ボリューム、ネットワークを定期的に削除:"
        warning: "⚠ 注意: このコマンドはすべての未使用リソースを削除する"
        p2: "選択的にクリーンアップするには:"
      cicd:
        title: "CI/CD 連携"
        p1: "GitHub Actions、GitLab CI、Jenkins パイプラインにビルド・テスト・デプロイを組み込む"
        example_intro: "GitHub Actions ステップ例:"
      logging:
        title: "ログと監視"
        p1: "ログドライバ (`--log-driver`) を ELK、Loki、Splunk などの集中管理システムに接続"
        p2: "Prometheus + cAdvisor でコンテナメトリクスを収集"
      production:
        title: "本番環境デプロイ"
        p1: "`docker-compose.override.yml` で開発と本番の設定を分離"
        ha_intro: "高可用性とスケーリングには:"
        items:
          swarm: "Docker Swarm"
          k8s: "Kubernetes"

    debugging:
      title: "🐞 Docker コンテナのデバッグとプロファイリング"
      exec:
        group_desc: "実行中のコンテナ内でコマンドを実行し、対話型アクセスやコンテナの隔離環境でプロセスを実行可能にする"
        r1: "実行中のコンテナ内で対話型ターミナル (bash) を開始"
        r2: "最小限のシェルを開始 (bash が利用できない場合)"
        r3: "対話モードなしでコマンドを実行"
      logs:
        group_desc: "指定されたコンテナのログを表示し、動作に関する出力やイベントを診断・監視"
        r1: "直近100行のログをリアルタイムで表示"
        r2: "コンテナのすべての利用可能なログを表示"
        r3: "直近1時間のログを表示"
      inspect:
        group_desc: "コンテナ、イメージ、ネットワークなどの Docker オブジェクトの詳細情報を JSON 形式で出力 (構成と状態を含む)"
        r1: "コンテナの完全な JSON 情報を取得"
        r2: "ホスト上でコンテナのメインプロセスの PID を取得"
        r3: "コンテナの IP アドレスを表示"
      nsenter:
        group_desc: "Linux ユーティリティで、別のプロセス (ここではコンテナ) の名前空間に入る。`strace` と併用してコンテナ内のシステムコールを追跡可能"
        r1: "コンテナの名前空間に入り、プロセス1のシステムコールを追跡"
        r2: "コンテナの名前空間内で bash シェルを開く"
        r3: "コンテナ内のオープンポートを表示"
      tcpdump:
        group_desc: "ネットワークトラフィックをキャプチャ・解析するコンソールツール。コンテナ内でネットワーク問題の診断、パケット解析、接続監視に使用"
        r1: "コンテナ内でネットワークトラフィックをキャプチャ・解析"
        r2: "ポート80のトラフィックのみをキャプチャ"
        r3: "トラフィックをファイルに保存して後で解析"
      stats:
        group_desc: "コンテナの現在のリソース使用状況 (CPU、メモリ、ネットワーク、ディスク) をリアルタイムで表示"
        r1: "コンテナの CPU、メモリ、ネットワーク、ディスク使用量をリアルタイム表示"
        r2: "すべてのコンテナの統計を表示"
        r3: "統計を1回だけ出力して終了"
      top:
        group_desc: "コンテナ内で実行中のプロセス一覧を表示。Linux の `ps` に似ており、コンテナの動作分析に利用"
        r1: "コンテナ内で実行中のプロセスを表示"
        r2: "`ps aux` 形式などの代替出力を使用"
        r3: "PID とコマンドのみを表示"
      diff:
        group_desc: "コンテナのファイルシステム変更をベースイメージと比較し、追加・変更・削除されたファイルを表示"
        r1: "コンテナのファイルシステム変更をベースイメージと比較して表示"
        r2: "追加されたファイル (`A` — Added) のみ表示"
        r3: "変更されたファイル (`C` — Changed) のみ表示"
      cp:
        group_desc: "コンテナとホスト間でファイルやディレクトリをコピーし、データ交換やバックアップを可能にする"
        r1: "コンテナからホストへファイルをコピー"
        r2: "ホストからコンテナへファイルをコピー"
        r3: "ログファイルをコピーして \"ERROR\" 行のみをフィルタし、ディスクに保存せず表示"
      advanced_note: "💡 高度なデバッグには `nsenter`、`strace`、`tcpdump`、`gdb` などの低レベルツールを利用できます。"

  compose_adv:
    _root:
      title: "💼 高度な Docker Compose 利用"
    prof:
      title: "🚀 プロ向け Docker Compose コマンド"
      up:
        group_desc: "`docker-compose.yml` に定義されたサービスを起動し、バックグラウンド実行も可能"
        r1: "`web` と `db` サービスのみをデタッチモードで実行"
        r2: "サービス起動前にイメージを再ビルド"
        r3: "現在の Compose ファイルに定義されていないコンテナを削除"
      build:
        group_desc: "Compose ファイルで定義されたサービスイメージをキャッシュ制御や並列処理でビルド"
        r1: "キャッシュを使わず完全に再ビルド"
        r2: "全サービスを並列ビルドして高速化"
        r3: "`web` サービスのみのイメージをビルド"
      pull:
        group_desc: "すべてまたは指定サービスの最新イメージをレジストリから取得"
        r1: "全サービスのイメージを取得"
        r2: "`db` サービスのみのイメージを取得"
        r3: "取得中のエラーを無視して続行"
      restart:
        group_desc: "コンテナを再作成せずにサービスを再起動"
        r1: "現在のプロジェクトの全サービスを再起動"
        r2: "`worker` サービスのみ再起動"
        r3: "複数サービスを同時に再起動"
      exec:
        group_desc: "実行中のサービスコンテナ内でコマンドを実行 (対話モード可能)"
        r1: "`db` サービスコンテナ内で psql を実行"
        r2: "`web` コンテナ内でシェルを開く"
        r3: "`api` サービスコンテナから curl リクエストを実行"
      config:
        group_desc: "すべてのファイルと環境変数を考慮した最終 Compose 設定を出力"
        r1: "統合された構成を YAML 形式で表示"
        r2: "すべてのサービスを一覧表示"
        r3: "サービスで使用される環境変数をすべて表示"
      watch:
        group_desc: "ソースファイル変更時にサービスを自動再起動。開発に便利"
        r1: "ファイルを監視し、変更時にサービスを再起動"
      events:
        group_desc: "Compose イベント (サービス開始、停止、更新) をストリーム表示"
        r1: "イベントを JSON 形式で受信"
      rm:
        group_desc: "停止中のサービスコンテナを削除"
        r1: "`web` と `db` サービスのコンテナを削除"
      pause:
        group_desc: "サービスを一時停止"
        r1: "`api` サービスを一時停止"
      unpause:
        group_desc: "一時停止中のサービスを再開"
        r1: "`api` サービスを再開"
      create:
        group_desc: "コンテナを起動せずに作成"
        r1: "`web` と `db` のコンテナを作成するが起動しない"
      images:
        group_desc: "サービスで使用されているイメージを表示"
        r1: "全サービスのイメージを表示"
      top:
        group_desc: "サービスコンテナ内で実行中のプロセスを表示"
        r1: "`web` サービスのコンテナ内プロセスを表示"

    practices:
      title: "🛠 Docker Compose の便利な実践と自動化"
      env_separation:
        title: "環境の分離"
        p1: "開発・ステージング・本番環境ごとに `docker-compose.override.yml` を分けることで、設定の衝突を避けられる"
        p2: "`-f` フラグで複数の構成ファイルを組み合わせ可能:"
        p3: "環境変数管理には `.env.dev`、`.env.prod` などの異なる `.env` ファイルを使用"
      secrets:
        title: "シークレットの安全な保存"
        p1: "パスワードやトークンなどの機密データを Compose ファイルに直接含めない。代わりに:"
        items:
          env: "環境変数用の `.env` ファイル (暗号化されず公開リポジトリにはコミット禁止)"
          swarm_secret: "Docker Swarm の `docker secret` と `docker config`"
          volumes: "シークレットを含む設定ファイルの外部ボリューム"
          external_mgr: "外部シークレット管理システム (例: HashiCorp Vault, AWS Secrets Manager)"
      startup_order:
        title: "`depends_on` と `healthcheck` による起動順序"
        p1: "依存サービスの準備完了を待つには:"
      min_downtime:
        title: "更新時のダウンタイム最小化"
        p1: "サービスを更新する前に実行:"
        p2: "`-d` はバックグラウンド実行、`--remove-orphans` は未定義コンテナを削除"
        p3: "古いコンテナを完全に停止・削除する場合:"
        p4: "これにより、新しいイメージを読み込み未使用コンテナを除去しつつダウンタイムを防止"
      hot_reload_volumes:
        title: "開発用ホットリロード (ボリューム)"
        p1: "ローカルディレクトリを `volumes` でコンテナにマウントし、イメージ再ビルドなしでコード変更を即時反映"
        p2: "Windows や macOS ではファイル権限やキャッシュによるパフォーマンス問題に注意"
      hot_reload_watch:
        title: "ボリュームを使わないホットリロード (Compose 2.22+)"
      central_logging:
        title: "サービスの集中ログ管理"
        p1: "ELK Stack、Loki、Prometheus、Fluentd などにログをリダイレクト"
        p2: "Docker ログドライバ (`--log-driver`) を利用して集中収集"
        p3: "Compose でログドライバを設定:"
      auto_restart:
        title: "自動サービス再起動"
        p1: "`docker-compose.yml` に再起動ポリシーを設定:"
        p2: "その他のポリシー:"
        policies:
          no: "`no` — 自動再起動なし (デフォルト)"
          always: "`always` — 常に再起動"
          on_failure: "`on-failure` — エラー時のみ再起動 (リトライ回数指定可)"
        p3: "本番では `unless-stopped` が推奨"
        p4: "障害やホスト再起動後も自動回復可能"
      profiles:
        title: "サービスプロファイル"
        p1: "特定グループのサービスのみを実行可能:"
        p2: "フロントエンドプロファイルのみ実行:"

    debugging:
      title: "🐞 Docker Compose サービスのデバッグとプロファイリング"
      exec:
        group_desc: "実行中のサービスコンテナ内でコマンドを実行し、アクセスやプロセス操作を可能にする"
        r1: "`web` サービスコンテナ内でシェルを開く"
        r2: "`db` サービスコンテナ内で psql を実行"
      logs:
        group_desc: "サービスログを表示し診断・監視に利用"
        r1: "`db` サービスのログをリアルタイム表示"
        r2: "`api` サービスの直近50行のログを表示"
        r3: "`web` サービスの直近1時間のログを表示"
      inspect:
        group_desc: "サービスを実行中のコンテナの詳細情報を表示"
        r1: "`web` サービスコンテナの詳細 JSON を取得"
      stats:
        group_desc: "サービスコンテナのリソース使用を監視"
        r1: "`worker` サービスの CPU・メモリ使用を追跡"
      run:
        group_desc: "一時的なサービスコンテナを実行。デバッグに便利"
        r1: "`web` サービスで対話型シェルを起動"
      cp:
        group_desc: "ホストとコンテナ間でファイルをコピー"
        r1: "`db` サービスコンテナからホストへファイルをコピー"
      tip:
        one_off: "💡 複数サービス構成のデバッグには `docker compose run --rm` を使用し、必要なネットワークやボリューム付きで個別コンテナを起動可能 (本サービスに影響なし)。"

  resources:
    title: "📚 追加リソース"
    ignore:
      title: "🚫 `.dockerignore` でファイルを除外"
      p1: "イメージに含めないファイルやフォルダを `.dockerignore` に追加し、サイズ削減とビルド高速化を実現:"
    aliases:
      title: "⚡ エイリアスでコマンドを簡略化"
      p1: "よく使うコマンドにはエイリアスを作成し、迅速に実行:"
    advice:
      title: "🧠 ヒント: Docker 活用アドバイス"
      b1: "すべてを暗記する必要はなし — `docker --help` または `docker <command> --help` を活用"
      b2: "日常的に練習し、簡単なプロジェクトで試す"
      b3: "イメージサイズに注意し、不要ファイルは `.dockerignore` で除外"
    links:
      title: "🌐 便利なリンク"
      docs_intro: "📘 **公式 Docker ドキュメント** — Docker の包括的ガイドとリファレンス:"
      sheet_intro: "📙 **Docker チートシート** — 公式完全版チートシート:"
      hub_intro: "📗 **Docker Hub** — イメージとレジストリ:"
