docker:
  meta:
    _root:
      title: "üê≥ Docker"
      desc: "Docker ist eine Plattform zum Ausf√ºhren von Anwendungen in isolierten Containern. Dieses Spickzettel enth√§lt Befehle f√ºr die Arbeit mit Images, Containern, Netzwerken, Volumes sowie Docker Compose und Swarm."

  basic:
    _root:
      title: "üì¶ Grundlegende Befehle"
    docker:
      desc: "Der Hauptbefehl der Docker-CLI zum Ausf√ºhren von Unterbefehlen und Verwalten von Containern, Images, Netzwerken und Volumes"
    docker_version:
      desc: "Installierte Docker-Version (Client und Server) anzeigen. N√ºtzlich zur √úberpr√ºfung der Installation"
      ex1: "Nur die Docker-Client-API-Version anzeigen"
      ex2: "Nur die Docker-Server- (Engine-)Version anzeigen"
      ex3: "Vollst√§ndige Versionsinformationen im JSON-Format ausgeben"
    docker_system_info:
      desc: "Allgemeine Docker-Systeminformationen anzeigen: Anzahl der Container, Images, Ressourcen"
      ex1: "Docker-Daten anzeigen: Versionen, Netzwerke, Anzahl der Container und Images"
      ex2: "Informationen im JSON-Format ausgeben ‚Äî n√ºtzlich f√ºr Automatisierung"
      ex3: "Anzahl der CPUs und Gesamtspeicher anzeigen"
      ex4: "Den von Docker verwendeten Storage-Treiber anzeigen"
    docker_image_pull:
      desc: "Ein Image von Docker Hub oder einer anderen Registry herunterladen. Container k√∂nnen ohne Images nicht ausgef√ºhrt werden"
      ex1: "Das neueste verf√ºgbare Ubuntu-Image herunterladen"
      ex2: "Das schlanke Nginx-Image basierend auf Alpine Linux herunterladen"
      ex3: "Redis-Image in Version 7 herunterladen"
    docker_container_run:
      desc: "Einen neuen Container aus einem Image erstellen und starten"
      ex1: "Ubuntu mit einem interaktiven Bash-Terminal ausf√ºhren"
      ex2: "Nginx im Detached-Modus (Hintergrund) starten"
      ex3: "Nginx ausf√ºhren und Container-Port 80 an Host-Port 8080 binden"
    docker_container_ls:
      desc: "Laufende Container auflisten"
      ex1: "Nur laufende Container anzeigen"
      ex2: "Alle Container einschlie√ülich gestoppter anzeigen"
      ex3: "Nur Containernamen ausgeben"
    docker_container_start:
      desc: "Einen oder mehrere gestoppte Container starten"
      ex1: "Einen Container nach Namen starten"
      ex2: "Alle Container starten"
      ex3: "Einen Container starten und interaktives Terminal anh√§ngen"
    docker_container_stop:
      desc: "Einen laufenden Container stoppen"
      ex1: "Einen Container nach Namen stoppen"
      ex2: "Alle laufenden Container stoppen"
      ex3: "Einen Container mit 5 Sekunden Zeit zum Beenden stoppen"
    docker_container_restart:
      desc: "Einen Container neu starten"
      ex1: "Einen bestimmten Container neu starten"
      ex2: "Alle laufenden Container neu starten"
      ex3: "Einen Container mit 10 Sekunden Verz√∂gerung neu starten"
    docker_container_rm:
      desc: "Einen Container entfernen"
      ex1: "Einen bestimmten gestoppten Container entfernen"
      ex2: "Alle gestoppten Container entfernen"
      ex3: "Einen laufenden Container erzwingen und entfernen"
    docker_image_ls:
      desc: "Heruntergeladene Images auflisten"
      ex1: "Alle Images auf dem Host anzeigen"
      ex2: "Alle Images einschlie√ülich Zwischenebenen anzeigen"
      ex3: "Nur Imagenamen und Tags ausgeben"
    docker_image_rm:
      desc: "Ein oder mehrere Images aus dem lokalen Speicher entfernen"
      ex1: "Image mit Tag `latest` aus Repository `test1` entfernen"
      ex2: "Ein Image nach seiner ID entfernen"
      ex3: "Alle Images entfernen (mit Vorsicht verwenden!)"

  container:
    _root:
      title: "üîÅ Containerverwaltung"
    docker_container_exec:
      desc: "Einen Befehl in einem laufenden Container ausf√ºhren"
      ex1: "Eine interaktive Bash-Shell im Container `container` starten"
      ex2: "`ls`-Befehl im Verzeichnis `/app` innerhalb des Containers ausf√ºhren"
      ex3: "Einen Befehl im Container im Detached-Modus ausf√ºhren (ohne Warten)"
    docker_container_logs:
      desc: "Container-Logs anzeigen"
      ex1: "Alle Logs des Containers `container` anzeigen"
      ex2: "Container-Logs in Echtzeit verfolgen"
      ex3: "Die letzten 50 Zeilen der Logs anzeigen"
    docker_inspect:
      desc: "Detaillierte JSON-Informationen zu einem Container oder Image abrufen"
      ex1: "Details des Containers `container` anzeigen"
      ex2: "Die IP-Adresse des Containers anzeigen"
    docker_container_stats:
      desc: "Echtzeit-Statistiken zur Ressourcennutzung von Containern anzeigen"
      ex1: "CPU-, Speicher-, Netzwerk- und Festplattennutzung f√ºr alle Container anzeigen"
      ex2: "Nur Statistiken f√ºr einen bestimmten Container anzeigen"
      ex3: "Einmalige Momentaufnahme der Statistiken anzeigen und beenden"
    docker_container_rename:
      desc: "Einen Container umbenennen"
      ex1: "Container von `old_name` in `new_name` umbenennen"
    docker_container_cp:
      desc: "Dateien zwischen einem Container und dem Host kopieren"
      ex1: "Eine Datei vom Container in das aktuelle Host-Verzeichnis kopieren"
      ex2: "Eine Datei vom Host in den Container kopieren"
      ex3: 'Eine Logdatei aus dem Container streamen und Zeilen mit "ERROR" filtern, ohne auf Platte zu speichern'
    docker_container_top:
      desc: "Laufende Prozesse in einem Container anzeigen"
      ex1: "Prozesse des Containers `container` anzeigen"
    docker_container_pause:
      desc: "Alle Prozesse in einem Container anhalten"
      ex1: "Den Container `container` anhalten"
    docker_container_unpause:
      desc: "Einen angehaltenen Container fortsetzen"
      ex1: "Den Container `container` fortsetzen"
    docker_container_update:
      desc: "Container-Einstellungen ohne Neustart aktualisieren"
      ex1: "Den Speicherverbrauch des Containers auf 500 MB begrenzen"

  images:
    _root:
      title: "üß± Images und Dockerfile"
    docker_buildx_build:
      desc: "Ein Docker-Image aus einem Dockerfile erstellen"
      ex1: "Ein Image mit Tag `my_image` aus dem aktuellen Verzeichnis erstellen"
      ex2: "Ein Image mit Tag `1.0` erstellen"
      ex3: "Ein Image ohne Cache f√ºr einen sauberen Build erstellen"
    docker_container_commit:
      desc: "Ein Image aus dem aktuellen Zustand eines Containers erstellen"
      ex1: "Image `my_img` mit Tag `v1` aus Container `container` erstellen"
      ex2: "Ein Image mit Commit-Nachricht erstellen"
      ex3: "Ein Image mit Angabe des Autors erstellen"
    docker_image_tag:
      desc: "Einen Image-Tag hinzuf√ºgen oder √§ndern"
      ex1: "Einen Tag zum Push in die Registry `myrepo` hinzuf√ºgen"
      ex2: "Tag `stable` f√ºr Image mit Tag `1.0` erstellen"
      ex3: "Einen `backup`-Tag zu einem lokalen Image hinzuf√ºgen"
    docker_image_push:
      desc: "Ein Image zu Docker Hub oder einer anderen Registry hochladen"
      ex1: "Image mit Tag `latest` ins Repository `myrepo` hochladen"
      ex2: "Image mit Tag `1.0` hochladen"
      ex3: "Image mit Standard-Tag `latest` hochladen"
    docker_login:
      desc: "Bei Docker Hub oder einer anderen Registry authentifizieren"
      ex1: "Benutzername und Passwort interaktiv f√ºr Docker Hub eingeben"
      ex2: "Bei einer privaten Registry anmelden"
      ex3: "Login mit Benutzername und Passwort (nicht empfohlen)"
    docker_logout:
      desc: "Von Docker Hub oder einer anderen Registry abmelden"
      ex1: "Von Docker Hub abmelden"
      ex2: "Von privater Registry abmelden"
    healthcheck:
      desc: "Dockerfile-Anweisung zur automatischen √úberpr√ºfung des Container-Gesundheitsstatus"
      ex1: "Healthcheck hinzuf√ºgen, um die Dienstverf√ºgbarkeit alle 30 Sekunden zu pr√ºfen"
      ex2: "Den Healthcheck-Status eines laufenden Containers pr√ºfen"

  networks:
    _root:
      title: "üîå Netzwerke und Volumes"
    docker_network_ls:
      desc: "Alle Docker-Netzwerke auflisten"
      ex1: "Alle erstellten Docker-Netzwerke anzeigen"
      ex2: "Nur Netzwerke mit dem Treiber `bridge` anzeigen"
      ex3: "Nur Netzwerknamen anzeigen"
    docker_network_create:
      desc: "Ein neues Docker-Netzwerk erstellen"
      ex1: "Ein Netzwerk `my_net` mit Standardeinstellungen erstellen"
      ex2: "Ein Netzwerk mit dem Treiber `bridge` erstellen"
      ex3: "Ein Netzwerk mit einem angegebenen Subnetz erstellen"
    docker_network_connect:
      desc: "Einen Container mit einem Netzwerk verbinden"
      ex1: "Container `container` mit Netzwerk `my_net` verbinden"
      ex2: "Mit Alias `db_net` verbinden"
    docker_network_disconnect:
      desc: "Einen Container von einem Netzwerk trennen"
      ex1: "Container `container` vom Netzwerk `my_net` trennen"
    docker_volume_ls:
      desc: "Alle Docker-Volumes auflisten"
      ex1: "Alle Docker-Volumes anzeigen"
      ex2: "Nicht verwendete Volumes anzeigen"
    docker_volume_create:
      desc: "Ein neues Docker-Volume erstellen"
      ex1: "Ein Volume mit Namen `my_vol` erstellen"
      ex2: "Ein tempor√§res Volume mit tmpfs erstellen"
    docker_volume_inspect:
      desc: "Detaillierte Informationen √ºber ein Volume anzeigen"
      ex1: "Details des Volumes `my_vol` im JSON-Format anzeigen"
    docker_volume_rm:
      desc: "Ein oder mehrere Volumes entfernen"
      ex1: "Volume `my_vol` entfernen"
      ex2: "Alle ungenutzten Volumes entfernen"

  plugins:
    _root:
      title: "üß© Docker-Plugins"
    docker_plugin_ls:
      desc: "Installierte Docker-Plugins auflisten"
      ex1: "Alle Plugins und deren Status anzeigen"
    docker_plugin_install:
      desc: "Ein Docker-Plugin aus einer Registry installieren"
      ex1: "Das SSHFS-Volume-Plugin installieren"
      ex2: "Das Weave-Netzwerk-Plugin installieren"
    docker_plugin_disable:
      desc: "Ein installiertes Plugin deaktivieren"
      ex1: "Das SSHFS-Plugin deaktivieren"
    docker_plugin_enable:
      desc: "Ein zuvor deaktiviertes Plugin aktivieren"
      ex1: "Das SSHFS-Plugin aktivieren"
    docker_plugin_rm:
      desc: "Ein Docker-Plugin entfernen"
      ex1: "Das SSHFS-Plugin entfernen"

  compose:
    _root:
      title: üìã Docker Compose
    docker_compose_up:
      desc: Container starten, die in `docker-compose.yml` definiert sind
      ex1: "Alle Dienste im aktuellen Verzeichnis im interaktiven Modus starten"
      ex2: "Dienste im Detached-Modus (Hintergrund) starten"
      ex3: "Images vor dem Start der Dienste bauen"
    docker_compose_down:
      desc: Container, Netzwerke und Volumes stoppen und entfernen, die durch `up` erstellt wurden
      ex1: "Alle laufenden Dienste stoppen und zugeh√∂rige Ressourcen entfernen"
      ex2: "Zus√§tzlich Volumes entfernen, die von Compose erstellt wurden"
      ex3: "Zus√§tzlich Images entfernen, die von Compose erstellt wurden"
    docker_compose_logs:
      desc: Logs aller oder bestimmter Dienste anzeigen
      ex1: "Logs aller Dienste anzeigen"
      ex2: "Logs in Echtzeit verfolgen"
      ex3: "Nur Logs des Dienstes `web` anzeigen"
    docker_compose_exec:
      desc: Einen Befehl in einem laufenden Service-Container ausf√ºhren
      ex1: "Eine interaktive Bash-Shell im `web`-Service-Container √∂ffnen"
      ex2: "`ls`-Befehl im Datenbank-Container ausf√ºhren"
      ex3: "Einen Befehl im `worker`-Container im Detached-Modus ausf√ºhren"
    docker_compose_build:
      desc: Service-Images bauen oder neu bauen
      ex1: "Alle Images aus `docker-compose.yml` bauen"
      ex2: "Nur das `web`-Service-Image bauen"
      ex3: "Images ohne Cache bauen"
    docker_compose_ps:
      desc: Status aller Dienste und Container anzeigen
      ex1: "Alle Container einschlie√ülich gestoppter anzeigen"
      ex2: "Nur die Servicenamen anzeigen"
    docker_compose_pull:
      desc: Service-Images aus Registry herunterladen/aktualisieren
      ex1: "Nur Image f√ºr den Dienst `web` herunterladen"
      ex2: "Trotz Fehlern bei einigen Images fortsetzen"
    docker_compose_restart:
      desc: Alle oder bestimmte Dienste neu starten
      ex1: "Nur den Dienst `db` neu starten"
      ex2: "Dienste mit 10-Sekunden-Timeout neu starten"
    docker_compose_config:
      desc: "Die endg√ºltige Compose-Konfiguration im YAML-Format anzeigen"
      ex1: "Alle Dienste in der Konfiguration auflisten"
      ex2: "Alle Volumes in der Konfiguration auflisten"
    docker_compose_start:
      desc: "Gestoppte Dienste starten, ohne Container neu zu erstellen"
      ex1: "Den Dienst `web` starten"
      ex2: "Mehrere Dienste auf einmal starten"
    docker_compose_stop:
      desc: "Dienste stoppen, ohne Container zu entfernen"
      ex1: "Den Dienst `web` stoppen"
      ex2: "Dienste mit 5-Sekunden-Timeout stoppen"

  export_import:
    _root:
      title: üì§ Export und Import
    docker_image_save:
      desc: "Ein oder mehrere Docker-Images in ein TAR-Archiv speichern f√ºr sp√§teren Import oder Transfer"
      ex1: "Ein Docker-Image in eine TAR-Datei speichern"
      ex2: "Alternative Methode, ein Image in eine Datei zu speichern"
      ex3: "Ein bestimmtes Redis-Image in eine Datei speichern"
    docker_image_load:
      desc: Docker-Images aus einem zuvor gespeicherten TAR-Archiv laden
      ex1: "Ein Docker-Image aus einer TAR-Datei laden"
      ex2: "Ein Image mit Parameter zur Datei laden"
      ex3: "Ein Image ohne Fortschrittsanzeige laden"
    docker_container_export:
      desc: "Dateisystem eines Containers als TAR-Archiv exportieren, ohne Image-Historie oder Metadaten"
      ex1: "Container-Dateisystem in ein Archiv exportieren"
      ex2: "Container nach Name exportieren"
      ex3: "Container nach ID mit dem Flag `-o` exportieren"
    docker_image_import:
      desc: "Ein neues Image aus einem TAR-Archiv eines Dateisystems erstellen"
      ex1: "Archivdatei als neues Docker-Image importieren"
      ex2: "Image direkt von einer URL importieren"
      ex3: "Von Standardeingabe importieren"

  cleanup:
    _root:
      title: üßπ Aufr√§umen und Diagnose
    docker_system_df:
      desc: "Docker-Speichernutzung anzeigen: Volumes, Images, Container und Build-Cache"
      ex1: "Detaillierte Ausgabe mit Infos zu jedem Image, Container und Volume"
      ex2: "Informationen im JSON-Format ausgeben"
    docker_system_prune:
      desc: "Alle ungenutzten Docker-Daten entfernen: gestoppte Container, ungenutzte Netzwerke, h√§ngende Images und Build-Cache"
      ex1: "Unbenutzte Images einschlie√ülich Zwischenschichten entfernen"
      ex2: "Unbenutzte Volumes zusammen mit anderen Ressourcen entfernen"
    docker_image_prune:
      desc: "Unbenutzte Docker-Images einschlie√ülich h√§ngender Schichten entfernen"
      ex1: "Alle unbenutzten Images einschlie√ülich h√§ngender entfernen"
      ex2: "Images entfernen, die √§lter als 24 Stunden sind"
    docker_container_prune:
      desc: "Gestoppte Container entfernen, die Filtern entsprechen, oder alle, falls keine angegeben"
      ex1: "Gestoppte Container entfernen, die √§lter als 24 Stunden sind"
      ex2: "Ohne Best√§tigung entfernen"

  swarm:
    _root:
      title: üêù Docker Swarm
    docker_swarm_init:
      desc: "Einen neuen Docker-Swarm-Cluster auf dem aktuellen Knoten initialisieren"
      ex1: "Cluster initialisieren und IP-Adresse angeben"
      ex2: "Mit angegebenem Listen-Port initialisieren"
    docker_service_create:
      desc: "Einen neuen Dienst im Swarm-Cluster erstellen"
      ex1: "Einen Nginx-Dienst im Swarm erstellen"
      ex2: "Einen Dienst mit 3 Replikaten erstellen"
      ex3: "Einen Dienst mit Port-Mapping erstellen"
    docker_stack_deploy:
      desc: "Einen Stack von Diensten im Swarm-Cluster anhand einer Compose-Datei bereitstellen"
      ex1: "Stack aus Compose-Datei bereitstellen"
      ex2: "Mit Weitergabe der Registry-Authentifizierung bereitstellen"
      ex3: "Eine alternative Compose-Datei f√ºr den Stack verwenden"
    docker_stack_rm:
      desc: "Einen oder mehrere Stacks aus dem Swarm-Cluster entfernen"
      ex1: "Den Stack `mystack` entfernen"
      ex2: "Alle Stacks entfernen (nicht empfohlen)"
      ex3: "Stack entfernen und Swarm verlassen"

  advanced_docker:
    _root:
      title: "üíº Erweiterte Docker-Nutzung"

    prof:
      title: "üöÄ Professionelle Docker-Befehle"
      docker_buildx:
        desc: "Erweitertes Image-Build-Tool als Ersatz f√ºr `docker build`. Unterst√ºtzt Multi-Plattform, Caching, parallele Builds und Export in verschiedene Formate. N√ºtzlich f√ºr CI/CD und plattform√ºbergreifende Entwicklung"
        ex1: "Ein Multi-Plattform-Image bauen (ARM und x86 gleichzeitig)"
        ex2: "Ein Image bauen und in den lokalen Docker-Engine-Cache laden"
        ex3: "Ein Multi-Plattform-Image bauen und in eine Registry pushen"
      docker_context:
        desc: "Docker-Kontexte f√ºr Remote- oder Multi-Umgebungen verwalten. Erm√∂glicht schnelles Umschalten zwischen lokaler und entfernter Docker-Engine"
        ex1: "Einen Kontext zum Verbinden mit einem Remote-Docker-Host erstellen"
        ex2: "Zum Remote-Kontext wechseln"
        ex3: "Verf√ºgbare Kontexte und den aktiven auflisten"
      docker_system_events:
        desc: "Docker-Ereignisse in Echtzeit √ºberwachen, gefiltert nach Ereignistyp (z. B. Container-Start). N√ºtzlich f√ºr Monitoring und Automatisierung"
        ex1: "Nur Container-Start-Ereignisse anzeigen"
        ex2: "Ereignisse der letzten Stunde bis vor 10 Minuten anzeigen"
        ex3: "Nur netzwerkbezogene Ereignisse anzeigen"
        ex4: "Ereignisse zum Image `nginx` anzeigen"
      docker_container_update:
        desc: "Ressourcenlimits und Einstellungen eines laufenden Containers √§ndern, ohne ihn neu zu starten"
        ex1: "Limit auf 2 CPUs und 1 GB RAM setzen"
        ex2: "Auto-Restart-Policy auf `unless-stopped` setzen"
        ex3: "Die Anzahl der Prozesse auf 200 begrenzen"
      docker_container_diff:
        desc: "Dateisystem√§nderungen in einem Container im Vergleich zu seinem urspr√ºnglichen Image anzeigen. N√ºtzlich f√ºr Debugging und Audits"
        ex1: "Alle Dateisystem√§nderungen im Container anzeigen"
        ex2: "Nur hinzugef√ºgte Dateien anzeigen (`A` ‚Äî Added)"
      docker_image_history:
        desc: "Verlauf der Image-Layer anzeigen: Build-Befehle, Gr√∂√üe jeder Schicht und Erstellungszeit. N√ºtzlich f√ºr Optimierung und Audits"
        ex1: "Layer-Historie eines Images anzeigen"
        ex2: "Vollst√§ndige Build-Befehle ohne K√ºrzung anzeigen"
        ex3: "Nur Build-Befehle und Layer-Gr√∂√üen ausgeben"

    practices:
      title: "üõ† N√ºtzliche Docker-Praktiken und Automatisierung"
      minimize_image_size:
        title: "Image-Gr√∂√üe minimieren"
        p1: "Basis-Images wie `alpine` oder `scratch` f√ºr minimale Gr√∂√üe verwenden."
        p2: "Um Layer zusammenzuf√ºhren, kann `--squash` beim Build genutzt werden (erfordert aktivierte experimentelle Features)."
        p3: "Auch tempor√§re Dateien und Caches in einer einzigen Schicht entfernen:"
      minimize_layers:
        title: "Anzahl der Layer minimieren"
        p1: "Befehle in einem `RUN` kombinieren, um die Anzahl der Layer und die finale Image-Gr√∂√üe zu reduzieren:"
      optimize_build:
        title: "Dockerfile-Build optimieren"
        p1: "Multi-Stage-Builds verwenden, sodass nur notwendige Dateien im finalen Image verbleiben."
        p2: "Zuerst Abh√§ngigkeiten kopieren und installieren, dann Code ‚Äî verbessert Layer-Caching und beschleunigt Rebuilds."
      secrets_and_configs:
        title: "Secrets und Konfigurationen trennen"
        p1: "Keine `.env`-Dateien, API-Keys oder privaten Zertifikate im Image speichern."
        intro: "F√ºr Konfiguration verwenden:"
        items:
          secret: "`docker secret` (in Swarm)"
          env: "Umgebungsvariablen (`-e VAR=Wert` oder `.env`)"
          volumes: "Externe Volumes f√ºr Konfigurationen"
      buildkit_secrets:
        title: "Build-Zeit-Secrets (BuildKit)"
        p1: "F√ºr sicheres √úbergeben von Secrets w√§hrend des Builds das Flag `--secret` verwenden:"
        p2: "Im Dockerfile ist das Secret unter `/run/secrets/mysecret` verf√ºgbar:"
        note: "üõ° Dadurch werden Secrets nicht in Image-Layern gespeichert."
      rootless:
        title: "Rootless Docker"
        p1: "Docker ohne Root-Rechte auszuf√ºhren verbessert die Sicherheit und reduziert das Risiko f√ºr den Host."
        steps_intro: "Zum Aktivieren:"
        check_intro: "√úberpr√ºfen:"
        warning: "‚ö† Einige Features (z. B. Portweiterleitung <1024) sind nicht verf√ºgbar."
      scan:
        title: "Images auf Schwachstellen scannen"
        p1: "Eingebaute Tools verwenden:"
        p2: "Oder das neue CLI:"
        p3: "Hilft, Schwachstellen in Basis-Images und Abh√§ngigkeiten zu erkennen."
      resource_limits:
        title: "Ressourcennutzung √ºberwachen"
        p1: "Container nach Speicher, CPU und Prozessanzahl begrenzen:"
        p2: "Dies verhindert √ºberm√§√üigen Ressourcenverbrauch."
        p3: "Man kann auch I/O begrenzen:"
        p4: "N√ºtzlich f√ºr Container, die das Subsystem nicht √ºberlasten sollen."
      cleanup:
        title: "Automatisches Aufr√§umen"
        p1: "Regelm√§√üig unbenutzte Images, Container, Volumes und Netzwerke entfernen:"
        warning: "‚ö† Vorsicht: Dieser Befehl l√∂scht alle unbenutzten Ressourcen."
        p2: "F√ºr selektives Aufr√§umen verwenden:"
      cicd:
        title: "CI/CD-Integration"
        p1: "Build, Tests und Deployment in GitHub Actions, GitLab CI, Jenkins-Pipelines einbetten."
        example_intro: "Beispiel GitHub Actions Schritt:"
      logging:
        title: "Logging und Monitoring"
        p1: "Logging-Driver (`--log-driver`) an zentrale Systeme wie ELK, Loki, Splunk anh√§ngen."
        p2: "Prometheus + cAdvisor f√ºr Container-Metriken verwenden."
      production:
        title: "Produktivbereitstellung"
        p1: "Getrennte Konfigurationen f√ºr Entwicklung und Produktion mit `docker-compose.override.yml`."
        ha_intro: "F√ºr Hochverf√ºgbarkeit und Skalierung verwenden:"
        items:
          swarm: "Docker Swarm"
          k8s: "Kubernetes"

    debugging:
      title: "üêû Debugging und Profiling von Docker-Containern"
      exec:
        group_desc: "F√ºhrt einen Befehl in einem laufenden Container aus und erm√∂glicht interaktiven Zugriff oder das Ausf√ºhren von Prozessen in der isolierten Umgebung des Containers"
        r1: "Ein interaktives Terminal (bash) in einem laufenden Container starten"
        r2: "Eine minimale Shell im Container starten (falls bash nicht verf√ºgbar ist)"
        r3: "Einen Befehl im Container ohne interaktiven Modus ausf√ºhren"
      logs:
        group_desc: "Zeigt Logs des angegebenen Containers an, um Ausgaben und Ereignisse zur Diagnose und √úberwachung einzusehen"
        r1: "Die letzten 100 Zeilen der Logs mit Live-Streaming anzeigen"
        r2: "Alle verf√ºgbaren Logs des Containers anzeigen"
        r3: "Logs der letzten Stunde anzeigen"
      inspect:
        group_desc: "Gibt detaillierte Informationen zu einem Docker-Objekt (Container, Image, Netzwerk usw.) im JSON-Format aus, einschlie√ülich Konfiguration und Status"
        r1: "Vollst√§ndige JSON-Infos zum Container abrufen"
        r2: "Die PID des Hauptprozesses des Containers auf dem Host abrufen"
        r3: "Die IP-Adresse des Containers anzeigen"
      nsenter:
        group_desc: "Linux-Tool zum Betreten der Namespaces eines anderen Prozesses (hier des Containers). Wird mit `strace` verwendet, um Systemaufrufe im Container zum Debugging nachzuverfolgen"
        r1: "Container-Namespaces betreten und Systemaufrufe des Prozesses 1 nachverfolgen"
        r2: "Eine Bash-Shell innerhalb der Container-Namespaces √∂ffnen"
        r3: "Offene Ports im Container anzeigen"
      tcpdump:
        group_desc: "Konsolentool zum Erfassen und Analysieren von Netzwerkverkehr. Wird im Container verwendet, um Netzwerkprobleme zu diagnostizieren, Pakete zu analysieren und Verbindungen zu √ºberwachen"
        r1: "Netzwerkverkehr im Container erfassen und analysieren"
        r2: "Nur Verkehr auf Port 80 erfassen"
        r3: "Verkehr in Datei speichern zur sp√§teren Analyse"
      stats:
        group_desc: "Zeigt aktuelle Ressourcennutzungsmetriken (CPU, Speicher, Netzwerk, Festplatte) f√ºr einen oder mehrere Container in Echtzeit"
        r1: "Echtzeit-Auslastung von CPU, Speicher, Netzwerk und Festplatte des Containers anzeigen"
        r2: "Statistiken f√ºr alle Container anzeigen"
        r3: "Statistiken einmalig ausgeben und beenden"
      top:
        group_desc: "Zeigt die Liste der im Container laufenden Prozesse, √§hnlich wie `ps` in Linux, um Container-Aktivit√§t zu analysieren"
        r1: "Prozesse im Container anzeigen"
        r2: "Alternatives Ausgabeformat wie `ps aux` verwenden"
        r3: "Nur PID und Befehl der Prozesse anzeigen"
      diff:
        group_desc: "Zeigt √Ñnderungen im Dateisystem des Containers im Vergleich zum Basis-Image, einschlie√ülich hinzugef√ºgter, ge√§nderter oder gel√∂schter Dateien"
        r1: "Dateisystem√§nderungen im Container im Vergleich zum Basis-Image anzeigen"
        r2: "Nur hinzugef√ºgte Dateien anzeigen (`A` ‚Äî Added)"
        r3: "Nur ge√§nderte Dateien anzeigen (`C` ‚Äî Changed)"
      cp:
        group_desc: "Kopiert Dateien und Verzeichnisse zwischen Container und Host, erm√∂glicht Datenaustausch und Backups"
        r1: "Datei vom Container zum Host kopieren"
        r2: "Datei vom Host in den Container kopieren"
        r3: "Logdatei kopieren und Fehlerzeilen filtern, ohne sie auf Platte zu speichern"
      advanced_note: "üí° F√ºr erweitertes Debugging k√∂nnen `nsenter`, `strace`, `tcpdump`, `gdb` und andere Low-Level-Tools verwendet werden."

  compose_adv:
    _root:
      title: "üíº Erweiterte Nutzung von Docker Compose"
    prof:
      title: "üöÄ Professionelle Docker-Compose-Befehle"
      up:
        group_desc: "Startet und verwaltet den Lebenszyklus bestimmter Dienste aus der docker-compose.yml-Datei mit der M√∂glichkeit, im Hintergrund zu laufen"
        r1: "Nur die Dienste `web` und `db` im Detached-Modus starten"
        r2: "Images vor dem Start der Dienste neu bauen"
        r3: "Container entfernen, die nicht in der aktuellen Compose-Datei definiert sind"
      build:
        group_desc: "Images f√ºr Dienste gem√§√ü Compose-Datei bauen mit Cache-Kontrolle und Parallelit√§t"
        r1: "Images vollst√§ndig neu bauen, ohne Cache zu verwenden"
        r2: "Alle Dienste gleichzeitig bauen, um den Prozess zu beschleunigen"
        r3: "Nur das Image des Dienstes `web` bauen"
      pull:
        group_desc: "Neueste Versionen von Images aus der Registry f√ºr alle oder bestimmte Dienste herunterladen"
        r1: "Images f√ºr alle Dienste herunterladen"
        r2: "Nur das Image f√ºr den Dienst `db` herunterladen"
        r3: "Fortsetzen, auch wenn Fehler beim Herunterladen auftreten"
      restart:
        group_desc: "Alle oder bestimmte Dienste neu starten, ohne Container neu zu erstellen"
        r1: "Alle Dienste im aktuellen Projekt neu starten"
        r2: "Nur den Dienst `worker` neu starten"
        r3: "Mehrere Dienste gleichzeitig neu starten"
      exec:
        group_desc: "Einen Befehl in einem laufenden Service-Container ausf√ºhren, mit optionalem interaktivem Modus"
        r1: "psql im `db`-Service-Container ausf√ºhren"
        r2: "Eine Shell im `web`-Container √∂ffnen"
        r3: "curl-Anfrage aus dem `api`-Service-Container ausf√ºhren"
      config:
        group_desc: "Die endg√ºltige Compose-Konfiguration ausgeben unter Ber√ºcksichtigung aller Dateien und Umgebungsvariablen"
        r1: "Zusammengef√ºhrte Konfiguration im YAML-Format anzeigen"
        r2: "Alle Dienste auflisten"
        r3: "Alle von Diensten verwendeten Umgebungsvariablen anzeigen"
      watch:
        group_desc: "Dienste bei Quellcode-√Ñnderungen automatisch neu starten, n√ºtzlich f√ºr Entwicklung"
        r1: "Dateien √ºberwachen und Dienste bei √Ñnderungen neu starten"
      events:
        group_desc: "Compose-Ereignisse streamen: Dienststart, -stopp, -aktualisierung"
        r1: "Ereignisse im JSON-Format empfangen"
      rm:
        group_desc: "Gestoppte Service-Container entfernen"
        r1: "Container der Dienste `web` und `db` entfernen"
      pause:
        group_desc: "Dienstbetrieb pausieren"
        r1: "Den Dienst `api` pausieren"
      unpause:
        group_desc: "Pausierte Dienste fortsetzen"
        r1: "Den Dienst `api` fortsetzen"
      create:
        group_desc: "Container erstellen, ohne sie zu starten"
        r1: "Container f√ºr `web` und `db` erstellen, aber nicht starten"
      images:
        group_desc: "Liste der von Diensten verwendeten Images anzeigen"
        r1: "Images aller Dienste anzeigen"
      top:
        group_desc: "Prozesse innerhalb von Service-Containern anzeigen"
        r1: "Prozesse in Containern des Dienstes `web` anzeigen"

    practices:
      title: "üõ† N√ºtzliche Praktiken und Automatisierung mit Docker Compose"
      env_separation:
        title: "Trennung von Umgebungen"
        p1: "Separate `docker-compose.override.yml`-Dateien f√ºr verschiedene Umgebungen verwenden ‚Äî `development`, `staging`, `production`. Dies hilft, Konfigurationen zu isolieren und Konflikte zu vermeiden."
        p2: "Mehrere Konfigurationsdateien mit dem Flag `-f` kombinieren:"
        p3: "Unterschiedliche `.env`-Dateien (`.env.dev`, `.env.prod` usw.) f√ºr die Verwaltung von Umgebungsvariablen verwenden."
      secrets:
        title: "Sichere Speicherung von Secrets"
        p1: "Keine sensiblen Daten (Passw√∂rter, Tokens) direkt in Compose-Dateien einf√ºgen. Stattdessen verwenden:"
        items:
          env: "`.env`-Dateien f√ºr Umgebungsvariablen (nicht verschl√ºsselt, nicht in √∂ffentliche Repos commiten)"
          swarm_secret: "`docker secret` und `docker config` f√ºr sichere Verwaltung von Secrets und Konfigurationen in Docker Swarm"
          volumes: "Externe Volumes f√ºr Konfigurationsdateien mit Secrets"
          external_mgr: "Externe Secret-Management-Systeme (z. B. HashiCorp Vault, AWS Secrets Manager)"
      startup_order:
        title: "Startreihenfolge mit `depends_on` und `healthcheck`"
        p1: "Dienste warten lassen, bis Abh√§ngigkeiten bereit sind:"
      min_downtime:
        title: "Downtime w√§hrend Updates minimieren"
        p1: "Vor dem Aktualisieren der Dienste ausf√ºhren:"
        p2: "Die Option `-d` startet Container im Hintergrund, und `--remove-orphans` entfernt Container, die nicht in aktuellen Konfigurationen definiert sind."
        p3: "Zum vollst√§ndigen Stoppen und Entfernen alter Container falls n√∂tig:"
        p4: "Stellt sicher, dass frische Images geladen und ungenutzte Container ohne Ausfallzeit entfernt werden."
      hot_reload_volumes:
        title: "Hot Code Reloading f√ºr Entwicklung"
        p1: "`volumes` verwenden, um lokale Verzeichnisse in Container einzubinden. √Ñnderungen am Code wirken sofort, ohne Images neu zu bauen."
        p2: "Dateiberechtigungen und Filesystem-Caching (besonders unter Windows und macOS) beachten, um Performance-Probleme zu vermeiden."
      hot_reload_watch:
        title: "Hot Code Reloading ohne Volumes (Compose 2.22+)"
      central_logging:
        title: "Zentralisiertes Logging von Diensten"
        p1: "Container-Logs an Monitoring- und Logsysteme wie ELK Stack, Loki, Prometheus, Fluentd weiterleiten."
        p2: "Docker-Logging-Treiber (`--log-driver`) aktivieren, um zentrale Log-Sammlung zu erm√∂glichen."
        p3: "Logging-Treiber in Compose-Dateien f√ºr Container konfigurieren:"
      auto_restart:
        title: "Automatischer Neustart von Diensten"
        p1: "Restart-Policy in `docker-compose.yml` konfigurieren:"
        p2: "Andere Restart-Policies sind:"
        policies:
          no: "`no` ‚Äî kein automatischer Neustart (Standard)"
          always: "`always` ‚Äî Container immer neu starten"
          on_failure: "`on-failure` ‚Äî nur bei Fehlern neu starten (optional mit Wiederholungsanzahl)"
        p3: "In Produktion ist `unless-stopped` die beste Wahl, um Dienststabilit√§t sicherzustellen."
        p4: "Erm√∂glicht automatische Wiederherstellung nach Fehlern oder Host-Neustarts."
      profiles:
        title: "Service-Profile"
        p1: "Nur bestimmte Gruppen von Diensten starten:"
        p2: "Nur das Frontend-Profil starten:"

    debugging:
      title: "üêû Debugging und Profiling von Diensten in Docker Compose"
      exec:
        group_desc: "Einen Befehl in einem laufenden Dienst ausf√ºhren, mit Zugriff auf Container oder einzelnen Prozessen"
        r1: "Eine Shell im `web`-Service-Container √∂ffnen"
        r2: "Den psql-Befehl im `db`-Service-Container ausf√ºhren"
      logs:
        group_desc: "Service-Logs zur Diagnose und √úberwachung anzeigen"
        r1: "Logs des Dienstes `db` in Echtzeit ansehen"
        r2: "Die letzten 50 Zeilen der Logs des Dienstes `api` anzeigen"
        r3: "Logs der letzten Stunde des Dienstes `web` anzeigen"
      inspect:
        group_desc: "Detaillierte Informationen √ºber den Container eines Dienstes anzeigen"
        r1: "JSON mit detaillierten Infos √ºber den `web`-Service-Container abrufen"
      stats:
        group_desc: "Ressourcennutzung von Containern eines Dienstes √ºberwachen"
        r1: "CPU, Speicher und andere Ressourcennutzung des `worker`-Service-Containers verfolgen"
      run:
        group_desc: "Einen tempor√§ren Container mit den Einstellungen eines Dienstes starten, n√ºtzlich f√ºr Debugging"
        r1: "Einen einmaligen Container f√ºr den Dienst `web` mit interaktiver Shell starten"
      cp:
        group_desc: "Dateien zwischen Host und Container kopieren"
        r1: "Eine Datei aus dem `db`-Service-Container auf den Host kopieren"
      tip:
        one_off: "üí° F√ºr komfortables Debugging komplexer Multi-Service-Setups `docker compose run --rm` verwenden, um einzelne Container mit notwendigen Netzwerken und Volumes zu starten, ohne Hauptdienste zu beeinflussen."

  resources:
    title: "üìö Zus√§tzliche Ressourcen"
    ignore:
      title: "üö´ Dateien mit `.dockerignore` ignorieren"
      p1: "Dateien und Ordner in `.dockerignore` eintragen, die nicht im Image enthalten sein sollen, um die Gr√∂√üe zu reduzieren und den Build zu beschleunigen:"
    aliases:
      title: "‚ö° Befehle mit Aliassen vereinfachen"
      p1: "Aliasse f√ºr h√§ufig genutzte Befehle erstellen, um sie schneller auszuf√ºhren:"
    advice:
      title: "üß† Tipp: Docker-Nutzung"
      b1: "Nicht alles auswendig lernen ‚Äî `docker --help` oder `docker <Befehl> --help` nutzen, um Befehle zu erkunden."
      b2: "Regelm√§√üig √ºben und mit kleinen Projekten experimentieren."
      b3: "Auf Image-Gr√∂√üen achten und unn√∂tige Dateien mit `.dockerignore` ausschlie√üen."
    links:
      title: "üåê N√ºtzliche Links"
      docs_intro: "üìò **Offizielle Docker-Dokumentation** ‚Äî umfassende Anleitungen und Referenzen zu allen Docker-Themen:"
      sheet_intro: "üìô **Docker Cheat Sheet** ‚Äî vollst√§ndiges offizielles Docker-Spickzettel:"
      hub_intro: "üìó **Docker Hub** ‚Äî Images und Registries:"
