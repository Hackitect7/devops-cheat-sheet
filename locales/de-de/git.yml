git:
  meta:
    _root:
      title: "üêô Git und GitHub CLI"
      desc: "Grundlegende und erweiterte Git-Befehle f√ºr Versionskontrolle, Branching, Remote-Repos, Stash, Tags und GitHub CLI."

  basic:
    _root:
      title: "üîπ Grundlegende Befehle"
    git_add:
      desc: "Eine Datei zum Staging-Bereich hinzuf√ºgen"
      ex1: "Eine bestimmte Datei f√ºr den n√§chsten Commit bereitstellen"
      ex2: "Alle √Ñnderungen im aktuellen Verzeichnis und darunter bereitstellen"
      ex3: "Interaktiv ausw√§hlen, welche Teile von Dateien gestaged werden sollen (n√ºtzlich f√ºr partielle Commits)"
    git_clone:
      desc: "Ein Repository in ein neues Verzeichnis klonen"
      ex1: "Nur den angegebenen Branch klonen (anstatt den Standard)"
      ex2: "Nur den neuesten Commit klonen (Shallow Copy, spart Zeit und Speicherplatz)"
    git_commit:
      desc: "√Ñnderungen im Repository aufzeichnen"
      ex1: "Commit mit Nachricht ohne Editor √∂ffnen"
      ex2: "Alle ge√§nderten Dateien stagen und committen mit Nachricht"
      ex3: "Den letzten Commit aktualisieren (Nachricht √§ndern oder weitere √Ñnderungen hinzuf√ºgen)"
      ex4: "Einen Fixup-Commit erstellen, der sp√§ter beim interaktiven Rebase automatisch gesquasht wird"
    git_config:
      desc: "Repository- oder globale Optionen abrufen und festlegen"
      ex1: "Globalen Git-Benutzernamen setzen"
      ex2: "Globale Git-E-Mail-Adresse setzen"
      ex3: "Alle Git-Einstellungen auflisten (Name, E-Mail, Editor usw.)"
    git_diff:
      desc: "√Ñnderungen zwischen Commits, Commit und Arbeitsbaum usw. anzeigen"
      ex1: "Zeigen, was seit dem letzten Commit ge√§ndert wurde (unstaged)"
      ex2: "Zeigen, was im n√§chsten Commit enthalten sein wird"
      ex3: "√Ñnderungen auf Wortebene anzeigen"
    git_grep:
      desc: "In Repository-Dateien suchen"
      ex1: "Alle Vorkommen von `functionName` in allen Projektdateien finden"
      ex2: "Zeilen mit `TODO` finden und Zeilennummern anzeigen (praktisch f√ºr Code-Notizen)"
      ex3: "Nach dem Wort `login` ohne Ber√ºcksichtigung der Gro√ü-/Kleinschreibung suchen (findet `Login`, `LOGIN`, `login` usw.)"
    git_init:
      desc: "Ein leeres Git-Repository erstellen oder ein bestehendes neu initialisieren"
      ex1: "Ein neues Repo im Verzeichnis my-project initialisieren"
      ex2: "Ein Bare-Repository initialisieren"
    git_log:
      desc: "Commit-Logs anzeigen"
      ex1: "Commit-Verlauf in kompaktem Einzeilenformat anzeigen"
      ex2: "Alle Branches in einem visuellen Commit-Graphen anzeigen"
      ex3: "Patch und Dateistatistiken zu Commits anzeigen"
    git_reset:
      desc: "Dateien unstagen, √Ñnderungen im Arbeitsverzeichnis behalten"
      ex1: "Eine Datei aus dem Staging entfernen (√Ñnderungen bleiben erhalten)"
      ex2: "Einen Commit zur√ºckgehen und alle √Ñnderungen l√∂schen (irreversibel!)"
      ex3: "Letzten Commit r√ºckg√§ngig machen, √Ñnderungen aber behalten (erneut commitbar)"
      ex4: "Einen Commit r√ºckg√§ngig machen, √Ñnderungen aber ungestaged im Arbeitsverzeichnis behalten"
    git_show:
      desc: "Verschiedene Objekttypen anzeigen"
      ex1: "√Ñnderungen und Nachricht eines bestimmten Commits anzeigen"
      ex2: "Den vorherigen Commit vor dem aktuellen anzeigen"
      ex3: "Eine Zusammenfassung der DateiaÃànderungen des neuesten Commits anzeigen"
    git_status:
      desc: "Status des Arbeitsbaums anzeigen"
      ex1: "Status im Kurzformat anzeigen"
      ex2: "Aktuellen Branch und Status der Dateien anzeigen"

  branching_merging:
    _root:
      title: "üåø Branching und Merging"
    git_branch:
      desc: "Branches erstellen, auflisten oder l√∂schen"
      ex1: "Einen neuen Branch namens `new-feature` erstellen"
      ex2: "Einen lokalen Branch namens `old-feature` l√∂schen"
    git_checkout:
      desc: "Branches wechseln oder Dateien aus einem anderen Commit wiederherstellen"
      ex1: "Zum Branch `main` wechseln"
      ex2: "Einen neuen Branch `new-branch` erstellen und wechseln"
    git_switch:
      desc: "Branches wechseln (vereinfachte Alternative zu `checkout`)"
      ex1: "Zum Branch `main` wechseln"
      ex2: "Einen neuen Branch namens `feature-x` erstellen und wechseln"
      ex3: "Zu einem bestehenden Branch `new-feature` wechseln"
    git_merge:
      desc: "√Ñnderungen aus einem anderen Branch in den aktuellen √ºbernehmen"
      ex1: "Den Branch `new-feature` in den aktuellen mergen"
      ex2: "Immer einen Merge-Commit erstellen (auch wenn Fast-Forward m√∂glich ist)"
      ex3: "Merge abbrechen und √Ñnderungen zur√ºcksetzen, falls Konflikte auftreten"
    git_rebase:
      desc: "Commits auf einen neuen Basis-Commit verschieben oder neu anwenden"
      ex1: "Commits des eigenen Branches auf `main` neu anwenden"
      ex2: "Die letzten 3 Commits interaktiv bearbeiten"
      ex3: "Einen laufenden Rebase stoppen und r√ºckg√§ngig machen"
      ex4: "Commits, die als fixup oder squash markiert sind, beim interaktiven Rebase automatisch zusammenfassen"
    git_cherry_pick:
      desc: "Bestimmte Commits aus einem anderen Branch anwenden"
      ex1: "Einen bestimmten Commit (per Hash) im aktuellen Branch anwenden"
      ex2: "Nach Konfliktl√∂sung den Cherry-Pick fortsetzen"
      ex3: "Eine Commit-Spanne von `A` (exklusiv) bis `B` (inklusive) anwenden"

  remote:
    _root:
      title: "üì° Remote-Repositories"
    git_remote:
      desc: "Verkn√ºpfungen zu Remote-Repositories (z. B. GitHub) verwalten"
      ex1: "Remote-Namen und ihre URLs anzeigen"
      ex2: "Ein Remote-Repository namens `origin` hinzuf√ºgen"
    git_pull:
      desc: "√Ñnderungen aus einem Remote-Branch herunterladen und automatisch mergen"
      ex1: "√Ñnderungen aus dem Remote-Branch `main` in den aktuellen Branch holen und mergen"
      ex2: "√Ñnderungen holen und Rebase statt Merge durchf√ºhren"
    git_push:
      desc: "Lokale √Ñnderungen in ein Remote-Repository hochladen"
      ex1: "Den lokalen Branch `main` in das Remote `origin` pushen"
    git_fetch:
      desc: "√Ñnderungen vom Remote herunterladen, ohne sie zu mergen"
      ex1: "Alle Updates von Remote `origin` holen, aber nicht anwenden"
      ex2: "Nur den Branch `main` vom Remote holen"
      ex3: "Updates von allen Remotes holen"
      ex4: "Gel√∂schte Branches aufr√§umen ‚Äî lokale Referenzen zu Remote-Branches entfernen"
      ex5: "Anzeigen, was geholt w√ºrde, ohne es herunterzuladen"
      ex6: "Lokalen Tracking-Branch (`origin/main`) zwangsweise aktualisieren und Konflikte √ºberschreiben"

  stash_cleanup:
    _root:
      title: "üì¶ Stash und Aufr√§umen"
    git_stash:
      desc: "Nicht commitete √Ñnderungen (Work in Progress) tempor√§r speichern"
      ex1: "Ge√§nderte und gestagte Dateien speichern und Arbeitsverzeichnis zur√ºcksetzen"
      ex2: "Die zuletzt gespeicherten Stash-√Ñnderungen wieder anwenden (bleibt erhalten)"
      ex3: "Den letzten Stash anwenden und entfernen"
      ex4: "Liste aller gespeicherten Stashes anzeigen"
      ex5: "Einen neuen Branch erstellen und den letzten Stash darauf anwenden"
    git_clean:
      desc: "Nicht versionierte Dateien (nicht in Git) endg√ºltig l√∂schen"
      ex1: "Unversionierte Dateien im aktuellen Verzeichnis l√∂schen"
      ex2: "Unversionierte Dateien und Ordner l√∂schen"
      ex3: "Vorschau, was gel√∂scht w√ºrde (sicherer Dry-Run)"

  tags:
    _root:
      title: "üè∑Ô∏è Tags"
    git_tag:
      desc: "Tags erstellen, auflisten oder l√∂schen, um bestimmte Punkte in der Historie zu markieren (z. B. Releases)"
      ex1: "Einen annotierten Tag `v1.0` mit Nachricht erstellen (als vollwertiges Git-Objekt, geeignet f√ºr Releases)"
      ex2: "Den lokalen Tag `v1.0` l√∂schen (betrifft nicht das Remote)"
    git_push:
      desc: "Commits, Branches und Tags von lokal ins Remote-Repository hochladen"
      ex1: "Alle lokalen Tags ins Remote pushen (praktisch nach mehreren Versionstaggs)"
      ex2: "Einen bestimmten Tag (z. B. `v1.0`) ins Remote pushen"
      ex3: "Den Remote-Tag `v1.0` l√∂schen (Colon-Syntax beachten)"

  conflicts:
    _root:
      title: "üõ†Ô∏è Konfliktl√∂sung"
    git_mergetool:
      desc: "Ein visuelles Tool √∂ffnen, um Merge-Konflikte zu l√∂sen"
      ex1: "Ein bestimmtes Merge-Tool (z. B. Meld) verwenden, um Konflikte zu beheben"
    git_rerere:
      desc: "Git merken lassen, wie Konflikte zuvor gel√∂st wurden"
      ex1: "Automatische Wiederverwendung vergangener Konfliktl√∂sungen aktivieren"
      ex2: "Anzeigen, welche Dateien gespeicherte Konfliktl√∂sungen haben"
      ex3: "Anzeigen, welche √Ñnderungen Git f√ºr die Wiederverwendung gespeichert hat"

  advanced:
    _root:
      title: "‚öôÔ∏è Erweiterte Befehle"
    git_bisect:
      desc: "Bin√§re Suche verwenden, um den Commit zu finden, der einen Bug eingef√ºhrt hat"
      ex1: "Bin√§re Suche zwischen bekannt gutem und schlechtem Commit starten"
      ex2: 'Aktuellen Commit als "bad" markieren (enth√§lt den Bug)'
      ex3: 'Einen bekannten "good" Commit markieren, bei dem der Bug nicht existierte'
    git_blame:
      desc: "Zeigen, wer welche Zeile zuletzt ge√§ndert hat, mit Revision und Autor"
      ex1: "Autor- und Commit-Infos f√ºr jede Zeile einer Datei anzeigen"
      ex2: "Blame-Infos nur f√ºr Zeilen 10 bis 20 anzeigen"
      ex3: "E-Mail-Adressen der Autoren zusammen mit den Zeilen√§nderungen anzeigen"
    git_reflog:
      desc: "Den Referenz-Log (Reflog) von Branch-Bewegungen und HEAD anzeigen und verwalten"
      ex1: "Sehen, wo der Branch `main` vor einer Woche war"
      ex2: "Vorschau, welche Reflog-Eintr√§ge √§lter als 30 Tage aufger√§umt werden k√∂nnen"
      ex3: "Einen bestimmten Reflog-Eintrag l√∂schen (vorsichtig, da dies die Wiederherstellung beeintr√§chtigen kann)"
    git_submodule:
      desc: "Submodule hinzuf√ºgen, initialisieren, aktualisieren oder inspizieren (Repos innerhalb von Repos)"
      ex1: "Ein externes Repository als Submodul im angegebenen Pfad hinzuf√ºgen"
      ex2: "Alle in der Repo aufgelisteten Submodule initialisieren und herunterladen"
      ex3: "`git pull` in jedem Submodul ausf√ºhren, um sie zu aktualisieren"
      ex4: "Submodul-URLs nach √Ñnderungen in `.gitmodules` synchronisieren"
      ex5: "Submodule auf den neuesten Commit ihrer Remote-Branches aktualisieren"
    git_archive:
      desc: "Ein Archiv (zip, tar usw.) von Dateien eines bestimmten Commits oder Branches erstellen"
      ex1: "Ein ZIP-Archiv der aktuellen Projektdateien von HEAD erstellen"
      ex2: "Ein komprimiertes `.tar.gz`-Archiv vom aktuellen HEAD erstellen"
      ex3: "Ein `.tar.gz`-Archiv mit allen Projektdateien erstellen, die im Archiv im Ordner `project/` liegen"
    git_gc:
      desc: "Unn√∂tige Dateien bereinigen und Repository f√ºr bessere Performance optimieren"
      ex1: "Eine gr√ºndliche Bereinigung und Optimierung durchf√ºhren (kann langsam sein, aber effektiv)"
      ex2: "Alle unerreichbaren Objekte sofort entfernen (gef√§hrlich, wenn unsicher)"
    git_shortlog:
      desc: "Kurze Zusammenfassung der Autoren und ihrer Commits"
      ex1: "Liste der Autoren mit E-Mail-Adressen anzeigen (z. B. zur Analyse, wer wie viel beigetragen hat)"
      ex2: "Anzeigen, wie viele Commits jeder Autor gemacht hat, sortiert nach Anzahl"
      ex3: "Wie oben, aber mit Namen und E-Mails ‚Äî n√ºtzlich f√ºr detailliertes Aktivit√§ts-Tracking"
    git_revert:
      desc: "Einen neuen Commit erstellen, der √Ñnderungen eines vorherigen Commits r√ºckg√§ngig macht, ohne die Historie umzuschreiben"
      ex1: "Den letzten Commit r√ºckg√§ngig machen, indem ein neuer Commit erstellt wird"
      ex2: "Einen bestimmten Commit per Hash r√ºckg√§ngig machen, indem ein neuer sicherer Commit erstellt wird"

  gh:
    _root:
      title: "üêô GitHub CLI"
      note: "`gh` erm√∂glicht es dir, GitHub direkt vom Terminal aus zu verwalten."
    gh_auth_login:
      desc: "Authentifiziere dich bei einem GitHub-Host, um CLI-Befehlen den Zugriff auf dein Konto zu erlauben"
      ex1: "Authentifizierung mit einem pers√∂nlichen Zugriffstoken aus einer Datei (`mytoken.txt`)"
      ex2: "Authentifizierung bei einem GitHub-Enterprise-Server (nicht github.com)"
    gh_repo_clone:
      desc: "Ein GitHub-Repository auf die lokale Maschine klonen"
      ex1: "Das Repository `repo` des Benutzers `user` in einen Ordner namens `repo` klonen"
      ex2: "Das Repository klonen, aber nur den neuesten Commit herunterladen (schneller und platzsparender Clone)"
      ex3: "Das Repository in den benutzerdefinierten Ordner `workspace/cli` klonen"
    gh_issue_list:
      desc: "Issues in einem GitHub-Repository auflisten, optional nach verschiedenen Kriterien gefiltert"
      ex1: "Issues anzeigen, die dir zugewiesen sind"
      ex2: "Issues unabh√§ngig vom Status (offen oder geschlossen) auflisten"
      ex3: 'Issues mit dem Begriff "error" finden, nicht zugewiesen, sortiert nach Erstellungsdatum aufsteigend'
    gh_pr_create:
      desc: "Einen Pull Request auf GitHub √ºber die CLI erstellen"
      ex1: "Einen Pull Request mit dem angegebenen Titel erstellen"
      ex2: 'Den Pull Request mit einem GitHub-Projekt namens "Roadmap" verkn√ºpfen'
      ex3: "Einen PR vom Branch `feature` im Fork `monalisa` in den Branch `develop` erstellen"
    gh_repo_create:
      desc: "Ein neues GitHub-Repository √ºber die CLI erstellen"
      ex1: "Ein neues Repository namens `my-project` auf GitHub erstellen (interaktive Eingabeaufforderung folgt)"
      ex2: "Ein √∂ffentliches Repository erstellen und lokal klonen"
      ex3: "Ein privates Remote-Repository aus dem aktuellen Ordner erstellen und ein Remote namens `upstream` hinzuf√ºgen"

  aliases:
    _root:
      title: "üí° Git-Aliasse (n√ºtzliche Abk√ºrzungen)"
      intro: "Richte praktische Aliasse ein, um h√§ufige Git-Befehle zu beschleunigen:"

  pro:
    _root:
      title: "üöÄ Erweiterte Git-Befehle f√ºr Profis"
    git_filter_repo:
      desc: "Ein leistungsstarkes Tool zum Umschreiben der Git-Historie, um Dateien, Autorenschaft oder Pfade zu entfernen oder zu √§ndern; ersetzt `git filter-branch` mit besserer Geschwindigkeit und Sicherheit"
      ex1: "Repository-Historie effizient umschreiben, um sensible Dateien oder Verzeichnisse zu entfernen (schneller als `git filter-branch`). Vorsicht bei der Nutzung!"
      ex2: "Strings oder Muster in der gesamten Historie massenweise ersetzen (z. B. Anmeldedaten bereinigen)"
      ex3: "Die Historie eines Unterverzeichnisses in ein neues Repository extrahieren, Commit-Metadaten bleiben erhalten"
    git_worktree:
      desc: "Mehrere Arbeitsverzeichnisse mit einem einzigen Repository verkn√ºpfen, um parallel an verschiedenen Branches zu arbeiten, ohne zu klonen"
      ex1: "Ein zus√§tzliches Arbeitsverzeichnis f√ºr denselben Repo erstellen, um Branches parallel auszuchecken"
      ex2: "Alle aktiven Worktrees mit Pfaden und zugeh√∂rigen Branches auflisten"
      ex3: "Ein verkn√ºpftes Worktree entfernen, wenn es nicht mehr ben√∂tigt wird, und Arbeitsverzeichnis sicher bereinigen"
    git_replace:
      desc: "Tempor√§re Referenzen erstellen, die bestehende Objekte ersetzen, um eine nicht-destruktive lokale Historienmanipulation und Tests zu erm√∂glichen"
      ex1: "Einen Commit im lokalen Repo tempor√§r gegen einen anderen austauschen, n√ºtzlich zum Testen oder Patchen der Historie"
      ex2: "Alle aktiven Ersatz-Referenzen anzeigen"
      ex3: "Eine bestimmte Ersatz-Referenz l√∂schen, um das Verhalten zur√ºckzusetzen"
    git_stash_adv:
      desc: "Nicht commitete √Ñnderungen tempor√§r auf einem Stack speichern, um Kontextwechsel ohne unfertige Commits zu erm√∂glichen"
      ex1: "Interaktiv √Ñnderungen zum Stash ausw√§hlen, f√ºr granulare Kontrolle"
      ex2: "Einen Stash mit einer benutzerdefinierten Nachricht erstellen, um ihn leichter zu identifizieren"
      ex3: "Einen bestimmten Stash aus der Liste anwenden, ohne ihn zu l√∂schen"
    git_rebase_adv:
      desc: "Commits auf eine andere Basis neu anwenden, f√ºr eine sauberere, lineare Historie und interaktives Editieren"
      ex1: "Eine interaktive Rebase-Session starten, die automatisch Commits mit fixup/squash zusammenf√ºhrt"
      ex2: "Commits mit fixup/squash automatisch zusammenf√ºhren, um die Historie vor dem Push aufzur√§umen"
      ex3: "Einen Fixup-Commit erstellen, der beim interaktiven Rebase automatisch zusammengef√ºhrt wird"
      ex4: "Einen Squash-Commit erstellen, um ihn beim Rebase mit einem bestimmten Commit zu kombinieren"
    git_bisect_pro:
      desc: "Bin√§re Suche, um den Commit zu finden, der einen Bug eingef√ºhrt hat, durch schrittweises Testen von Commits"
      ex1: "Bisect automatisieren, indem ein Testskript auf jedem Commit l√§uft, um den fehlerhaften Commit schnell zu finden"
      ex2: "Bisection durch Testskript automatisieren, um die Fehlersuche deutlich zu beschleunigen"
      ex3: "Ein grafisches Tool √∂ffnen, um den Bisection-Prozess zu visualisieren"
      ex4: "Bisect-Modus beenden und zum urspr√ºnglichen HEAD zur√ºckkehren"
    git_commit_pro:
      desc: "√Ñnderungen mit erweiterten Optionen (Amend, Sign, Fixup, Nachricht) committen, um eine hochwertige Historie zu gew√§hrleisten"
      ex1: "Einen Commit mit deinem GPG-Schl√ºssel signieren, um Authentizit√§t kryptografisch zu verifizieren"
      ex2: "Commits kryptografisch mit deinem GPG-Schl√ºssel signieren, um Integrit√§t und Autorenschaft sicherzustellen"
      ex3: "Den globalen GPG-Schl√ºssel konfigurieren, der zum Signieren verwendet wird"
      ex4: "GPG-Signaturinformationen f√ºr Commits pr√ºfen und anzeigen"
    git_reflog_pro:
      desc: "Ein Log aller HEAD- und Branch-Updates aufbewahren ‚Äî unerl√§sslich f√ºr die Wiederherstellung verlorener Commits und Nachvollziehen der Historie"
      ex1: "Den aktuellen Branch mit einem √§lteren Reflog-Eintrag zur√ºcksetzen, um √Ñnderungen r√ºckg√§ngig zu machen"
      ex2: "Alle Reflog-Eintr√§ge sofort verfallen lassen (Vorsicht!)"

  pro_tips:
    _root:
      title: "üß∞ Profi-Workflow-Tipps und Automatisierung"
    columns:
      topic: "Thema"
      commands_example: "Befehle / Beispiel"
      explanation_tips: "Erkl√§rung & Profi-Tipps"
    aggressive_cleanup:
      topic: "Aggressives Repo-Cleanup"
      desc: "F√ºhrt eine tiefe Garbage Collection durch und entfernt unerreichbare Objekte sofort zur Optimierung. Ideal w√§hrend Wartungsfenstern"
    parallel_worktrees:
      topic: "Parallele Branch-Worktrees"
      desc: "Mehrere Arbeitsverzeichnisse f√ºr gleichzeitige Feature-Entwicklung behalten, vermeidet Clone-Overhead"
    linear_history:
      topic: "Saubere, lineare Historie"
      desc: "Vor dem Push interaktives Rebase mit Autosquash durchf√ºhren, um die Historie sauber und lesbar zu halten"
    secure_commits:
      topic: "Sichere Commits"
      desc: "Commits mit GPG signieren, um Vertrauen in gemeinsamen Repos zu st√§rken ‚Äî in vielen Unternehmen Pflicht"
    automated_bisect:
      topic: "Automatisierte Bisektion"
      desc: "Fehlerjagd automatisieren, indem bei Bisect ein Testskript auf jedem Commit l√§uft"
    conflict_cache:
      topic: "Konfliktl√∂sungs-Cache"
      desc: "Wiederverwendung von Konfliktl√∂sungen aktivieren, um wiederholte Merge-Konflikte schneller zu l√∂sen"
    shared_aliases_hooks:
      topic: "Gemeinsame Aliasse und Hooks"
      desc: "H√§ufige Git-Aliasse und Commit-Hooks in einem geteilten Repo oder CI-Pipeline speichern, um Teamstandards durchzusetzen und Produktivit√§t zu steigern"

  resources:
    _root:
      title: "Zus√§tzliche Ressourcen"
    tip:
      title: "üß† **Tipp**"
      desc: "Nicht alles auswendig lernen. Verwende `--help`, erkunde und √ºbe regelm√§√üig:"
    links:
      title: "üåê N√ºtzliche Links"
      official_docs: "üìò **Offizielle Git-Dokumentation** ‚Äî detailliertes Handbuch f√ºr alle Git-Befehle:"
      learn_branching: "üìô **Learn Git Branching** ‚Äî interaktives visuelles Tutorial zum Erlernen von Branching-Konzepten:"
      pro_git_book: "üìï **Pro Git Buch** (kostenlos, von Scott Chacon & Ben Straub):"
      official_cheatsheet: "üìó **Git Cheatsheet** (offizielle kompakte Referenz):"
