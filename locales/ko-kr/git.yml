git:
  meta:
    _root:
      title: "🐙 Git 및 GitHub CLI"
      desc: "버전 관리, 브랜칭, 원격 저장소, stash, 태그 및 GitHub CLI를 위한 기본 및 고급 Git 명령어."

  basic:
    _root:
      title: "🔹 기본 명령어"
    git_add:
      desc: "파일을 스테이징 영역에 추가"
      ex1: "다음 커밋을 위해 특정 파일 스테이징"
      ex2: "현재 디렉터리 및 하위의 모든 변경사항 스테이징"
      ex3: "파일의 일부만 선택적으로 스테이징 (부분 커밋에 유용)"
    git_clone:
      desc: "저장소를 새 디렉터리로 클론"
      ex1: "기본 브랜치 대신 지정된 브랜치만 클론"
      ex2: "최신 커밋만 클론하여 얕은 복사 (시간과 공간 절약)"
    git_commit:
      desc: "저장소에 변경 사항 기록"
      ex1: "에디터를 열지 않고 메시지와 함께 커밋"
      ex2: "수정된 추적 파일 모두 스테이징 후 메시지와 함께 커밋"
      ex3: "마지막 커밋 업데이트 (메시지 변경 또는 추가 변경 포함)"
      ex4: "인터랙티브 리베이스 중 자동 squash를 위한 fixup 커밋 생성"
    git_config:
      desc: "저장소 또는 글로벌 옵션 가져오기/설정"
      ex1: "글로벌 Git 사용자 이름 설정"
      ex2: "글로벌 Git 이메일 설정"
      ex3: "모든 Git 설정 나열 (이름, 이메일, 에디터 등)"
    git_diff:
      desc: "커밋 간, 커밋과 작업 트리 간의 변경사항 표시"
      ex1: "마지막 커밋 이후의 변경사항 표시 (스테이징되지 않은 변경)"
      ex2: "다음 커밋에 포함될 변경사항 표시"
      ex3: "단어 단위 차이 표시"
    git_grep:
      desc: "저장소 파일 내부 검색"
      ex1: "프로젝트 파일에서 `functionName`이 언급된 모든 부분 찾기"
      ex2: "`TODO`가 포함된 줄과 줄 번호 표시 (코드 노트 찾기에 유용)"
      ex3: "`login` 단어를 대소문자 무시하고 검색 (`Login`, `LOGIN`, `login` 등과 일치)"
    git_init:
      desc: "빈 Git 저장소 생성 또는 기존 저장소 재초기화"
      ex1: "my-project 디렉터리에 새 저장소 초기화"
      ex2: "bare 저장소 초기화"
    git_log:
      desc: "커밋 로그 표시"
      ex1: "커밋 히스토리를 한 줄 형식으로 표시"
      ex2: "모든 브랜치를 커밋 그래프로 시각화하여 표시"
      ex3: "커밋의 패치 및 파일 변경 통계 표시"
    git_reset:
      desc: "스테이징에서 파일을 제거하되 작업 디렉터리 변경사항은 유지"
      ex1: "스테이징에서 파일 제거 (편집 내용은 유지)"
      ex2: "한 커밋 이전으로 되돌리고 모든 변경 삭제 (복구 불가!)"
      ex3: "마지막 커밋 취소하되 변경사항은 유지하여 다시 커밋 가능"
      ex4: "커밋 취소 후 변경사항은 스테이징하지 않고 유지"
    git_show:
      desc: "다양한 객체 표시"
      ex1: "특정 커밋의 변경사항과 메시지 표시"
      ex2: "현재 이전 커밋 표시"
      ex3: "최신 커밋의 파일 변경 요약 표시"
    git_status:
      desc: "작업 트리 상태 표시"
      ex1: "짧은 형식으로 상태 표시"
      ex2: "현재 브랜치 및 파일 상태 표시"

  branching_merging:
    _root:
      title: "🌿 브랜칭 및 병합"
    git_branch:
      desc: "브랜치 생성, 나열, 삭제"
      ex1: "`new-feature`라는 새 브랜치 생성"
      ex2: "`old-feature`라는 로컬 브랜치 삭제"
    git_checkout:
      desc: "브랜치 전환 또는 다른 커밋에서 파일 복원"
      ex1: "`main` 브랜치로 전환"
      ex2: "`new-branch`라는 새 브랜치 생성 및 전환"
    git_switch:
      desc: "브랜치 전환 (`checkout`의 단순화된 대안)"
      ex1: "`main` 브랜치로 전환"
      ex2: "`feature-x`라는 새 브랜치 생성 및 전환"
      ex3: "`new-feature`라는 기존 브랜치로 전환"
    git_merge:
      desc: "다른 브랜치의 변경사항을 현재 브랜치로 병합"
      ex1: "`new-feature` 브랜치를 현재 브랜치에 병합"
      ex2: "빠른 병합이 가능해도 항상 병합 커밋 생성"
      ex3: "충돌 발생 시 병합 취소 및 변경 되돌리기"
    git_rebase:
      desc: "커밋을 새로운 기반 커밋 위로 옮기거나 다시 적용"
      ex1: "브랜치 커밋을 `main` 브랜치 위로 다시 적용"
      ex2: "최근 3개의 커밋을 인터랙티브하게 편집"
      ex3: "진행 중인 리베이스 중지 및 되돌리기"
      ex4: "인터랙티브 리베이스 중 fixup/squash로 표시된 커밋 자동 병합"
    git_cherry_pick:
      desc: "다른 브랜치에서 특정 커밋 적용"
      ex1: "특정 커밋(해시)을 현재 브랜치에 적용"
      ex2: "충돌 해결 후 cherry-pick 계속 진행"
      ex3: "`A`(제외)부터 `B`(포함)까지 커밋 범위 적용"

  remote:
    _root:
      title: "📡 원격 저장소"
    git_remote:
      desc: "원격 저장소(GitHub 등)에 대한 링크 관리"
      ex1: "원격 이름과 URL 표시"
      ex2: "`origin`이라는 원격 저장소 추가"
    git_pull:
      desc: "원격 브랜치에서 변경 다운로드 및 자동 병합"
      ex1: "원격 `main` 브랜치에서 변경 가져와 현재 브랜치에 병합"
      ex2: "병합 대신 리베이스로 원격 브랜치 위에 적용"
    git_push:
      desc: "로컬 변경을 원격 저장소에 업로드"
      ex1: "로컬 `main` 브랜치를 원격 `origin`에 푸시"
    git_fetch:
      desc: "병합하지 않고 원격에서 변경 다운로드"
      ex1: "원격 `origin`의 모든 업데이트 가져오기 (적용하지 않음)"
      ex2: "원격에서 `main` 브랜치만 가져오기"
      ex3: "모든 원격 저장소에서 업데이트 가져오기"
      ex4: "삭제된 브랜치 정리 — 원격에서 삭제된 브랜치 로컬 참조 제거"
      ex5: "실제로 다운로드하지 않고 가져올 항목 미리보기"
      ex6: "충돌을 덮어쓰며 로컬 추적 브랜치(`origin/main`) 강제 업데이트"

  stash_cleanup:
    _root:
      title: "📦 Stash 및 정리"
    git_stash:
      desc: "커밋되지 않은 변경사항을 임시 저장 (작업 중)"
      ex1: "수정 및 스테이징된 파일 저장 후 작업 디렉터리를 마지막 커밋으로 되돌림"
      ex2: "최근 stash 재적용 (stash는 유지됨)"
      ex3: "최근 stash 재적용 및 제거"
      ex4: "모든 stash 목록 표시"
      ex5: "새 브랜치를 생성하고 최근 stash 적용"
    git_clean:
      desc: "Git에 추적되지 않은 파일 영구 삭제"
      ex1: "현재 디렉터리의 추적되지 않은 파일 삭제"
      ex2: "추적되지 않은 파일과 폴더 삭제"
      ex3: "삭제될 항목 미리보기 (안전 dry run)"

  tags:
    _root:
      title: "🏷️ 태그"
    git_tag:
      desc: "특정 시점을 표시하기 위해 태그 생성, 나열, 삭제 (예: 릴리스)"
      ex1: "`v1.0`이라는 주석 태그 생성 (메시지 포함, 릴리스에 적합)"
      ex2: "`v1.0`이라는 로컬 태그 삭제 (원격에는 영향 없음)"
    git_push:
      desc: "로컬에서 원격 저장소로 커밋, 브랜치 및 태그 업로드"
      ex1: "모든 로컬 태그를 원격에 푸시 (여러 버전 태그 후 유용)"
      ex2: "특정 태그 (예: `v1.0`)를 원격 저장소에 푸시"
      ex3: "원격 태그 `v1.0` 삭제 (콜론 문법 사용)"

  conflicts:
    _root:
      title: "🛠️ 충돌 해결"
    git_mergetool:
      desc: "머지 충돌 해결을 돕는 시각적 도구 열기"
      ex1: "특정 머지 도구 (예: Meld) 사용해 충돌 해결"
    git_rerere:
      desc: "Git이 이전에 해결한 머지 충돌을 기억하도록 함"
      ex1: "과거 충돌 해결 자동 재사용 활성화"
      ex2: "저장된 충돌 해결이 있는 파일 표시"
      ex3: "Git이 저장한 미래 재사용용 변경사항 표시"

  advanced:
    _root:
      title: "⚙️ 고급 명령어"
    git_bisect:
      desc: "버그가 도입된 커밋 찾기 위해 이진 검색 사용"
      ex1: "버그가 없는 커밋과 있는 커밋 사이에서 이진 검색 시작"
      ex2: '현재 커밋을 "bad"로 표시 (버그 포함)'
      ex3: '버그가 없던 커밋을 "good"으로 표시'
    git_blame:
      desc: "파일 각 줄을 마지막으로 수정한 사람 표시 (리비전 및 작성자 포함)"
      ex1: "파일의 각 줄에 대한 작성자와 커밋 정보 표시"
      ex2: "10~20번째 줄에 대한 blame 정보만 표시"
      ex3: "라인 변경과 함께 작성자의 이메일 표시"
    git_reflog:
      desc: "브랜치 이동 및 HEAD의 참조 로그(reflog) 보기 및 관리"
      ex1: "`main` 브랜치가 일주일 전 가리켰던 위치 보기"
      ex2: "30일 이상 된 reflog 항목 중 정리 가능한 것 미리보기 (변경 없음)"
      ex3: "특정 reflog 항목 삭제 (주의: 복구에 영향 줄 수 있음)"
    git_submodule:
      desc: "서브모듈 추가, 초기화, 업데이트, 검사 (저장소 안의 저장소)"
      ex1: "외부 저장소를 서브모듈로 특정 경로에 추가"
      ex2: "저장소에 나열된 모든 서브모듈 초기화 및 다운로드"
      ex3: "각 서브모듈 안에서 `git pull` 실행하여 최신 커밋으로 업데이트"
      ex4: ".gitmodules 파일 변경 후 서브모듈 URL 동기화"
      ex5: "서브모듈을 원격 브랜치의 최신 커밋으로 업데이트"
    git_archive:
      desc: "특정 커밋 또는 브랜치에서 파일을 아카이브(zip, tar 등) 생성"
      ex1: "HEAD의 현재 프로젝트 파일을 ZIP 아카이브로 생성"
      ex2: "현재 HEAD에서 `.tar.gz` 압축 아카이브 생성"
      ex3: "현재 프로젝트를 `.tar.gz` 아카이브로 생성하되 모든 파일을 `project/` 폴더 안에 배치"
    git_gc:
      desc: "불필요한 파일 정리 및 저장소 성능 최적화"
      ex1: "철저한 정리 및 최적화 수행 (느리지만 효과적)"
      ex2: "즉시 모든 접근 불가 객체 제거 (주의 필요)"
    git_shortlog:
      desc: "작성자와 커밋 요약 빠르게 보기"
      ex1: "작성자 목록과 이메일 표시 (누가 얼마나 기여했는지 분석용)"
      ex2: "작성자별 커밋 수 표시, 커밋 수 기준 정렬"
      ex3: "상세 활동 추적용 이름과 이메일 포함하여 표시"
    git_revert:
      desc: "기록을 다시 쓰지 않고 이전 커밋을 되돌리는 새로운 커밋 생성"
      ex1: "마지막 커밋을 되돌리는 새 커밋 생성"
      ex2: "특정 커밋 해시를 되돌리는 새 커밋 생성 (안전한 방법)"

  gh:
    _root:
      title: "🐙 GitHub CLI"
      note: "`gh`를 사용하면 터미널에서 GitHub를 관리할 수 있습니다."
    gh_auth_login:
      desc: "GitHub 호스트에 인증하여 CLI 명령어가 계정과 상호작용할 수 있도록 함"
      ex1: "파일(`mytoken.txt`)에 저장된 개인 액세스 토큰으로 인증"
      ex2: "GitHub Enterprise 서버에 인증 (github.com 아님)"
    gh_repo_clone:
      desc: "GitHub 저장소를 로컬 머신으로 클론"
      ex1: "`user`가 소유한 `repo` 저장소를 `repo`라는 폴더로 클론"
      ex2: "최신 커밋만 다운로드하여 빠르고 작은 클론 수행"
      ex3: "`workspace/cli`라는 사용자 지정 폴더에 저장소 클론"
    gh_issue_list:
      desc: "GitHub 저장소의 이슈 나열 (필터링 옵션 포함)"
      ex1: "자신에게 할당된 이슈 나열"
      ex2: "상태와 관계없이 모든 이슈 나열 (open, closed)"
      ex3: '"error"에 일치하고, 미할당이며, 생성 날짜 오름차순으로 정렬된 이슈 나열'
    gh_pr_create:
      desc: "CLI를 통해 GitHub에 Pull Request 생성"
      ex1: "지정된 제목으로 Pull Request 생성"
      ex2: '"Roadmap"이라는 GitHub 프로젝트에 Pull Request 연결'
      ex3: "fork `monalisa`의 `feature` 브랜치에서 `develop` 브랜치로 PR 생성"
    gh_repo_create:
      desc: "CLI에서 새 GitHub 저장소 생성"
      ex1: "GitHub에 `my-project`라는 새 저장소 생성 (대화형 프롬프트 진행)"
      ex2: "공개 저장소 생성 후 로컬에 클론"
      ex3: "현재 폴더에서 비공개 원격 저장소 생성 후 `upstream`이라는 원격 추가"

  aliases:
    _root:
      title: "💡 Git 별칭 (유용한 단축키)"
      intro: "자주 사용하는 Git 명령어를 빠르게 실행할 수 있도록 편리한 별칭을 설정하세요:"

  pro:
    _root:
      title: "🚀 전문가용 고급 Git 명령어"
    git_filter_repo:
      desc: "Git 기록을 다시 작성하여 파일, 작성자, 경로를 제거하거나 수정할 수 있는 강력하고 빠른 도구. `git filter-branch`를 대체하며 속도와 안전성이 향상됨"
      ex1: "`git filter-branch`의 성능 문제 없이 민감한 파일이나 디렉터리를 효율적으로 제거. 주의하여 사용"
      ex2: "전체 기록에서 문자열 또는 패턴을 일괄 교체 (예: 자격 증명 제거)"
      ex3: "하위 디렉터리 기록을 새로운 저장소로 추출하면서 커밋 메타데이터 보존"
    git_worktree:
      desc: "단일 저장소에 연결된 여러 작업 디렉터리를 관리하여 다른 브랜치에서 동시에 작업 가능 (추가 클론 불필요)"
      ex1: "같은 저장소에 추가 작업 트리 생성 → 병렬 브랜치 체크아웃 가능"
      ex2: "활성 worktree 목록, 경로, 연결된 브랜치 표시"
      ex3: "더 이상 필요하지 않은 worktree 제거 (작업 디렉터리 안전 정리)"
    git_replace:
      desc: "기존 객체를 대체하는 임시 참조 생성 → 로컬 기록을 파괴하지 않고 조작 및 테스트 가능"
      ex1: "로컬 저장소에서 한 커밋을 다른 커밋으로 임시 교체 (테스트/패치에 유용)"
      ex2: "활성 대체 참조 표시"
      ex3: "특정 대체 참조 삭제하여 원래 동작 복원"
    git_stash_adv:
      desc: "커밋되지 않은 변경을 스택에 임시 저장하여 미완성 작업을 커밋하지 않고도 컨텍스트 전환 가능"
      ex1: "변경사항 일부만 선택적으로 stash → 세밀한 제어 가능"
      ex2: "식별을 쉽게 하기 위해 사용자 지정 메시지와 함께 stash 생성"
      ex3: "stash 목록에서 특정 stash 적용 (삭제하지 않음)"
    git_rebase_adv:
      desc: "커밋을 다른 기반 위로 다시 적용 → 더 깔끔하고 선형적인 기록 유지 및 인터랙티브 편집 가능"
      ex1: "fixup/squash 표시된 커밋을 자동으로 재정렬·병합하는 인터랙티브 rebase 시작"
      ex2: "push 전에 커밋 이력을 정리하기 위해 fixup/squash 자동 병합"
      ex3: "인터랙티브 rebase에서 자동 squash될 fixup 커밋 생성"
      ex4: "리베이스 시 특정 커밋과 병합될 squash 커밋 생성"
    git_bisect_pro:
      desc: "이진 검색을 통해 버그를 도입한 커밋을 효율적으로 식별. 커밋들을 순차적으로 테스트하여 문제 narrowing"
      ex1: "각 커밋에서 지정된 테스트 스크립트를 실행해 bisect 자동화 → 수동 개입 없이 빠르게 문제 커밋 찾기"
      ex2: "자동화된 테스트 스크립트로 bisect를 실행하여 버그 식별 속도 향상"
      ex3: "그래픽 도구로 bisect 과정 시각화"
      ex4: "bisect 모드 종료 후 원래 HEAD로 복원"
    git_commit_pro:
      desc: "amend, sign, fixup, 메시지 커스터마이즈 옵션을 사용해 고품질 프로젝트 기록 유지"
      ex1: "GPG 키로 서명된 커밋 생성 → 커밋의 진위성과 작성자 검증 가능"
      ex2: "GPG 키로 커밋 암호화 서명 → 무결성과 작성자 신뢰성 보장"
      ex3: "커밋 서명에 사용할 GPG 키를 전역으로 설정"
      ex4: "커밋의 GPG 서명 정보 확인 및 표시"
    git_reflog_pro:
      desc: "HEAD와 브랜치 업데이트 기록(reflog) 유지 → 잃어버린 커밋 복구 및 로컬 기록 추적에 필수"
      ex1: "reflog에서 이전 상태로 브랜치 리셋하여 변경 복구 또는 되돌리기"
      ex2: "모든 reflog 항목을 즉시 만료시켜 기록 정리 (주의 필요)"

  pro_tips:
    _root:
      title: "🧰 전문가 워크플로우 팁 및 자동화"
    columns:
      topic: "주제"
      commands_example: "명령어 / 예시"
      explanation_tips: "설명 및 전문가 팁"
    aggressive_cleanup:
      topic: "강력한 저장소 정리"
      desc: "깊은 garbage collection 수행 및 접근 불가 객체 즉시 제거 → 저장소 최적화. 유지보수 시 사용"
    parallel_worktrees:
      topic: "병렬 브랜치 Worktree"
      desc: "여러 작업 트리를 유지하여 동시에 기능 개발 가능, 클론 오버헤드 방지"
    linear_history:
      topic: "깔끔하고 선형적인 기록"
      desc: "push 전에 autosquash 옵션으로 인터랙티브 rebase 실행 → 기록을 깔끔하고 읽기 쉽게 유지"
    secure_commits:
      topic: "보안 커밋"
      desc: "GPG로 커밋 서명 → 공유 저장소에서 신뢰성 향상 (엔터프라이즈 환경에서 필수)"
    automated_bisect:
      topic: "자동화된 Bisect"
      desc: "bisect 과정에서 각 커밋마다 테스트 스크립트를 실행해 버그 헌팅 자동화"
    conflict_cache:
      topic: "충돌 해결 캐시"
      desc: "충돌 해결 결과를 재사용 가능하게 하여 반복되는 merge/rebase 충돌 처리 속도 향상"
    shared_aliases_hooks:
      topic: "공유 별칭 및 Hooks"
      desc: "공유 저장소 또는 CI 파이프라인에 공통 Git 별칭 및 커밋 hook 저장 → 팀 표준화 및 생산성 향상"

  resources:
    _root:
      title: "추가 자료"
    tip:
      title: "🧠 **팁**"
      desc: "모든 것을 외우려 하지 마세요. `--help`를 사용하고, 탐색하며, 정기적으로 연습하세요:"
    links:
      title: "🌐 유용한 링크"
      official_docs: "📘 **Git 공식 문서** — 모든 Git 명령어에 대한 상세 매뉴얼:"
      learn_branching: "📙 **Learn Git Branching** — 브랜치 개념을 익히기 위한 대화형 시각 튜토리얼:"
      pro_git_book: "📕 **Pro Git 책** (무료, Scott Chacon & Ben Straub 저):"
      official_cheatsheet: "📗 **Git 치트 시트** (공식 간결 참고자료):"
