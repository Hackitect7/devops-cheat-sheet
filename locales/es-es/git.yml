git:
  meta:
    _root:
      title: "üêô Git y GitHub CLI"
      desc: "Comandos b√°sicos y avanzados de Git para control de versiones, ramas, repos remotos, stash, etiquetas y GitHub CLI."

  basic:
    _root:
      title: "üîπ Comandos B√°sicos"
    git_add:
      desc: "A√±adir un archivo al √°rea de preparaci√≥n (staging)"
      ex1: "Preparar un archivo espec√≠fico para el pr√≥ximo commit"
      ex2: "Preparar todos los cambios en el directorio actual y sus subdirectorios"
      ex3: "Elegir interactivamente qu√© partes de los archivos preparar (√∫til para commits parciales)"
    git_clone:
      desc: "Clonar un repositorio en un nuevo directorio"
      ex1: "Clonar solo la rama especificada (en lugar de la predeterminada)"
      ex2: "Clonar solo el √∫ltimo commit, creando una copia superficial para ahorrar tiempo y espacio"
    git_commit:
      desc: "Registrar cambios en el repositorio"
      ex1: "Hacer commit con un mensaje sin abrir el editor"
      ex2: "Preparar y hacer commit de todos los archivos modificados rastreados con un mensaje"
      ex3: "Actualizar el √∫ltimo commit (cambiar mensaje o incluir m√°s cambios)"
      ex4: "Crear un commit de correcci√≥n (fixup) para aplastarlo autom√°ticamente m√°s tarde durante un rebase interactivo"
    git_config:
      desc: "Obtener y establecer opciones del repositorio o globales"
      ex1: "Configurar el nombre de usuario global de Git"
      ex2: "Configurar el correo electr√≥nico global de Git"
      ex3: "Listar todas las configuraciones de Git (nombre, email, editor, etc.)"
    git_diff:
      desc: "Mostrar cambios entre commits, entre commit y el √°rbol de trabajo, etc."
      ex1: "Mostrar lo que cambiaste desde el √∫ltimo commit (cambios no preparados)"
      ex2: "Mostrar lo que se incluir√° en el pr√≥ximo commit"
      ex3: "Mostrar cambios con diferencias a nivel de palabra"
    git_grep:
      desc: "Buscar dentro de los archivos del repositorio"
      ex1: "Encontrar todas las menciones de `functionName` en todos los archivos del proyecto"
      ex2: "Encontrar l√≠neas que contengan `TODO` y mostrar n√∫meros de l√≠nea (√∫til para localizar notas en el c√≥digo)"
      ex3: "Buscar la palabra `login` sin distinci√≥n de may√∫sculas/min√∫sculas (coincide con `Login`, `LOGIN`, `login`, etc.)"
    git_init:
      desc: "Crear un repositorio Git vac√≠o o reinicializar uno existente"
      ex1: "Inicializar un nuevo repositorio en el directorio my-project"
      ex2: "Inicializar un repositorio bare (desnudo)"
    git_log:
      desc: "Mostrar el historial de commits"
      ex1: "Mostrar el historial en un formato compacto de una sola l√≠nea"
      ex2: "Mostrar todas las ramas en un gr√°fico visual de commits"
      ex3: "Mostrar parches y estad√≠sticas de cambios en archivos para los commits"
    git_reset:
      desc: "Quitar archivos del √°rea de preparaci√≥n, manteniendo los cambios en el directorio de trabajo"
      ex1: "Quitar un archivo del √°rea de preparaci√≥n (mantiene tus ediciones)"
      ex2: "Volver un commit atr√°s y borrar todos los cambios (¬°irreversible!)"
      ex3: "Deshacer el √∫ltimo commit pero mantener los cambios listos para volver a hacer commit"
      ex4: "Deshacer un commit pero mantener los cambios sin preparar en el directorio de trabajo"
    git_show:
      desc: "Mostrar varios tipos de objetos"
      ex1: "Mostrar cambios y mensaje de un commit espec√≠fico"
      ex2: "Mostrar el commit anterior al actual"
      ex3: "Mostrar un resumen de los cambios en archivos del √∫ltimo commit"
    git_status:
      desc: "Mostrar el estado del √°rbol de trabajo"
      ex1: "Mostrar el estado en formato corto"
      ex2: "Mostrar la rama actual y el estado de los archivos"

  branching_merging:
    _root:
      title: "üåø Ramas y Fusiones"
    git_branch:
      desc: "Crear, listar o eliminar ramas"
      ex1: "Crear una nueva rama llamada `new-feature`"
      ex2: "Eliminar una rama local llamada `old-feature`"
    git_checkout:
      desc: "Cambiar de rama o restaurar archivos desde otro commit"
      ex1: "Cambiar a la rama `main`"
      ex2: "Crear y cambiar a una nueva rama llamada `new-branch`"
    git_switch:
      desc: "Cambiar de rama (alternativa simplificada a `checkout`)"
      ex1: "Cambiar a la rama `main`"
      ex2: "Crear y cambiar a una nueva rama llamada `feature-x`"
      ex3: "Cambiar a una rama existente llamada `new-feature`"
    git_merge:
      desc: "Combinar cambios de otra rama en la rama actual"
      ex1: "Fusionar la rama `new-feature` en la rama actual"
      ex2: "Forzar la creaci√≥n de un commit de fusi√≥n (incluso si es posible fast-forward)"
      ex3: "Cancelar la fusi√≥n y revertir cambios si ocurren conflictos"
    git_rebase:
      desc: "Mover o reaplicar commits sobre un nuevo commit base"
      ex1: "Reaplicar tus commits de la rama encima de la rama `main`"
      ex2: "Editar interactivamente los √∫ltimos 3 commits"
      ex3: "Detener y deshacer un rebase en curso"
      ex4: "Aplastar autom√°ticamente commits marcados como fixup o squash durante el rebase interactivo"
    git_cherry_pick:
      desc: "Aplicar commits espec√≠ficos de otra rama"
      ex1: "Aplicar un commit espec√≠fico (por hash) a la rama actual"
      ex2: "Continuar cherry-pick despu√©s de resolver conflictos"
      ex3: "Aplicar un rango de commits desde `A` (excluido) hasta `B` (incluido)"

  remote:
    _root:
      title: "üì° Repositorios Remotos"
    git_remote:
      desc: "Gestionar enlaces a repositorios remotos (como GitHub)"
      ex1: "Mostrar nombres remotos y sus URLs"
      ex2: "A√±adir un repositorio remoto llamado `origin`"
    git_pull:
      desc: "Descargar y fusionar autom√°ticamente cambios de una rama remota"
      ex1: "Traer y fusionar cambios de la rama remota `main` en tu rama actual"
      ex2: "Traer y rebasar tu rama actual sobre la rama remota en lugar de fusionar"
    git_push:
      desc: "Subir tus cambios locales a un repositorio remoto"
      ex1: "Enviar tu rama local `main` al remoto `origin`"
    git_fetch:
      desc: "Descargar cambios del remoto sin fusionarlos"
      ex1: "Traer todas las actualizaciones del remoto `origin`, pero sin aplicarlas a√∫n"
      ex2: "Traer solo la rama `main` del remoto"
      ex3: "Traer actualizaciones de todos los remotos"
      ex4: "Limpiar ramas eliminadas ‚Äî quitar referencias locales a ramas eliminadas remotamente"
      ex5: "Mostrar qu√© se traer√≠a, sin descargar nada realmente"
      ex6: "Actualizar forzosamente tu rama de seguimiento local (`origin/main`), sobrescribiendo conflictos"

  stash_cleanup:
    _root:
      title: "üì¶ Stash y Limpieza"
    git_stash:
      desc: "Guardar temporalmente cambios no confirmados (trabajo en progreso)"
      ex1: "Guardar archivos modificados y preparados, luego revertir el directorio de trabajo al √∫ltimo commit"
      ex2: "Reaplicar los √∫ltimos cambios guardados (el stash permanece guardado)"
      ex3: "Reaplicar y eliminar el √∫ltimo stash"
      ex4: "Mostrar lista de todos los cambios guardados en stash"
      ex5: "Crear una nueva rama y aplicar el √∫ltimo stash en ella"
    git_clean:
      desc: "Eliminar permanentemente archivos no rastreados (fuera de Git)"
      ex1: "Eliminar archivos no rastreados en el directorio actual"
      ex2: "Eliminar archivos y carpetas no rastreados"
      ex3: "Previsualizar lo que se eliminar√° (ejecuci√≥n en modo seguro)"

  tags:
    _root:
      title: "üè∑Ô∏è Etiquetas"
    git_tag:
      desc: "Crear, listar o eliminar etiquetas para marcar puntos espec√≠ficos en la historia (como versiones)"
      ex1: "Crear una etiqueta anotada llamada `v1.0` con un mensaje (se guarda como objeto completo en Git, bueno para lanzamientos)"
      ex2: "Eliminar la etiqueta local llamada `v1.0` (no afecta al remoto)"
    git_push:
      desc: "Subir commits, ramas y etiquetas del local al remoto"
      ex1: "Enviar todas las etiquetas locales al remoto (√∫til despu√©s de etiquetar varias versiones)"
      ex2: "Enviar una etiqueta espec√≠fica (p. ej., `v1.0`) al repositorio remoto"
      ex3: "Eliminar la etiqueta remota `v1.0` (nota la sintaxis con dos puntos)"

  conflicts:
    _root:
      title: "üõ†Ô∏è Resoluci√≥n de Conflictos"
    git_mergetool:
      desc: "Abrir una herramienta visual para ayudar a resolver conflictos de fusi√≥n"
      ex1: "Usar una herramienta de fusi√≥n espec√≠fica (como Meld) para resolver conflictos"
    git_rerere:
      desc: "Permitir que Git recuerde c√≥mo resolviste conflictos de fusi√≥n antes"
      ex1: "Habilitar la reutilizaci√≥n autom√°tica de resoluciones de conflictos pasadas"
      ex2: "Mostrar qu√© archivos tienen resoluciones de conflicto guardadas"
      ex3: "Mostrar qu√© cambios guard√≥ Git para reutilizarlos en el futuro"

  advanced:
    _root:
      title: "‚öôÔ∏è Comandos Avanzados"
    git_bisect:
      desc: "Usar b√∫squeda binaria para encontrar el commit que introdujo un error"
      ex1: "Iniciar una b√∫squeda binaria entre un commit bueno conocido y uno malo para localizar un error"
      ex2: 'Marcar el commit actual como "malo" (contiene el error)'
      ex3: 'Marcar un commit conocido como "bueno" donde no exist√≠a el error'
    git_blame:
      desc: "Mostrar qui√©n modific√≥ por √∫ltima vez cada l√≠nea de un archivo, con revisi√≥n y autor"
      ex1: "Mostrar el autor e informaci√≥n de commit para cada l√≠nea del archivo"
      ex2: "Mostrar informaci√≥n de blame solo para las l√≠neas de la 10 a la 20"
      ex3: "Mostrar correos electr√≥nicos de los autores junto a los cambios de l√≠nea"
    git_reflog:
      desc: "Ver y gestionar el registro de referencias (reflog) de movimientos de ramas y HEAD"
      ex1: "Ver d√≥nde apuntaba la rama `main` hace una semana"
      ex2: "Previsualizar qu√© entradas del reflog de m√°s de 30 d√≠as pueden limpiarse (sin cambios reales)"
      ex3: "Eliminar una entrada espec√≠fica del reflog (usar con cuidado, ya que puede afectar la recuperaci√≥n)"
    git_submodule:
      desc: "A√±adir, inicializar, actualizar o inspeccionar subm√≥dulos (repositorios dentro de repositorios)"
      ex1: "A√±adir un repositorio externo como subm√≥dulo en la ruta especificada"
      ex2: "Inicializar y descargar todos los subm√≥dulos listados en el repositorio"
      ex3: "Ejecutar `git pull` dentro de cada subm√≥dulo para actualizarlos a su √∫ltimo commit"
      ex4: "Sincronizar URLs de subm√≥dulos despu√©s de cambios en el archivo `.gitmodules`"
      ex5: "Actualizar subm√≥dulos al √∫ltimo commit de sus ramas remotas"
    git_archive:
      desc: "Crear un archivo comprimido (zip, tar, etc.) de archivos de un commit o rama espec√≠fica"
      ex1: "Crear un archivo ZIP de los archivos actuales del proyecto en HEAD"
      ex2: "Crear un archivo `.tar.gz` comprimido desde el HEAD actual"
      ex3: "Crear un archivo `.tar.gz` comprimido del proyecto actual, colocando todos los archivos dentro de una carpeta llamada `project/` dentro del archivo"
    git_gc:
      desc: "Limpiar archivos innecesarios y optimizar el repositorio para mejorar rendimiento"
      ex1: "Realizar una limpieza y optimizaci√≥n profunda (puede ser lenta pero efectiva)"
      ex2: "Eliminar todos los objetos inalcanzables inmediatamente (peligroso si no est√°s seguro)"
    git_shortlog:
      desc: "Resumen r√°pido de autores y sus commits"
      ex1: "Mostrar una lista de autores con sus correos electr√≥nicos (p. ej., para analizar qui√©n contribuy√≥ y cu√°nto)"
      ex2: "Mostrar cu√°ntos commits hizo cada autor, ordenados por n√∫mero de commits"
      ex3: "Igual que el anterior, pero tambi√©n incluye nombres y correos electr√≥nicos ‚Äî √∫til para un seguimiento detallado de la actividad"
    git_revert:
      desc: "Crear un nuevo commit que deshace cambios de un commit anterior sin reescribir la historia"
      ex1: "Deshacer el √∫ltimo commit creando uno nuevo que revierta sus cambios"
      ex2: "Deshacer un commit espec√≠fico por hash, agregando de forma segura un nuevo commit que lo revierta"

  gh:
    _root:
      title: "üêô GitHub CLI"
      note: "`gh` te permite gestionar GitHub desde la terminal."
    gh_auth_login:
      desc: "Autent√≠cate con un host de GitHub para permitir que los comandos CLI interact√∫en con tu cuenta"
      ex1: "Autenticar usando un token de acceso personal almacenado en un archivo (`mytoken.txt`)"
      ex2: "Autenticar en un servidor de GitHub Enterprise (no github.com)"
    gh_repo_clone:
      desc: "Clonar un repositorio de GitHub en tu m√°quina local"
      ex1: "Clonar el repositorio `repo` propiedad de `user` en una carpeta llamada `repo`"
      ex2: "Clonar el repositorio pero solo descargar el √∫ltimo commit para una clonaci√≥n m√°s r√°pida y ligera"
      ex3: "Clonar el repositorio en una carpeta personalizada `workspace/cli`"
    gh_issue_list:
      desc: "Listar issues en un repositorio de GitHub, opcionalmente filtrados por varios criterios"
      ex1: "Listar issues asignados a ti"
      ex2: "Listar issues sin importar el estado (abiertos o cerrados)"
      ex3: 'Listar issues que coincidan con "error", sin asignar, ordenados por fecha de creaci√≥n ascendente'
    gh_pr_create:
      desc: "Crear una pull request en GitHub mediante CLI"
      ex1: "Crear una pull request con el t√≠tulo dado"
      ex2: 'Vincular la pull request a un proyecto de GitHub llamado "Roadmap"'
      ex3: "Crear una PR desde la rama `feature` en el fork `monalisa` hacia la rama `develop`"
    gh_repo_create:
      desc: "Crear un nuevo repositorio de GitHub desde CLI"
      ex1: "Crear un nuevo repositorio llamado `my-project` en GitHub (seguido de preguntas interactivas)"
      ex2: "Crear un repositorio p√∫blico y clonarlo localmente"
      ex3: "Crear un repositorio remoto privado desde la carpeta actual y a√±adir el remoto llamado `upstream`"

  aliases:
    _root:
      title: "üí° Alias de Git (Atajos √ötiles)"
      intro: "Configura alias convenientes para acelerar los comandos Git m√°s comunes:"

  pro:
    _root:
      title: "üöÄ Comandos Avanzados de Git para Profesionales"
    git_filter_repo:
      desc: "Una herramienta potente y eficiente para reescribir el historial de Git para eliminar o modificar archivos, autor√≠as o rutas; reemplaza `git filter-branch` con m√°s velocidad y seguridad"
      ex1: "Reescribir eficientemente el historial del repositorio para eliminar archivos o directorios sensibles sin los problemas de rendimiento de `git filter-branch`. Usar con cuidado"
      ex2: "Reemplazar en bloque cadenas o patrones en todo el historial (p. ej., sanitizar credenciales)"
      ex3: "Extraer el historial de un subdirectorio en un nuevo repositorio, preservando la metadata de commits"
    git_worktree:
      desc: "Gestionar m√∫ltiples directorios de trabajo vinculados a un solo repositorio, permitiendo trabajo concurrente en diferentes ramas sin clonar"
      ex1: "Crear un directorio de trabajo adicional vinculado al mismo repositorio, permitiendo checkouts paralelos de ramas sin clones"
      ex2: "Listar todos los worktrees activos, sus rutas y ramas asociadas"
      ex3: "Eliminar un worktree vinculado cuando ya no se necesite, limpiando directorios de forma segura"
    git_replace:
      desc: "Crear referencias temporales que reemplazan objetos existentes, permitiendo manipulaci√≥n local no destructiva del historial y pruebas"
      ex1: "Intercambiar temporalmente un commit por otro en tu repo local, √∫til para pruebas o parches sin reescribir historial"
      ex2: "Mostrar todas las referencias de reemplazo activas"
      ex3: "Eliminar una referencia de reemplazo espec√≠fica para revertir el comportamiento"
    git_stash_adv:
      desc: "Guardar temporalmente cambios no confirmados en una pila, permitiendo cambios de contexto sin hacer commit de trabajo incompleto"
      ex1: "Seleccionar interactivamente fragmentos de cambios para guardar en stash, con control granular sobre lo que se guarda"
      ex2: "Crear un stash con un mensaje personalizado para identificarlo f√°cilmente"
      ex3: "Aplicar un stash espec√≠fico de la lista, sin eliminarlo"
    git_rebase_adv:
      desc: "Reaplicar commits sobre otra base, facilitando un historial m√°s limpio y lineal y edici√≥n interactiva del historial"
      ex1: "Iniciar una sesi√≥n de rebase interactivo que reordena y aplasta autom√°ticamente commits marcados como fixup o squash, limpiando el historial"
      ex2: "Reordenar y aplastar autom√°ticamente commits marcados como fixup o squash antes de hacer push"
      ex3: "Crear un commit fixup que se autosquashar√° durante el rebase interactivo"
      ex4: "Crear un commit squash para combinarlo con un commit espec√≠fico en el rebase"
    git_bisect_pro:
      desc: "Herramienta de b√∫squeda binaria para identificar eficientemente el commit que introdujo un error probando sucesivos commits y acotando el cambio defectuoso"
      ex1: "Automatizar el proceso de bisect ejecutando un script de prueba en cada commit para identificar r√°pidamente el commit defectuoso sin intervenci√≥n manual"
      ex2: "Automatizar la b√∫squeda ejecutando un script de prueba en cada commit, acelerando la identificaci√≥n del bug"
      ex3: "Abrir una herramienta gr√°fica para visualizar el proceso de bisecci√≥n"
      ex4: "Salir del modo bisect y volver al HEAD original"
    git_commit_pro:
      desc: "Registrar cambios en el repositorio con opciones avanzadas para enmienda, firma, fixup y personalizaci√≥n de mensajes, manteniendo un historial de calidad"
      ex1: "Crear un commit firmado con tu clave GPG para asegurar verificaci√≥n criptogr√°fica de autenticidad y autor√≠a"
      ex2: "Firmar criptogr√°ficamente tus commits con tu clave GPG, asegurando integridad y verificaci√≥n de autor√≠a"
      ex3: "Configurar la clave GPG usada para firmar commits de forma global"
      ex4: "Verificar y mostrar informaci√≥n de firmas GPG en los commits"
    git_reflog_pro:
      desc: "Mantener un registro de actualizaciones de HEAD y ramas, esencial para recuperar commits perdidos y entender movimientos locales"
      ex1: "Resetear la rama actual a un estado previo desde el reflog para recuperar o deshacer cambios"
      ex2: "Expirar inmediatamente todas las entradas del reflog, limpiando el historial (usar con precauci√≥n)"

  pro_tips:
    _root:
      title: "üß∞ Consejos de Flujo de Trabajo y Automatizaci√≥n Pro"
    columns:
      topic: "Tema"
      commands_example: "Comandos / Ejemplo"
      explanation_tips: "Explicaci√≥n y Consejos Pro"
    aggressive_cleanup:
      topic: "Limpieza Agresiva de Repositorios"
      desc: "Realiza una recolecci√≥n de basura profunda y poda objetos inalcanzables inmediatamente para optimizar el repositorio. Usar en ventanas de mantenimiento"
    parallel_worktrees:
      topic: "Worktrees Paralelos de Ramas"
      desc: "Mantener m√∫ltiples directorios de trabajo para desarrollo simult√°neo de funcionalidades, evitando la sobrecarga de clones"
    linear_history:
      topic: "Historial Limpio y Lineal"
      desc: "Antes de hacer push, rebasar interactivamente con autosquash para mantener un historial limpio y legible"
    secure_commits:
      topic: "Commits Seguros"
      desc: "Firmar commits con GPG para aumentar la confianza en repos compartidos, obligatorio en muchos entornos empresariales"
    automated_bisect:
      topic: "Bisecci√≥n Automatizada"
      desc: "Automatizar la b√∫squeda de bugs ejecutando un script de prueba en cada commit candidato durante bisect"
    conflict_cache:
      topic: "Cach√© de Resoluci√≥n de Conflictos"
      desc: "Habilitar la reutilizaci√≥n de resoluciones de conflictos para acelerar la resoluci√≥n repetida en rebases o merges"
    shared_aliases_hooks:
      topic: "Alias y Hooks Compartidos"
      desc: "Almacenar alias de Git comunes y hooks de commit en un repositorio compartido o pipeline CI para reforzar est√°ndares de equipo y productividad"

  resources:
    _root:
      title: "Recursos adicionales"
    tip:
      title: "üß† **Consejo**"
      desc: "No intentes memorizar todo. Usa `--help`, explora y practica regularmente:"
    links:
      title: "üåê Enlaces √∫tiles"
      official_docs: "üìò **Documentaci√≥n oficial de Git** ‚Äî manual detallado de todos los comandos Git:"
      learn_branching: "üìô **Learn Git Branching** ‚Äî tutorial visual interactivo para dominar conceptos de ramas:"
      pro_git_book: "üìï **Libro Pro Git** (gratuito, de Scott Chacon & Ben Straub):"
      official_cheatsheet: "üìó **Chuleta oficial de Git** (referencia concisa oficial):"
