git:
  meta:
    _root:
      title: "üêô Git and GitHub CLI"
      desc: "Basic and advanced Git commands for version control, branching, remote repositories, stash, tags, and the GitHub CLI."

  basic:
    _root:
      title: "üîπ Basic Commands"
    git_add:
      desc: "Add a file to the staging area"
      ex1: "Stage a specific file for the next commit"
      ex2: "Stage all changes in the current folder and below"
      ex3: "Interactively choose which parts of files to stage (useful for partial commits)"
    git_clone:
      desc: "Clone a repository into a new folder"
      ex1: "Clone only the specified branch (instead of the default)"
      ex2: "Clone only the latest commit, making a shallow copy to save time and space"
    git_commit:
      desc: "Record changes to the repository"
      ex1: "Commit with a message without opening the editor"
      ex2: "Stage and commit all modified tracked files with a message"
      ex3: "Amend the last commit (change message or include more changes)"
      ex4: "Create a fix-up commit to be squashed automatically during interactive rebase"
    git_config:
      desc: "View and set repository or global options"
      ex1: "Set global Git username"
      ex2: "Set global Git email"
      ex3: "List all Git settings (name, email, editor, etc.)"
    git_diff:
      desc: "Show differences between commits, or between a commit and the working tree"
      ex1: "Show what you have changed since the last commit (unstaged changes)"
      ex2: "Show what will be included in the next commit"
      ex3: "Show changes with word-level differences"
    git_grep:
      desc: "Search inside repository files"
      ex1: "Find all mentions of `functionName` in project files"
      ex2: "Find lines containing `TODO` and display line numbers (useful for code notes)"
      ex3: "Search for the word `login` case-insensitively (matches `Login`, `LOGIN`, `login`, etc.)"
    git_init:
      desc: "Create an empty Git repository or reinitialise an existing one"
      ex1: "Initialise a new repo in folder my-project"
      ex2: "Initialise a bare repository"
    git_log:
      desc: "Show commit logs"
      ex1: "Display commit history in a compact one-line format"
      ex2: "Show all branches in a visual graph of commits"
      ex3: "Show patch and file change statistics for commits"
    git_reset:
      desc: "Unstage files while keeping changes in the working directory"
      ex1: "Remove a file from staging (keeps your edits)"
      ex2: "Revert one commit and delete all changes (irreversible!)"
      ex3: "Undo the last commit but keep the changes staged"
      ex4: "Undo a commit but keep changes unstaged in the working directory"
    git_show:
      desc: "Display information about various Git objects"
      ex1: "Show changes and the message of a specific commit"
      ex2: "Show the previous commit before the current one"
      ex3: "Show a summary of file changes for the latest commit"
    git_status:
      desc: "Display the working tree status"
      ex1: "Show status in short format"
      ex2: "Show current branch and file statuses"

  branching_merging:
    _root:
      title: "üåø Branching and Merging"
    git_branch:
      desc: "Create, list, or delete branches"
      ex1: "Create a new branch called `new-feature`"
      ex2: "Delete a local branch named `old-feature`"
    git_checkout:
      desc: "Switch branches or restore files from another commit"
      ex1: "Switch to the `main` branch"
      ex2: "Create and switch to a new branch named `new-branch`"
    git_switch:
      desc: "Switch branches (simplified alternative to `checkout`)"
      ex1: "Switch to the `main` branch"
      ex2: "Create and switch to a new branch named `feature-x`"
      ex3: "Switch to an existing branch named `new-feature`"
    git_merge:
      desc: "Merge changes from another branch into the current one"
      ex1: "Merge the `new-feature` branch into the current branch"
      ex2: "Always create a merge commit (even if fast-forward is possible)"
      ex3: "Cancel the merge and revert changes if conflicts occur"
    git_rebase:
      desc: "Reapply commits on top of a new base commit"
      ex1: "Rebase your branch on top of the `main` branch"
      ex2: "Interactively edit the last 3 commits"
      ex3: "Abort and undo an in-progress rebase"
      ex4: "Automatically squash fix-up or squash commits during interactive rebase"
    git_cherry_pick:
      desc: "Apply specific commits from another branch"
      ex1: "Apply a specific commit (by hash) to the current branch"
      ex2: "Continue cherry-pick after resolving conflicts"
      ex3: "Apply a range of commits from `A` (excluding) to `B` (including)"

  remote:
    _root:
      title: "üì° Remote Repositories"
    git_remote:
      desc: "Manage links to remote repositories (e.g. GitHub)"
      ex1: "List remote names and their URLs"
      ex2: "Add a remote repository named `origin`"
    git_pull:
      desc: "Download and automatically merge changes from a remote branch"
      ex1: "Fetch and merge changes from the remote `main` branch into your current branch"
      ex2: "Fetch and rebase your current branch on top of the remote branch instead of merging"
    git_push:
      desc: "Upload your local changes to a remote repository"
      ex1: "Push your local `main` branch to the remote `origin`"
    git_fetch:
      desc: "Download changes from remote without merging"
      ex1: "Fetch all updates from `origin`, but do not apply them yet"
      ex2: "Fetch only the `main` branch from remote"
      ex3: "Fetch updates from all remotes"
      ex4: "Clean up deleted branches ‚Äî remove local refs to branches deleted remotely"
      ex5: "Show what would be fetched, without actually downloading anything"
      ex6: "Forcefully update your local tracking branch (`origin/main`), overwriting conflicts"

  stash_cleanup:
    _root:
      title: "üì¶ Stash and Clean-up"
    git_stash:
      desc: "Temporarily save uncommitted changes (work in progress)"
      ex1: "Save modified and staged files, then revert the working directory to the last commit"
      ex2: "Reapply the latest stashed changes (stash remains saved)"
      ex3: "Reapply and remove the latest stash"
      ex4: "List all stashed changes"
      ex5: "Create a new branch and apply the latest stash to it"
    git_clean:
      desc: "Permanently delete untracked files (not in Git)"
      ex1: "Delete untracked files in the current folder"
      ex2: "Delete untracked files and folders"
      ex3: "Preview what will be deleted (safe dry run)"

  tags:
    _root:
      title: "üè∑Ô∏è Tags"
    git_tag:
      desc: "Create, list, or delete tags to mark specific points in history (e.g. releases)"
      ex1: "Create an annotated tag named `v1.0` with a message (stored as a full Git object, good for releases)"
      ex2: "Delete the local tag named `v1.0` (does not affect remote)"
    git_push:
      desc: "Upload commits, branches, and tags from local to remote repository"
      ex1: "Push all local tags to remote (useful after tagging multiple versions)"
      ex2: "Push a specific tag (e.g. `v1.0`) to the remote repository"
      ex3: "Delete the remote tag `v1.0` (note the colon syntax)"

  conflicts:
    _root:
      title: "üõ†Ô∏è Conflict Resolution"
    git_mergetool:
      desc: "Open a visual tool to assist with resolving merge conflicts"
      ex1: "Use a specific merge tool (such as Meld) to fix conflicts"
    git_rerere:
      desc: "Allow Git to remember how you resolved merge conflicts previously"
      ex1: "Enable automatic reuse of past conflict resolutions"
      ex2: "Show which files have saved conflict resolutions"
      ex3: "Display what changes Git saved for future reuse"

  advanced:
    _root:
      title: "‚öôÔ∏è Advanced Commands"
    git_bisect:
      desc: "Use binary search to identify the commit that introduced a bug"
      ex1: "Start a binary search between a known good and a bad commit to locate a bug"
      ex2: "Mark the current commit as 'bad' (contains the bug)"
      ex3: "Mark a known 'good' commit where the bug did not exist"
    git_blame:
      desc: "Show who last modified each line of a file, with revision and author"
      ex1: "Show the author and commit information for every line in the file"
      ex2: "Display blame information only for lines 10 to 20"
      ex3: "Show authors‚Äô email addresses alongside line changes"
    git_reflog:
      desc: "View and manage the reference log (reflog) of branch movements and HEAD"
      ex1: "See where the `main` branch pointed one week ago"
      ex2: "Preview which reflog entries older than 30 days can be cleaned (no changes made)"
      ex3: "Delete a specific reflog entry (use carefully, as it may affect recovery)"
    git_submodule:
      desc: "Add, initialise, update, or inspect submodules (repositories inside repositories)"
      ex1: "Add an external repository as a submodule in the specified path"
      ex2: "Initialise and download all submodules listed in the repository"
      ex3: "Run `git pull` inside each submodule to update them to their latest commit"
      ex4: "Synchronise submodule URLs after changes in the `.gitmodules` file"
      ex5: "Update submodules to the latest commit from their remote branches"
    git_archive:
      desc: "Create an archive (ZIP, TAR, etc.) of files from a specific commit or branch"
      ex1: "Create a ZIP archive of the current project files at HEAD"
      ex2: "Create a compressed `.tar.gz` archive from the current HEAD"
      ex3: "Create a compressed `.tar.gz` archive of the current project, placing all files inside a folder named `project/`"
    git_gc:
      desc: "Clean up unnecessary files and optimise the repository for performance"
      ex1: "Perform a thorough clean-up and optimisation (can be slow but effective)"
      ex2: "Remove all unreachable objects immediately (dangerous if unsure)"
    git_shortlog:
      desc: "Quick summary of authors and their commits"
      ex1: "List authors with their email addresses (e.g. to analyse who contributed and how much)"
      ex2: "Show how many commits each author made, sorted by number of commits"
      ex3: "Same as above, but also include names and email addresses ‚Äî useful for detailed activity tracking"
    git_revert:
      desc: "Create a new commit that undoes changes from a previous commit without rewriting history"
      ex1: "Undo the last commit by creating a new commit that reverses its changes"
      ex2: "Undo a specific commit by hash, safely adding a new commit that reverses it"
  gh:
    _root:
      title: "üêô GitHub CLI"
      note: "`gh` allows you to manage GitHub directly from the terminal."
    gh_auth_login:
      desc: "Authenticate with a GitHub host to enable CLI commands to interact with your account"
      ex1: "Authenticate using a personal access token stored in a file (`mytoken.txt`)"
      ex2: "Authenticate against a GitHub Enterprise server (not github.com)"
    gh_repo_clone:
      desc: "Clone a GitHub repository to your local machine"
      ex1: "Clone the repository `repo` owned by `user` into a folder named `repo`"
      ex2: "Clone the repository but only download the latest commit for a faster, smaller clone"
      ex3: "Clone the repository into a custom folder `workspace/cli`"
    gh_issue_list:
      desc: "List issues in a GitHub repository, optionally filtered by various criteria"
      ex1: "List issues assigned to you"
      ex2: "List issues regardless of state (open or closed)"
      ex3: "List issues matching \"error\", unassigned, sorted by creation date (ascending)"
    gh_pr_create:
      desc: "Create a pull request on GitHub via the CLI"
      ex1: "Create a pull request with the given title"
      ex2: "Link the pull request to a GitHub project named \"Roadmap\""
      ex3: "Create a PR from branch `feature` in fork `monalisa` into the `develop` branch"
    gh_repo_create:
      desc: "Create a new GitHub repository from the CLI"
      ex1: "Create a new repository called `my-project` on GitHub (interactive prompts follow)"
      ex2: "Create a public repository and clone it locally"
      ex3: "Create a private remote repository from the current folder and add a remote named `upstream`"

  aliases:
    _root:
      title: "üí° Git Aliases (Useful Shortcuts)"
      intro: "Set up convenient aliases to accelerate common Git commands:"

  pro:
    _root:
      title: "üöÄ Advanced Git Commands for Professionals"
    git_filter_repo:
      desc: "A powerful and efficient tool for rewriting Git history to remove or modify files, authorship, or paths; replaces `git filter-branch` with improved speed and safety"
      ex1: "Rewrite repository history to remove sensitive files or directories without the performance issues of `git filter-branch`. Use with caution"
      ex2: "Bulk replace strings or patterns across the entire history (e.g., sanitise credentials)"
      ex3: "Extract subdirectory history into a new repository, preserving commit metadata"
    git_worktree:
      desc: "Manage multiple working directories linked to a single repository, allowing concurrent work on different branches without cloning"
      ex1: "Create an additional working tree attached to the same repository, enabling parallel branch checkouts without clones"
      ex2: "List all active worktrees, their paths, and associated branches"
      ex3: "Remove a linked worktree when no longer required, cleaning up directories safely"
    git_replace:
      desc: "Create temporary references that replace existing objects, enabling non-destructive local history manipulation and testing"
      ex1: "Temporarily substitute one commit for another in your local repository ‚Äî useful for testing or patching without rewriting history"
      ex2: "Show all active replacement references"
      ex3: "Delete a specific replacement reference to revert behaviour"
    git_stash_adv:
      desc: "Temporarily save uncommitted changes to a stack, allowing you to switch context without committing unfinished work"
      ex1: "Interactively select hunks of changes to stash, providing fine-grained control over what is saved"
      ex2: "Create a stash with a custom message for easier identification"
      ex3: "Apply a specific stash from the stash list without dropping it"
    git_rebase_adv:
      desc: "Reapply commits on top of another base tip, facilitating a cleaner, linear project history and interactive history editing"
      ex1: "Start an interactive rebase session that automatically reorders and squashes commits marked as fixup or squash, streamlining history cleanup"
      ex2: "Automatically reorder and squash commits marked as fixup or squash before pushing, ensuring a tidy commit history"
      ex3: "Create a fix-up commit that will be auto-squashed during interactive rebase"
      ex4: "Create a squash commit to combine with a specified commit during rebase"
    git_bisect_pro:
      desc: "Binary search tool to identify the commit that introduced a bug by testing successive commits and narrowing down the faulty change"
      ex1: "Automate the bisect process by running a specified test script on each commit to identify the buggy commit without manual effort"
      ex2: "Automate bisection with a test script, significantly speeding up bug identification"
      ex3: "Open a graphical tool to visualise the bisection process"
      ex4: "Exit bisect mode and return to the original HEAD"
    git_commit_pro:
      desc: "Record changes to the repository with advanced options for amend, sign, fixup, and message customisation, maintaining high-quality project history"
      ex1: "Create a commit signed with your GPG key to ensure cryptographic verification of authenticity and authorship"
      ex2: "Sign your commits with your GPG key to guarantee integrity and authorship verification"
      ex3: "Configure the GPG key used to sign commits globally"
      ex4: "Verify and display GPG signature information for commits"
    git_reflog_pro:
      desc: "Maintain a log of updates to HEAD and branches, essential for recovering lost commits and understanding local history movements"
      ex1: "Reset the current branch to a previous state from reflog to recover or undo changes"
      ex2: "Immediately expire all reflog entries, cleaning up reflog history (use with caution)"

  pro_tips:
    _root:
      title: "üß∞ Pro Workflow Tips and Automation"
    columns:
      topic: "Topic"
      commands_example: "Commands / Example"
      explanation_tips: "Explanation & Pro Tips"
    aggressive_cleanup:
      topic: "Aggressive Repository Clean-up"
      desc: "Performs deep garbage collection and prunes unreachable objects immediately to optimise the repository. Best used during maintenance windows"
    parallel_worktrees:
      topic: "Parallel Branch Worktrees"
      desc: "Keep multiple working trees for simultaneous feature development, avoiding clone overhead"
    linear_history:
      topic: "Clean, Linear History"
      desc: "Before pushing, rebase interactively with autosquash to keep history clean and readable"
    secure_commits:
      topic: "Secure Commits"
      desc: "Sign commits with GPG to enhance trustworthiness in shared repositories ‚Äî mandatory in many enterprise environments"
    automated_bisect:
      topic: "Automated Bisecting"
      desc: "Automate bug hunting by running a test script on each candidate commit during bisect"
    conflict_cache:
      topic: "Conflict Resolution Cache"
      desc: "Enable reuse of conflict resolutions to accelerate resolving repeated merge conflicts across rebases or merges"
    shared_aliases_hooks:
      topic: "Shared Aliases and Hooks"
      desc: "Store common Git aliases and commit hooks in a shared repository or CI pipeline to enforce team standards and improve productivity"

  resources:
    _root:
      title: "Additional Resources"
    tip:
      title: "üß† **Tip**"
      desc: "Do not try to memorise everything. Use `--help`, explore, and practise regularly:"
    links:
      title: "üåê Useful Links"
      official_docs: "üìò **Official Git Documentation** ‚Äî detailed manual for all Git commands:"
      learn_branching: "üìô **Learn Git Branching** ‚Äî interactive visual tutorial to master branching concepts:"
      pro_git_book: "üìï **Pro Git Book** (free, by Scott Chacon & Ben Straub):"
      official_cheatsheet: "üìó **Git Cheatsheet** (official concise reference):"
