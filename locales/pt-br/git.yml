git:
  meta:
    _root:
      title: "üêô Git e GitHub CLI"
      desc: "Comandos b√°sicos e avan√ßados do Git para controle de vers√£o, ramifica√ß√£o, reposit√≥rios remotos, stash, tags e GitHub CLI."

  basic:
    _root:
      title: "üîπ Comandos B√°sicos"
    git_add:
      desc: "Adicionar um arquivo √† √°rea de staging"
      ex1: "Preparar um arquivo espec√≠fico para o pr√≥ximo commit"
      ex2: "Preparar todas as mudan√ßas no diret√≥rio atual e abaixo"
      ex3: "Escolher interativamente quais partes dos arquivos preparar (√∫til para commits parciais)"
    git_clone:
      desc: "Clonar um reposit√≥rio em um novo diret√≥rio"
      ex1: "Clonar apenas o branch especificado (em vez do padr√£o)"
      ex2: "Clonar apenas o √∫ltimo commit, criando uma c√≥pia superficial para economizar tempo e espa√ßo"
    git_commit:
      desc: "Registrar altera√ß√µes no reposit√≥rio"
      ex1: "Fazer commit com uma mensagem sem abrir o editor"
      ex2: "Preparar e commitar todos os arquivos rastreados modificados com uma mensagem"
      ex3: "Atualizar o √∫ltimo commit (alterar mensagem ou incluir mais mudan√ßas)"
      ex4: "Criar um commit de corre√ß√£o (fixup) para ser automaticamente squashado depois durante o rebase interativo"
    git_config:
      desc: "Obter e definir op√ß√µes do reposit√≥rio ou globais"
      ex1: "Definir nome de usu√°rio global do Git"
      ex2: "Definir email global do Git"
      ex3: "Listar todas as configura√ß√µes do Git (nome, email, editor, etc.)"
    git_diff:
      desc: "Mostrar altera√ß√µes entre commits, commit e diret√≥rio de trabalho, etc."
      ex1: "Mostrar o que voc√™ alterou desde o √∫ltimo commit (mudan√ßas n√£o preparadas)"
      ex2: "Mostrar o que ser√° inclu√≠do no pr√≥ximo commit"
      ex3: "Mostrar altera√ß√µes com diferen√ßas em n√≠vel de palavra"
    git_grep:
      desc: "Pesquisar dentro dos arquivos do reposit√≥rio"
      ex1: "Encontrar todas as men√ß√µes de `functionName` em todos os arquivos do projeto"
      ex2: "Encontrar linhas contendo `TODO` e mostrar n√∫meros de linha (√∫til para encontrar anota√ß√µes no c√≥digo)"
      ex3: "Pesquisar pela palavra `login` sem diferenciar mai√∫sculas de min√∫sculas"
    git_init:
      desc: "Criar um reposit√≥rio Git vazio ou reinicializar um existente"
      ex1: "Inicializar um novo reposit√≥rio no diret√≥rio my-project"
      ex2: "Inicializar um reposit√≥rio bare"
    git_log:
      desc: "Mostrar hist√≥rico de commits"
      ex1: "Mostrar hist√≥rico de commits em formato compacto de uma linha"
      ex2: "Mostrar todos os branches em um gr√°fico visual de commits"
      ex3: "Mostrar patch e estat√≠sticas de altera√ß√µes de arquivos para commits"
    git_reset:
      desc: "Remover arquivos da √°rea de staging, mantendo mudan√ßas no diret√≥rio de trabalho"
      ex1: "Remover um arquivo do staging (mant√©m suas edi√ß√µes)"
      ex2: "Voltar um commit e excluir todas as mudan√ßas (irrevers√≠vel!)"
      ex3: "Desfazer o √∫ltimo commit mas manter as altera√ß√µes prontas para novo commit"
      ex4: "Desfazer um commit mas manter as mudan√ßas fora do staging no diret√≥rio de trabalho"
    git_show:
      desc: "Mostrar v√°rios tipos de objetos"
      ex1: "Mostrar mudan√ßas e mensagem de um commit espec√≠fico"
      ex2: "Mostrar o commit anterior ao atual"
      ex3: "Mostrar um resumo das altera√ß√µes de arquivos do √∫ltimo commit"
    git_status:
      desc: "Mostrar o status da √°rvore de trabalho"
      ex1: "Mostrar status em formato curto"
      ex2: "Mostrar branch atual e status dos arquivos"

  branching_merging:
    _root:
      title: "üåø Ramifica√ß√£o e Merge"
    git_branch:
      desc: "Criar, listar ou excluir branches"
      ex1: "Criar um novo branch chamado `new-feature`"
      ex2: "Excluir um branch local chamado `old-feature`"
    git_checkout:
      desc: "Trocar de branch ou restaurar arquivos de outro commit"
      ex1: "Trocar para o branch `main`"
      ex2: "Criar e trocar para um novo branch chamado `new-branch`"
    git_switch:
      desc: "Trocar de branch (alternativa simplificada ao `checkout`)"
      ex1: "Trocar para o branch `main`"
      ex2: "Criar e trocar para um novo branch chamado `feature-x`"
      ex3: "Trocar para um branch existente chamado `new-feature`"
    git_merge:
      desc: "Combinar altera√ß√µes de outro branch no atual"
      ex1: "Fazer merge do branch `new-feature` no branch atual"
      ex2: "Sempre criar um commit de merge (mesmo se fast-forward for poss√≠vel)"
      ex3: "Cancelar o merge e reverter altera√ß√µes se ocorrerem conflitos"
    git_rebase:
      desc: "Mover ou reaplicar commits em cima de um novo commit base"
      ex1: "Reaplicar os commits do seu branch em cima do branch `main`"
      ex2: "Editar interativamente os √∫ltimos 3 commits"
      ex3: "Parar e desfazer um rebase em andamento"
      ex4: "Squash autom√°tico de commits marcados como fixup ou squash durante rebase interativo"
    git_cherry_pick:
      desc: "Aplicar commits espec√≠ficos de outro branch"
      ex1: "Aplicar um commit espec√≠fico (por hash) ao branch atual"
      ex2: "Continuar cherry-pick ap√≥s resolver conflitos"
      ex3: "Aplicar um intervalo de commits de `A` (excluindo) a `B` (incluindo)"

  remote:
    _root:
      title: "üì° Reposit√≥rios Remotos"
    git_remote:
      desc: "Gerenciar links para reposit√≥rios remotos (como GitHub)"
      ex1: "Mostrar nomes e URLs dos remotos"
      ex2: "Adicionar um reposit√≥rio remoto chamado `origin`"
    git_pull:
      desc: "Baixar e mesclar automaticamente mudan√ßas de um branch remoto"
      ex1: "Buscar e mesclar mudan√ßas do branch remoto `main` no seu branch atual"
      ex2: "Buscar e rebasear seu branch atual em cima do remoto em vez de mesclar"
    git_push:
      desc: "Enviar suas altera√ß√µes locais para um reposit√≥rio remoto"
      ex1: "Enviar seu branch local `main` para o remoto `origin`"
    git_fetch:
      desc: "Baixar mudan√ßas do remoto sem mesclar"
      ex1: "Buscar todas as atualiza√ß√µes do remoto `origin`, mas n√£o aplic√°-las ainda"
      ex2: "Buscar apenas o branch `main` do remoto"
      ex3: "Buscar atualiza√ß√µes de todos os remotos"
      ex4: "Limpar branches deletados ‚Äî remover refs locais para branches que foram exclu√≠dos remotamente"
      ex5: "Mostrar o que seria buscado, sem realmente baixar nada"
      ex6: "Atualizar for√ßadamente seu branch de rastreamento local (`origin/main`), sobrescrevendo conflitos"

  stash_cleanup:
    _root:
      title: "üì¶ Stash e Limpeza"
    git_stash:
      desc: "Salvar temporariamente altera√ß√µes n√£o commitadas (trabalho em andamento)"
      ex1: "Salvar arquivos modificados e staged, depois reverter diret√≥rio de trabalho para o √∫ltimo commit"
      ex2: "Reaplicar as √∫ltimas altera√ß√µes armazenadas (stash permanece salvo)"
      ex3: "Reaplicar e remover o √∫ltimo stash"
      ex4: "Mostrar lista de todas as altera√ß√µes salvas (stashed)"
      ex5: "Criar um novo branch e aplicar o √∫ltimo stash nele"
    git_clean:
      desc: "Excluir permanentemente arquivos n√£o rastreados (fora do Git)"
      ex1: "Excluir arquivos n√£o rastreados no diret√≥rio atual"
      ex2: "Excluir arquivos e pastas n√£o rastreados"
      ex3: "Pr√©-visualizar o que ser√° exclu√≠do (dry run seguro)"

  tags:
    _root:
      title: "üè∑Ô∏è Tags"
    git_tag:
      desc: "Criar, listar ou excluir tags para marcar pontos espec√≠ficos na hist√≥ria (como releases)"
      ex1: "Criar uma tag anotada chamada `v1.0` com mensagem (salva como objeto completo do Git, ideal para releases)"
      ex2: "Excluir a tag local chamada `v1.0` (n√£o afeta o remoto)"
    git_push:
      desc: "Enviar commits, branches e tags do local para o reposit√≥rio remoto"
      ex1: "Enviar todas as tags locais para o remoto (√∫til ap√≥s criar m√∫ltiplas vers√µes)"
      ex2: "Enviar uma tag espec√≠fica (ex.: `v1.0`) para o reposit√≥rio remoto"
      ex3: "Excluir a tag remota `v1.0` (observe a sintaxe com dois pontos)"

  conflicts:
    _root:
      title: "üõ†Ô∏è Resolu√ß√£o de Conflitos"
    git_mergetool:
      desc: "Abrir uma ferramenta visual para ajudar a resolver conflitos de merge"
      ex1: "Usar uma ferramenta de merge espec√≠fica (como Meld) para resolver conflitos"
    git_rerere:
      desc: "Permitir que o Git se lembre de como voc√™ resolveu conflitos de merge antes"
      ex1: "Ativar reuso autom√°tico de resolu√ß√µes anteriores de conflitos"
      ex2: "Mostrar quais arquivos t√™m resolu√ß√µes salvas"
      ex3: "Mostrar quais altera√ß√µes o Git salvou para reuso futuro"

  advanced:
    _root:
      title: "‚öôÔ∏è Comandos Avan√ßados"
    git_bisect:
      desc: "Usar busca bin√°ria para encontrar o commit que introduziu um bug"
      ex1: "Iniciar busca bin√°ria entre um commit bom e um ruim conhecido para localizar um bug"
      ex2: 'Marcar o commit atual como "ruim" (cont√©m o bug)'
      ex3: 'Marcar um commit conhecido como "bom", onde o bug n√£o existia'
    git_blame:
      desc: "Mostrar quem modificou pela √∫ltima vez cada linha de um arquivo, com revis√£o e autor"
      ex1: "Mostrar autor e informa√ß√µes de commit para cada linha do arquivo"
      ex2: "Mostrar informa√ß√µes de blame apenas das linhas 10 a 20"
      ex3: "Mostrar emails dos autores junto √†s altera√ß√µes"
    git_reflog:
      desc: "Visualizar e gerenciar o reflog de movimenta√ß√µes de branch e HEAD"
      ex1: "Ver onde o branch `main` apontava uma semana atr√°s"
      ex2: "Pr√©-visualizar quais entradas de reflog mais antigas que 30 dias podem ser limpas"
      ex3: "Excluir uma entrada espec√≠fica do reflog (use com cuidado, pode afetar recupera√ß√£o)"
    git_submodule:
      desc: "Adicionar, inicializar, atualizar ou inspecionar subm√≥dulos (reposit√≥rios dentro de reposit√≥rios)"
      ex1: "Adicionar um reposit√≥rio externo como subm√≥dulo em um caminho espec√≠fico"
      ex2: "Inicializar e baixar todos os subm√≥dulos listados no reposit√≥rio"
      ex3: "Executar `git pull` dentro de cada subm√≥dulo para atualiz√°-los"
      ex4: "Sincronizar URLs de subm√≥dulos ap√≥s mudan√ßas no arquivo `.gitmodules`"
      ex5: "Atualizar subm√≥dulos para o √∫ltimo commit de seus branches remotos"
    git_archive:
      desc: "Criar um arquivo (zip, tar, etc.) dos arquivos de um commit ou branch espec√≠fico"
      ex1: "Criar um arquivo ZIP dos arquivos do projeto no HEAD"
      ex2: "Criar um arquivo `.tar.gz` compactado a partir do HEAD atual"
      ex3: "Criar um arquivo `.tar.gz` compactado do projeto atual, colocando todos os arquivos em uma pasta chamada `project/` dentro do arquivo"
    git_gc:
      desc: "Limpar arquivos desnecess√°rios e otimizar o reposit√≥rio para desempenho"
      ex1: "Executar uma limpeza e otimiza√ß√£o completa (pode ser lenta mas eficaz)"
      ex2: "Remover imediatamente todos os objetos inalcan√ß√°veis (perigoso se n√£o tiver certeza)"
    git_shortlog:
      desc: "Resumo r√°pido de autores e seus commits"
      ex1: "Mostrar uma lista de autores com seus emails (ex.: para analisar quem contribuiu e quanto)"
      ex2: "Mostrar quantos commits cada autor fez, ordenados por n√∫mero de commits"
      ex3: "Mesmo que acima, mas incluindo nomes e emails ‚Äî √∫til para rastreamento detalhado de atividade"
    git_revert:
      desc: "Criar um novo commit que desfaz altera√ß√µes de um commit anterior sem reescrever o hist√≥rico"
      ex1: "Desfazer o √∫ltimo commit criando um novo commit que reverte suas mudan√ßas"
      ex2: "Desfazer um commit espec√≠fico por hash, adicionando com seguran√ßa um novo commit que o reverte"

  gh:
    _root:
      title: "üêô GitHub CLI"
      note: "`gh` permite gerenciar o GitHub a partir do terminal."
    gh_auth_login:
      desc: "Autenticar-se em um host GitHub para permitir que comandos CLI interajam com sua conta"
      ex1: "Autenticar usando um token de acesso pessoal armazenado em um arquivo (`mytoken.txt`)"
      ex2: "Autenticar em um servidor GitHub Enterprise (n√£o github.com)"
    gh_repo_clone:
      desc: "Clonar um reposit√≥rio GitHub para sua m√°quina local"
      ex1: "Clonar o reposit√≥rio `repo` pertencente a `user` em uma pasta chamada `repo`"
      ex2: "Clonar o reposit√≥rio mas baixar apenas o commit mais recente, criando uma c√≥pia superficial mais r√°pida e leve"
      ex3: "Clonar o reposit√≥rio em uma pasta personalizada `workspace/cli`"
    gh_issue_list:
      desc: "Listar issues em um reposit√≥rio GitHub, opcionalmente filtradas por v√°rios crit√©rios"
      ex1: "Listar issues atribu√≠das a voc√™"
      ex2: "Listar issues independentemente do estado (abertas ou fechadas)"
      ex3: 'Listar issues que contenham "error", n√£o atribu√≠das, ordenadas por data de cria√ß√£o ascendente'
    gh_pr_create:
      desc: "Criar um pull request no GitHub via CLI"
      ex1: "Criar um pull request com o t√≠tulo fornecido"
      ex2: 'Vincular o pull request a um projeto GitHub chamado "Roadmap"'
      ex3: "Criar um PR do branch `feature` no fork `monalisa` para o branch `develop`"
    gh_repo_create:
      desc: "Criar um novo reposit√≥rio GitHub via CLI"
      ex1: "Criar um novo reposit√≥rio chamado `my-project` no GitHub (prompts interativos a seguir)"
      ex2: "Criar um reposit√≥rio p√∫blico e clon√°-lo localmente"
      ex3: "Criar um reposit√≥rio remoto privado a partir da pasta atual e adicionar remoto chamado `upstream`"

  aliases:
    _root:
      title: "üí° Atalhos Git (Aliases √öteis)"
      intro: "Configure aliases convenientes para acelerar comandos Git comuns:"

  pro:
    _root:
      title: "üöÄ Comandos Avan√ßados de Git para Profissionais"
    git_filter_repo:
      desc: "Uma ferramenta poderosa e eficiente para reescrever o hist√≥rico do Git, removendo ou modificando arquivos, autoria ou caminhos; substitui o git filter-branch com mais velocidade e seguran√ßa"
      ex1: "Reescrever de forma eficiente o hist√≥rico do reposit√≥rio para remover arquivos ou diret√≥rios sens√≠veis sem os problemas de desempenho do `git filter-branch`. Use com cuidado"
      ex2: "Substituir em massa strings ou padr√µes em todo o hist√≥rico (ex.: sanitizar credenciais)"
      ex3: "Extrair hist√≥rico de um subdiret√≥rio em um novo reposit√≥rio, preservando metadados de commits"
    git_worktree:
      desc: "Gerenciar m√∫ltiplos diret√≥rios de trabalho vinculados a um √∫nico reposit√≥rio, permitindo trabalhar em diferentes branches simultaneamente sem clonar"
      ex1: "Criar um diret√≥rio de trabalho adicional anexado ao mesmo reposit√≥rio, permitindo checkouts paralelos de branches sem clones"
      ex2: "Listar todos os worktrees ativos, seus caminhos e branches associados"
      ex3: "Remover um worktree vinculado quando n√£o for mais necess√°rio, limpando diret√≥rios com seguran√ßa"
    git_replace:
      desc: "Criar refer√™ncias tempor√°rias que substituem objetos existentes, permitindo manipula√ß√£o de hist√≥rico local n√£o destrutiva para testes"
      ex1: "Trocar temporariamente um commit por outro em seu reposit√≥rio local, √∫til para testes ou corre√ß√µes sem reescrever hist√≥rico"
      ex2: "Mostrar todas as refer√™ncias de substitui√ß√£o ativas"
      ex3: "Excluir uma refer√™ncia de substitui√ß√£o espec√≠fica para reverter comportamento"
    git_stash_adv:
      desc: "Salvar temporariamente altera√ß√µes n√£o commitadas em uma pilha, permitindo troca de contexto sem commitar trabalho inacabado"
      ex1: "Selecionar interativamente trechos de altera√ß√µes para stash, fornecendo controle granular sobre o que √© salvo"
      ex2: "Criar um stash com mensagem personalizada para identifica√ß√£o mais f√°cil"
      ex3: "Aplicar um stash espec√≠fico da lista de stashes, sem remov√™-lo"
    git_rebase_adv:
      desc: "Reaplicar commits em cima de outra base, facilitando hist√≥rico limpo e linear e edi√ß√£o interativa"
      ex1: "Iniciar uma sess√£o de rebase interativo que automaticamente reordena e squash commits marcados como fixup ou squash, simplificando limpeza de hist√≥rico"
      ex2: "Reordenar e squashar commits marcados como fixup ou squash, limpando hist√≥rico antes de push"
      ex3: "Criar um commit fixup que ser√° automaticamente squashado durante rebase interativo"
      ex4: "Criar um commit squash para combinar com o commit especificado no rebase"
    git_bisect_pro:
      desc: "Ferramenta de busca bin√°ria para identificar de forma eficiente o commit que introduziu um bug testando commits sucessivos e restringindo a mudan√ßa problem√°tica"
      ex1: "Automatizar o processo de bisect executando um script de teste em cada commit para identificar rapidamente o commit que introduziu um bug sem interven√ß√£o manual"
      ex2: "Automatizar a bisse√ß√£o rodando um script de teste em cada commit, acelerando significativamente a identifica√ß√£o de bugs"
      ex3: "Abrir uma ferramenta gr√°fica para visualizar o processo de bisse√ß√£o"
      ex4: "Sair do modo bisect e retornar ao HEAD original"
    git_commit_pro:
      desc: "Registrar mudan√ßas no reposit√≥rio com op√ß√µes detalhadas de amend, assinatura, fixup e personaliza√ß√£o de mensagens para manter hist√≥rico de alta qualidade"
      ex1: "Criar um commit assinado com sua chave GPG para garantir verifica√ß√£o criptogr√°fica da autenticidade e autoria do commit"
      ex2: "Assinar criptograficamente seus commits com sua chave GPG, garantindo integridade e autoria"
      ex3: "Configurar globalmente a chave GPG usada para assinar commits"
      ex4: "Verificar e exibir informa√ß√µes de assinatura GPG para commits"
    git_reflog_pro:
      desc: "Manter um log de atualiza√ß√µes de HEAD e branches, essencial para recuperar commits perdidos e entender movimenta√ß√µes locais de hist√≥rico"
      ex1: "Resetar o branch atual para um estado anterior do reflog para recuperar ou desfazer mudan√ßas"
      ex2: "Expirar imediatamente todas as entradas do reflog, limpando o hist√≥rico do reflog (use com cautela)"

  pro_tips:
    _root:
      title: "üß∞ Dicas de Workflow Profissional e Automa√ß√£o"
    columns:
      topic: "T√≥pico"
      commands_example: "Comandos / Exemplo"
      explanation_tips: "Explica√ß√£o & Dicas Pro"
    aggressive_cleanup:
      topic: "Limpeza Agressiva do Reposit√≥rio"
      desc: "Executa coleta de lixo profunda e poda objetos inalcan√ß√°veis imediatamente para otimizar o reposit√≥rio. Use em janelas de manuten√ß√£o"
    parallel_worktrees:
      topic: "Worktrees Paralelos de Branch"
      desc: "Manter m√∫ltiplos worktrees para desenvolvimento simult√¢neo de features, evitando overhead de clones"
    linear_history:
      topic: "Hist√≥rico Limpo e Linear"
      desc: "Antes de enviar (push), use rebase interativo com autosquash para manter hist√≥rico limpo e leg√≠vel"
    secure_commits:
      topic: "Commits Seguros"
      desc: "Assine commits com GPG para aumentar a confiabilidade em reposit√≥rios compartilhados; obrigat√≥rio em muitos ambientes corporativos"
    automated_bisect:
      topic: "Bisse√ß√£o Automatizada"
      desc: "Automatize a ca√ßa a bugs executando um script de teste em cada commit candidato durante o bisect"
    conflict_cache:
      topic: "Cache de Resolu√ß√£o de Conflitos"
      desc: "Ativar reuso de resolu√ß√µes de conflitos para acelerar a resolu√ß√£o de conflitos repetidos em rebases ou merges"
    shared_aliases_hooks:
      topic: "Aliases e Hooks Compartilhados"
      desc: "Armazene aliases comuns do Git e hooks de commit em um reposit√≥rio compartilhado ou pipeline CI para impor padr√µes de equipe e melhorar produtividade"

  resources:
    _root:
      title: "Recursos adicionais"
    tip:
      title: "üß† **Dica**"
      desc: "N√£o tente memorizar tudo. Use `--help`, explore e pratique regularmente:"
    links:
      title: "üåê Links √∫teis"
      official_docs: "üìò **Documenta√ß√£o oficial do Git** ‚Äî manual detalhado de todos os comandos Git:"
      learn_branching: "üìô **Learn Git Branching** ‚Äî tutorial visual interativo para dominar conceitos de branching:"
      pro_git_book: "üìï **Livro Pro Git** (gratuito, de Scott Chacon & Ben Straub):"
      official_cheatsheet: "üìó **Git Cheatsheet** (refer√™ncia oficial concisa):"
